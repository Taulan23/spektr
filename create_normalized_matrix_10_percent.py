#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
СОЗДАНИЕ НОРМАЛИЗОВАННОЙ МАТРИЦЫ ОШИБОК ДЛЯ 10% ШУМА
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def create_normalized_matrix_10_percent():
    """Создание нормализованной матрицы ошибок для 10% шума"""
    
    # Нормализованная матрица ошибок для 10% шума (из наших результатов)
    confusion_matrix_10_percent = np.array([
        [0.967, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.033],  # береза
        [0.000, 0.700, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.300],  # дуб
        [0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.033],  # ель
        [0.000, 0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.033],  # ель_голубая
        [0.000, 0.000, 0.000, 0.000, 0.867, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.133, 0.000],  # ива
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.867, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.133],  # каштан
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.033],  # клен
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.033],  # клен_ам
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.900, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.100],  # липа
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.833, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.167],  # лиственница
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.867, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.133],  # орех
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.867, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.133],  # осина
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.033],  # рябина
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.933, 0.000, 0.000, 0.000, 0.000, 0.000, 0.067],  # сирень
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.000, 0.033],  # сосна
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.000, 0.000, 0.000, 0.033],  # тополь_бальзамический
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.867, 0.000, 0.000, 0.133],  # тополь_черный
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.000, 0.033],  # туя
        [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.967, 0.033],  # черемуха
        [0.000, 0.300, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.700]   # ясень
    ])
    
    # Названия классов
    class_names = [
        'береза', 'дуб', 'ель', 'ель_голубая', 'ива', 'каштан', 'клен', 'клен_ам',
        'липа', 'лиственница', 'орех', 'осина', 'рябина', 'сирень', 'сосна',
        'тополь_бальзамический', 'тополь_черный', 'туя', 'черемуха', 'ясень'
    ]
    
    # Создаем DataFrame для лучшего отображения
    df_cm = pd.DataFrame(confusion_matrix_10_percent, 
                        index=class_names, 
                        columns=class_names)
    
    # Настройки для красивого отображения
    plt.figure(figsize=(16, 14))
    plt.rcParams['font.size'] = 10
    
    # Создаем тепловую карту
    sns.heatmap(df_cm, 
                annot=True, 
                fmt='.3f', 
                cmap='RdYlBu_r', 
                cbar_kws={'label': 'Вероятность'},
                square=True,
                linewidths=0.5,
                linecolor='white',
                annot_kws={'size': 8})
    
    # Настройки заголовка и меток
    plt.title('Нормализованная матрица ошибок Extra Trees (1712 деревьев)\n10% шума', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Предсказанный класс', fontsize=12, fontweight='bold')
    plt.ylabel('Истинный класс', fontsize=12, fontweight='bold')
    
    # Поворачиваем метки для лучшей читаемости
    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)
    
    # Добавляем информацию о точности
    accuracy = np.trace(confusion_matrix_10_percent) / len(confusion_matrix_10_percent) * 100
    plt.figtext(0.5, 0.02, 
                f'Общая точность: {accuracy:.1f}% | Extra Trees (n_estimators=1712) | 10% шума',
                ha='center', fontsize=12, fontweight='bold',
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
    
    # Настройки макета
    plt.tight_layout()
    plt.subplots_adjust(bottom=0.1)
    
    # Сохраняем изображение
    filename = 'normalized_confusion_matrix_10_percent_noise.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"✅ Нормализованная матрица сохранена: {filename}")
    
    # Показываем изображение
    plt.show()
    
    # Выводим статистику
    print(f"\n📊 СТАТИСТИКА МАТРИЦЫ:")
    print(f"   • Общая точность: {accuracy:.1f}%")
    print(f"   • Размер матрицы: {confusion_matrix_10_percent.shape}")
    print(f"   • Количество классов: {len(class_names)}")
    
    # Анализ основных ошибок
    print(f"\n🔍 ОСНОВНЫЕ ОШИБКИ:")
    for i, class_name in enumerate(class_names):
        correct = confusion_matrix_10_percent[i, i]
        errors = 1 - correct
        if errors > 0.05:  # Показываем только значительные ошибки
            print(f"   • {class_name}: {errors:.1%} ошибок")

if __name__ == "__main__":
    create_normalized_matrix_10_percent() 