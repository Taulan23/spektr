#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –°–†–ê–í–ù–ï–ù–ò–ï –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–û–í –ö –®–£–ú–£
CNN vs –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∞—Å—Å–æ–≤
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

def create_ultimate_comparison():
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    
    print("üî•" * 30)
    print("üî• –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–û–í")
    print("üî•" * 30)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    algorithms = ['1D Alexnet\n(20 –≤–∏–¥–æ–≤)', 'Extra Trees\n(19 –≤–∏–¥–æ–≤)', 'Random Forest\n(19 –≤–∏–¥–æ–≤)', 
                  'Gradient Boost\n(19 –≤–∏–¥–æ–≤)', 'SVM\n(19 –≤–∏–¥–æ–≤)', 'MLP\n(19 –≤–∏–¥–æ–≤)']
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º —à—É–º–∞
    results = {
        '0% —à—É–º–∞': [99.3, 98.8, 98.8, 97.9, 20.4, 12.5],
        '1% —à—É–º–∞': [97.2, 6.5, 6.0, 6.5, 13.9, 10.2],
        '5% —à—É–º–∞': [64.8, 4.9, 4.7, 4.9, 12.8, 9.1],
        '10% —à—É–º–∞': [33.7, 5.4, 6.0, 4.0, 13.0, 9.8]
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–≥–∞-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    fig = plt.figure(figsize=(24, 16))
    
    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ax1 = plt.subplot(2, 3, (1, 2))
    
    noise_levels = [0, 1, 5, 10]
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
    
    for i, alg in enumerate(algorithms):
        accuracies = [results[f'{noise}% —à—É–º–∞'][i] for noise in noise_levels]
        plt.plot(noise_levels, accuracies, 'o-', linewidth=3, markersize=8, 
                label=alg, color=colors[i])
    
    plt.title('üî• –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ö –®–£–ú–£: CNN vs –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã', 
              fontsize=18, fontweight='bold', pad=20)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=14)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)', fontsize=14)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=11)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 105)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
    plt.annotate('99.3%', (0, 99.3), xytext=(5, 102), fontsize=12, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='blue'))
    plt.annotate('97.2%', (1, 97.2), xytext=(1.5, 90), fontsize=12, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='blue'))
    plt.annotate('–ö–û–õ–õ–ê–ü–°\n6.5%', (1, 6.5), xytext=(2, 20), fontsize=11, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='red'), color='red')
    
    # 2. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    ax2 = plt.subplot(2, 3, 3)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é (–ø–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 0% —à—É–º–∞)
    degradation_data = []
    for alg_idx in range(len(algorithms)):
        row = []
        baseline = results['0% —à—É–º–∞'][alg_idx]
        for noise in ['1% —à—É–º–∞', '5% —à—É–º–∞', '10% —à—É–º–∞']:
            current = results[noise][alg_idx]
            degradation = ((baseline - current) / baseline) * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä–∏
            row.append(degradation)
        degradation_data.append(row)
    
    degradation_df = pd.DataFrame(degradation_data, 
                                 index=[alg.replace('\n', ' ') for alg in algorithms],
                                 columns=['1%', '5%', '10%'])
    
    sns.heatmap(degradation_df, annot=True, fmt='.1f', cmap='Reds', 
                cbar_kws={'label': '–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è (%)'}, ax=ax2)
    ax2.set_title('üî• –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
    ax2.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞')
    ax2.set_ylabel('')
    
    # 3. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (1% —à—É–º–∞)
    ax3 = plt.subplot(2, 3, 4)
    
    critical_results = results['1% —à—É–º–∞']
    colors_bar = ['green' if acc > 50 else 'red' for acc in critical_results]
    
    bars = ax3.bar(range(len(algorithms)), critical_results, color=colors_bar, alpha=0.8)
    ax3.set_title('‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç: 1% —à—É–º–∞', fontsize=14, fontweight='bold')
    ax3.set_xlabel('–ê–ª–≥–æ—Ä–∏—Ç–º—ã')
    ax3.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)')
    ax3.set_xticks(range(len(algorithms)))
    ax3.set_xticklabels([alg.replace('\n', ' ') for alg in algorithms], rotation=45, ha='right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, critical_results):
        ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    # –õ–∏–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    ax3.axhline(y=50, color='orange', linestyle='--', linewidth=2, label='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ (50%)')
    ax3.legend()
    
    # 4. –ü–∏—Ä–æ–∂–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤—ã–∂–∏–≤—à–∏—Ö
    ax4 = plt.subplot(2, 3, 5)
    
    survivors_1pct = sum(1 for acc in critical_results if acc > 50)
    dead_1pct = len(critical_results) - survivors_1pct
    
    labels = ['–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã\n–ø—Ä–∏ 1% —à—É–º–∞', '–ù–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã\n–ø—Ä–∏ 1% —à—É–º–∞']
    sizes = [survivors_1pct, dead_1pct]
    colors_pie = ['green', 'red']
    explode = (0.1, 0)
    
    ax4.pie(sizes, explode=explode, labels=labels, colors=colors_pie, autopct='%1.0f%%',
           shadow=True, startangle=90, textprops={'fontsize': 11, 'fontweight': 'bold'})
    ax4.set_title('üéØ –í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤', fontsize=14, fontweight='bold')
    
    # 5. –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
    ax5 = plt.subplot(2, 3, 6)
    ax5.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    summary_data = []
    for i, alg in enumerate(algorithms):
        baseline = results['0% —à—É–º–∞'][i]
        noise_1 = results['1% —à—É–º–∞'][i]
        noise_5 = results['5% —à—É–º–∞'][i]
        
        # –°—Ç–∞—Ç—É—Å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        if noise_1 > 80:
            status = "üü¢ –û–¢–õ–ò–ß–ù–û"
        elif noise_1 > 50:
            status = "üü° –£–î–û–í–õ."
        else:
            status = "üî¥ –ü–õ–û–•–û"
        
        summary_data.append([
            alg.replace('\n', ' '),
            f"{baseline:.1f}%",
            f"{noise_1:.1f}%",
            f"{noise_5:.1f}%",
            status
        ])
    
    table = ax5.table(cellText=summary_data,
                     colLabels=['–ê–ª–≥–æ—Ä–∏—Ç–º', '0% —à—É–º–∞', '1% —à—É–º–∞', '5% —à—É–º–∞', '–°—Ç–∞—Ç—É—Å'],
                     cellLoc='center',
                     loc='center',
                     colWidths=[0.25, 0.15, 0.15, 0.15, 0.3])
    
    table.auto_set_font_size(False)
    table.set_fontsize(9)
    table.scale(1, 2)
    
    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for i in range(5):
        table[(0, i)].set_facecolor('#40466e')
        table[(0, i)].set_text_props(weight='bold', color='white')
    
    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
    for i in range(1, len(summary_data) + 1):
        status = summary_data[i-1][4]
        if "–û–¢–õ–ò–ß–ù–û" in status:
            table[(i, 4)].set_facecolor('#90EE90')
        elif "–£–î–û–í–õ" in status:
            table[(i, 4)].set_facecolor('#FFD700')
        else:
            table[(i, 4)].set_facecolor('#FFB6C1')
    
    ax5.set_title('üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í', fontsize=14, fontweight='bold', pad=20)
    
    # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('üî• –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: CNN –ü–û–ë–ï–ñ–î–ê–ï–¢ –ü–†–ò –ë–û–õ–¨–®–û–ú –ö–û–õ–ò–ß–ï–°–¢–í–ï –ö–õ–ê–°–°–û–í! üî•\n' + 
                 '1D Alexnet –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏',
                 fontsize=20, fontweight='bold', y=0.98)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'final_algorithms_comparison_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    return filename

def create_key_insights_report():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'key_insights_report_{timestamp}.txt'
    
    report_content = f"""
üî• –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´: CNN vs –¢–†–ê–î–ò–¶–ò–û–ù–ù–´–ï –ê–õ–ì–û–†–ò–¢–ú–´
================================================================

üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üéØ –ó–∞–¥–∞—á–∞: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≤ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∞—Å—Å–æ–≤

üèÜ –ì–õ–ê–í–ù–´–ô –í–´–í–û–î:
–ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–æ 19-20 –≤–∏–¥–æ–≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
–º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ö–ê–¢–ê–°–¢–†–û–§–ò–ß–ï–°–ö–ò –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã–º–∏ –∫ —à—É–º—É!

üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:

1. ü•á 1D ALEXNET (20 –í–ò–î–û–í):
   ‚úÖ 0% —à—É–º–∞: 99.3% - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!
   ‚úÖ 1% —à—É–º–∞: 97.2% - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è (2.1%)
   ‚ö†Ô∏è 5% —à—É–º–∞: 64.8% - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
   ‚ùå 10% —à—É–º–∞: 33.7% - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

2. ü•à EXTRA TREES (19 –í–ò–î–û–í):
   ‚úÖ 0% —à—É–º–∞: 98.8% - –û—Ç–ª–∏—á–Ω–æ –±–µ–∑ —à—É–º–∞
   ‚ùå 1% —à—É–º–∞: 6.5% - –ö–ê–¢–ê–°–¢–†–û–§–ò–ß–ï–°–ö–ê–Ø –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è (93.4%!)
   ‚ùå 5% —à—É–º–∞: 4.9% - –ü–æ–ª–Ω–∞—è –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
   ‚ùå 10% —à—É–º–∞: 5.4% - –°–ª—É—á–∞–π–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ

3. ü•â RANDOM FOREST (19 –í–ò–î–û–í):
   ‚úÖ 0% —à—É–º–∞: 98.8% - –û—Ç–ª–∏—á–Ω–æ –±–µ–∑ —à—É–º–∞
   ‚ùå 1% —à—É–º–∞: 6.0% - –ö–ê–¢–ê–°–¢–†–û–§–ò–ß–ï–°–ö–ê–Ø –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è (93.9%!)
   ‚ùå 5% —à—É–º–∞: 4.7% - –ü–æ–ª–Ω–∞—è –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
   ‚ùå 10% —à—É–º–∞: 6.0% - –°–ª—É—á–∞–π–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:

1. –≠–§–§–ï–ö–¢ –ú–ê–°–®–¢–ê–ë–ê:
   - –ü—Ä–∏ 7 –≤–∏–¥–∞—Ö: —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É—Å—Ç–æ–π—á–∏–≤—ã –¥–æ 20% —à—É–º–∞
   - –ü—Ä–∏ 19-20 –≤–∏–¥–∞—Ö: –∫–æ–ª–ª–∞–ø—Å —É–∂–µ –ø—Ä–∏ 1% —à—É–º–∞!

2. –ü–†–ï–í–û–°–•–û–î–°–¢–í–û CNN:
   - 1D Alexnet –≤ 15 –†–ê–ó —É—Å—Ç–æ–π—á–∏–≤–µ–µ –ø—Ä–∏ 1% —à—É–º–∞ (97.2% vs 6.5%)
   - 1D Alexnet –≤ 13 –†–ê–ó —É—Å—Ç–æ–π—á–∏–≤–µ–µ –ø—Ä–∏ 5% —à—É–º–∞ (64.8% vs 4.9%)
   - –¢–æ–ª—å–∫–æ CNN —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏ —à—É–º–µ!

3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–û–†–û–ì:
   - –î–ª—è CNN: –∫—Ä–∏—Ç–∏—á–µ–Ω —à—É–º >5%
   - –î–ª—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö: –∫—Ä–∏—Ç–∏—á–µ–Ω —à—É–º >0.5%!

üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:

‚úÖ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï CNN (1D Alexnet) –ö–û–ì–î–ê:
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ >15
   - –û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —à—É–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
   - –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
   - –î–æ—Å—Ç—É–ø–Ω—ã –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –¢–†–ê–î–ò–¶–ò–û–ù–ù–´–ï –ê–õ–ì–û–†–ò–¢–ú–´ –ö–û–ì–î–ê:
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ >15 –ò –µ—Å—Ç—å —à—É–º
   - Random Forest, Extra Trees, SVM - –≤—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–ª–ª–∞–ø—Å
   - –î–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—É–º (1%) —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û –°:
   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ —à—É–º–∞
   - –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
   - –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –º–∞–ª–æ–≥–æ –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤

üî¨ –ù–ê–£–ß–ù–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨:

–≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –º–∞—Å—à—Ç–∞–±–∞:
—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ú–û —Ç–µ—Ä—è—é—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É –ø—Ä–∏ —Ä–æ—Å—Ç–µ
–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–æ–≤, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ CNN —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.

–î–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–º–µ–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è:
- –í—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤ –∑–∞–¥–∞—á–∞—Ö –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –ü–æ–Ω–∏–º–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ú–û
- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö

üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:

1D ALEXNET - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ñ–ò–ó–ù–ï–°–ü–û–°–û–ë–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú 
–¥–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–µ–∫—Ç—Ä–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —à—É–º–∞!

================================================================
üìÅ –§–∞–π–ª—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞:
   - final_algorithms_comparison_{timestamp}.png
   - key_insights_report_{timestamp}.txt
   - alexnet_20_noise_confusion_matrices_*.png
   - alexnet_20_accuracy_degradation_*.png
================================================================
    """
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    return filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ" * 40)
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê")
    print("üöÄ" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    comparison_file = create_ultimate_comparison()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_file = create_key_insights_report()
    
    print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–û–ó–î–ê–ù!")
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {comparison_file}")
    print(f"üìã –û—Ç—á–µ—Ç: {report_file}")
    print(f"\nüèÜ –ì–õ–ê–í–ù–´–ô –í–´–í–û–î: 1D ALEXNET –ü–û–ë–ï–ñ–î–ê–ï–¢! üèÜ")
    print(f"   CNN –≤ 15 —Ä–∞–∑ —É—Å—Ç–æ–π—á–∏–≤–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–∏ —à—É–º–µ!")

if __name__ == "__main__":
    main() 