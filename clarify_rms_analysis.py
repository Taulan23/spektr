#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó RMS –ò STD
–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –∏ RMS
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

def detailed_rms_analysis():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ RMS –∏ std –¥–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞"""
    
    print("=================================================================================")
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó RMS –ò STD")
    print("=================================================================================")
    print("üìã –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –∏ RMS")
    print("=================================================================================")
    
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    n_samples = 100000
    noise_levels = [0.01, 0.05, 0.10, 0.20]
    
    print("üìä –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –û–°–ù–û–í–´:")
    print("="*60)
    print("1Ô∏è‚É£ –ì–ê–£–°–°–û–í –ë–ï–õ–´–ô –®–£–ú:")
    print("   ‚úÖ –ù–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç –º–µ–∂–¥—É –æ—Ç—Å—á–µ—Ç–∞–º–∏")
    print("   ‚úÖ Mean = 0 (–Ω—É–ª–µ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ)")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞")
    print("   ‚úÖ –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö)")
    
    print("\n2Ô∏è‚É£ –°–¢–ê–ù–î–ê–†–¢–ù–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï (STD):")
    print("   üìä std = ‚àö(mean((x - mean)¬≤))")
    print("   üìä –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: std = ‚àö(mean(x¬≤))")
    print("   üìä –≠—Ç–æ –º–µ—Ä–∞ —Ä–∞–∑–±—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ")
    
    print("\n3Ô∏è‚É£ ROOT MEAN SQUARE (RMS):")
    print("   üìä RMS = ‚àö(mean(x¬≤))")
    print("   üìä –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS = std")
    print("   üìä –≠—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    
    print("\n" + "="*80)
    print("üìà –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó")
    print("="*80)
    
    for noise_level in noise_levels:
        print(f"\nüîç –£–†–û–í–ï–ù–¨ –®–£–ú–ê: {noise_level*100}% ({noise_level})")
        print("-" * 60)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º
        noise = np.random.normal(0, noise_level, n_samples)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mean_val = np.mean(noise)
        std_val = np.std(noise)
        rms_val = np.sqrt(np.mean(noise**2))
        variance = np.var(noise)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ò –®–£–ú–ê:")
        print(f"   ‚Ä¢ Mean: {mean_val:.8f} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚âà 0)")
        print(f"   ‚Ä¢ Variance: {variance:.8f} (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚âà {noise_level**2:.6f})")
        print(f"   ‚Ä¢ Std: {std_val:.8f} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚âà {noise_level:.6f})")
        print(f"   ‚Ä¢ RMS: {rms_val:.8f} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚âà {noise_level:.6f})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        print(f"\nüìã –ü–†–û–í–ï–†–ö–ê –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–• –°–û–û–¢–ù–û–®–ï–ù–ò–ô:")
        print(f"   ‚Ä¢ std¬≤ ‚âà variance: {'‚úÖ' if abs(std_val**2 - variance) < 0.0001 else '‚ùå'}")
        print(f"   ‚Ä¢ RMS ‚âà std: {'‚úÖ' if abs(rms_val - std_val) < 0.0001 else '‚ùå'}")
        print(f"   ‚Ä¢ RMS¬≤ ‚âà variance: {'‚úÖ' if abs(rms_val**2 - variance) < 0.0001 else '‚ùå'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
        print(f"\nüìê –§–û–†–ú–£–õ–´:")
        print(f"   ‚Ä¢ std = ‚àö(mean((x - {mean_val:.6f})¬≤)) = {std_val:.6f}")
        print(f"   ‚Ä¢ RMS = ‚àö(mean(x¬≤)) = {rms_val:.6f}")
        print(f"   ‚Ä¢ variance = mean((x - {mean_val:.6f})¬≤) = {variance:.6f}")
        
        # –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0
        if abs(mean_val) < 0.001:
            print(f"\n‚úÖ –î–õ–Ø –ì–ê–£–°–°–û–í–ê –®–£–ú–ê –° MEAN‚âà0:")
            print(f"   ‚Ä¢ std = RMS = {std_val:.6f}")
            print(f"   ‚Ä¢ std¬≤ = RMS¬≤ = variance = {variance:.6f}")
    
    print("\n" + "="*80)
    print("‚ùì –û–¢–í–ï–¢ –ù–ê –í–ê–® –í–û–ü–†–û–°")
    print("="*80)
    
    print("\nüîç –í–ê–® –í–û–ü–†–û–°: 'RMS –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ—Ä–µ—Ç—Å—è'?")
    print("\nüìä –û–¢–í–ï–¢:")
    print("   ‚ùå –ù–ï–¢! RMS –Ω–µ –±–µ—Ä–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç")
    print("   üìä RMS = ‚àö(mean(x¬≤)) - —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞")
    print("   üìä –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS = std")
    print("   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (1%, 5%, 10%) - —ç—Ç–æ —É—Å–ª–æ–≤–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")
    
    print("\nüìã –ß–¢–û –û–ó–ù–ê–ß–ê–ï–¢ '1% –®–£–ú':")
    print("   üìä –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç std —à—É–º–∞ = 0.01")
    print("   üìä RMS —à—É–º–∞ = 0.01 (—Ç–∞–∫ –∫–∞–∫ mean=0)")
    print("   üìä –ü—Ä–æ—Ü–µ–Ω—Ç - —ç—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ std –¥–∞–Ω–Ω—ã—Ö")
    
    print("\nüìä –ü–†–ò–ú–ï–†:")
    print("   üìä –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç std=1 (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ):")
    print("   üìä '1% —à—É–º' –æ–∑–Ω–∞—á–∞–µ—Ç std_—à—É–º–∞ = 0.01 = 1% –æ—Ç std_–¥–∞–Ω–Ω—ã—Ö")
    print("   üìä RMS_—à—É–º–∞ = 0.01 = 1% –æ—Ç std_–¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_detailed_visualization()
    
    print("\n" + "="*80)
    print("‚úÖ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´")
    print("="*80)
    print("1. ‚úÖ –ì–∞—É—Å—Å–æ–≤ —à—É–º –∏–º–µ–µ—Ç mean=0 (–Ω—É–ª–µ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ)")
    print("2. ‚úÖ –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS = std")
    print("3. ‚úÖ RMS –Ω–µ –±–µ—Ä–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç - —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞")
    print("4. ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - —É—Å–ª–æ–≤–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è")
    print("5. ‚úÖ –ë–µ–ª—ã–π —à—É–º –Ω–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç –º–µ–∂–¥—É –æ—Ç—Å—á–µ—Ç–∞–º–∏")
    print("6. ‚úÖ –®—É–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–º—É –æ—Ç—Å—á–µ—Ç—É")
    print("="*80)

def create_detailed_visualization():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é RMS –∏ std"""
    
    print("\nüìä –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ô –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò...")
    
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    noise_levels = [0.01, 0.05, 0.10, 0.20]
    n_samples = 10000
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    axes = axes.flatten()
    
    for i, noise_level in enumerate(noise_levels):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º
        noise = np.random.normal(0, noise_level, n_samples)
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        axes[i].hist(noise, bins=50, alpha=0.7, color='red', edgecolor='black', density=True)
        
        # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è
        x = np.linspace(-4*noise_level, 4*noise_level, 1000)
        y = (1/(noise_level*np.sqrt(2*np.pi))) * np.exp(-0.5*((x-0)/noise_level)**2)
        axes[i].plot(x, y, 'b-', linewidth=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mean_actual = np.mean(noise)
        std_actual = np.std(noise)
        rms_actual = np.sqrt(np.mean(noise**2))
        variance_actual = np.var(noise)
        
        axes[i].set_title(f'–®—É–º {noise_level*100}% (std={noise_level:.3f})', fontsize=12, fontweight='bold')
        axes[i].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞')
        axes[i].set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
        axes[i].grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f'Mean: {mean_actual:.6f}\nStd: {std_actual:.6f}\nRMS: {rms_actual:.6f}\nVar: {variance_actual:.6f}'
        axes[i].text(0.02, 0.98, stats_text, transform=axes[i].transAxes, 
                    verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", 
                    facecolor="white", alpha=0.8), fontsize=9)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        axes[i].axvline(x=0, color='green', linestyle='--', alpha=0.7, label='Mean=0')
        axes[i].axvline(x=std_actual, color='orange', linestyle='--', alpha=0.7, label=f'Std={std_actual:.3f}')
        axes[i].axvline(x=-std_actual, color='orange', linestyle='--', alpha=0.7)
        axes[i].axvline(x=rms_actual, color='purple', linestyle=':', alpha=0.7, label=f'RMS={rms_actual:.3f}')
        axes[i].axvline(x=-rms_actual, color='purple', linestyle=':', alpha=0.7)
        
        axes[i].legend()
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    filename = 'detailed_rms_std_analysis.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    plt.show()

if __name__ == "__main__":
    detailed_rms_analysis() 