#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ê –ê–î–î–ò–¢–ò–í–ù–û–ì–û –®–£–ú–ê
–ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑–Ω—ã–π –ª–∏ —à—É–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import os
import glob
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

def load_sample_spectra():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ–∫—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à—É–º–∞"""
    
    print("üå± –ó–ê–ì–†–£–ó–ö–ê –û–ë–†–ê–ó–¶–û–í –°–ü–ï–ö–¢–†–û–í –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –®–£–ú–ê...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ–∫—Ç—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤
    sample_spectra = []
    sample_labels = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞–ø–∫–∏
    folders_to_check = [
        "–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 20 –≤–∏–¥–æ–≤/–±–µ—Ä–µ–∑–∞",
        "–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 7 –≤–∏–¥–æ–≤/–±–µ—Ä–µ–∑–∞", 
        "–±–µ—Ä–µ–∑–∞"
    ]
    
    for folder in folders_to_check:
        if os.path.exists(folder):
            files = glob.glob(os.path.join(folder, "*.xlsx"))
            if files:
                print(f"   üìÅ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –≤: {folder}")
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                for i, file in enumerate(files[:3]):
                    try:
                        df = pd.read_excel(file, header=None)
                        spectrum = df.iloc[:, 1].values  # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞
                        spectrum = spectrum[~pd.isna(spectrum)]  # –£–±–∏—Ä–∞–µ–º NaN
                        
                        if len(spectrum) > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
                            sample_spectra.append(spectrum)
                            sample_labels.append(f"–ë–µ—Ä–µ–∑–∞_{i+1}")
                            print(f"      ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–µ–∫—Ç—Ä {i+1}: {len(spectrum)} —Ç–æ—á–µ–∫")
                    except Exception as e:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file}: {e}")
                        continue
                break
    
    if not sample_spectra:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ–∫—Ç—Ä—ã!")
        return [], []
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sample_spectra)} –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–ø–µ–∫—Ç—Ä–æ–≤")
    return sample_spectra, sample_labels

def analyze_noise_characteristics(spectra, labels):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —à—É–º–∞"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö –®–£–ú–ê...")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–µ–∫—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    scaler = StandardScaler()
    normalized_spectra = []
    
    for spectrum in spectra:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ–∫—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
        normalized = scaler.fit_transform(spectrum.reshape(-1, 1)).flatten()
        normalized_spectra.append(normalized)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —à—É–º–∞
    noise_levels = [0.05, 0.10]  # 5%, 10%
    
    for noise_level in noise_levels:
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –®–£–ú–ê {noise_level*100}%:")
        
        for i, (spectrum, label) in enumerate(zip(normalized_spectra, labels)):
            print(f"\n   üå≥ {label}:")
            
            # –¢–∏–ø 1: –†–∞–∑–Ω—ã–π —à—É–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–∫–∞–∫ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ)
            noise_individual = np.random.normal(0, noise_level, spectrum.shape)
            spectrum_with_individual_noise = spectrum + noise_individual
            
            # –¢–∏–ø 2: –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º –¥–ª—è –≤—Å–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
            noise_uniform = np.random.normal(0, noise_level, 1)  # –û–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
            spectrum_with_uniform_noise = spectrum + noise_uniform
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
            print(f"      üìà –†–∞–∑–Ω—ã–π —à—É–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞:")
            print(f"         ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —à—É–º–∞: {np.std(noise_individual):.6f}")
            print(f"         ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —à—É–º–∞: [{np.min(noise_individual):.6f}, {np.max(noise_individual):.6f}]")
            print(f"         ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —à—É–º–∞: {np.mean(noise_individual):.6f}")
            
            print(f"      üìä –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º –¥–ª—è –≤—Å–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞:")
            print(f"         ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞: {noise_uniform[0]:.6f}")
            print(f"         ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: 0.000000")
            print(f"         ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: [{noise_uniform[0]:.6f}, {noise_uniform[0]:.6f}]")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–ø–µ–∫—Ç—Ä
            original_std = np.std(spectrum)
            individual_noise_std = np.std(spectrum_with_individual_noise)
            uniform_noise_std = np.std(spectrum_with_uniform_noise)
            
            print(f"      üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–ø–µ–∫—Ç—Ä:")
            print(f"         ‚Ä¢ –ò—Å—Ö–æ–¥–Ω–æ–µ std: {original_std:.6f}")
            print(f"         ‚Ä¢ –° —Ä–∞–∑–Ω—ã–º —à—É–º–æ–º: {individual_noise_std:.6f}")
            print(f"         ‚Ä¢ –° –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —à—É–º–æ–º: {uniform_noise_std:.6f}")
            
            # –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            individual_change = individual_noise_std - original_std
            uniform_change = uniform_noise_std - original_std
            
            print(f"      üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ std:")
            print(f"         ‚Ä¢ –†–∞–∑–Ω—ã–π —à—É–º: {individual_change:+.6f}")
            print(f"         ‚Ä¢ –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º: {uniform_change:+.6f}")

def create_noise_comparison_visualizations(spectra, labels):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —à—É–º–∞"""
    
    print("\nüìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô –°–†–ê–í–ù–ï–ù–ò–Ø –®–£–ú–ê...")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–µ–∫—Ç—Ä—ã
    scaler = StandardScaler()
    normalized_spectra = []
    
    for spectrum in spectra:
        normalized = scaler.fit_transform(spectrum.reshape(-1, 1)).flatten()
        normalized_spectra.append(normalized)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
    for i, (spectrum, label) in enumerate(zip(normalized_spectra, labels)):
        plt.figure(figsize=(16, 8))
        
        # –£—Ä–æ–≤–Ω–∏ —à—É–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        noise_levels = [0.05, 0.10]
        
        for j, noise_level in enumerate(noise_levels):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º—ã
            np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            noise_individual = np.random.normal(0, noise_level, spectrum.shape)
            noise_uniform = np.random.normal(0, noise_level, 1)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—É–º—ã
            spectrum_individual = spectrum + noise_individual
            spectrum_uniform = spectrum + noise_uniform
            
            # Subplot 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≤
            plt.subplot(2, 3, j*3 + 1)
            plt.plot(spectrum[:200], 'b-', linewidth=1, alpha=0.7, label='–ò—Å—Ö–æ–¥–Ω—ã–π')
            plt.plot(spectrum_individual[:200], 'r-', linewidth=1, alpha=0.7, label='–†–∞–∑–Ω—ã–π —à—É–º')
            plt.plot(spectrum_uniform[:200], 'g-', linewidth=1, alpha=0.7, label='–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º')
            plt.title(f'{label}: –°–ø–µ–∫—Ç—Ä—ã ({noise_level*100}% —à—É–º–∞)', fontsize=12, fontweight='bold')
            plt.xlabel('–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª')
            plt.ylabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            # Subplot 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à—É–º–∞ (—Ä–∞–∑–Ω—ã–π)
            plt.subplot(2, 3, j*3 + 2)
            plt.hist(noise_individual, bins=50, alpha=0.7, color='red', edgecolor='black')
            plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–≥–æ —à—É–º–∞ ({noise_level*100}%)', fontsize=12, fontweight='bold')
            plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞')
            plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            plt.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            plt.text(0.02, 0.98, f'std: {np.std(noise_individual):.4f}\nmean: {np.mean(noise_individual):.4f}', 
                    transform=plt.gca().transAxes, verticalalignment='top',
                    bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
            
            # Subplot 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à—É–º–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)
            plt.subplot(2, 3, j*3 + 3)
            plt.axvline(x=noise_uniform[0], color='green', linewidth=3, label=f'–®—É–º: {noise_uniform[0]:.4f}')
            plt.title(f'–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º ({noise_level*100}%)', fontsize=12, fontweight='bold')
            plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞')
            plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            plt.legend()
            plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f'noise_character_analysis_{label}_{timestamp}.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        plt.show()

def create_noise_impact_analysis(spectra, labels):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —à—É–º–∞ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–ø–µ–∫—Ç—Ä–æ–≤"""
    
    print("\nüìà –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –®–£–ú–ê –ù–ê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –°–ü–ï–ö–¢–†–û–í...")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–µ–∫—Ç—Ä—ã
    scaler = StandardScaler()
    normalized_spectra = []
    
    for spectrum in spectra:
        normalized = scaler.fit_transform(spectrum.reshape(-1, 1)).flatten()
        normalized_spectra.append(normalized)
    
    # –£—Ä–æ–≤–Ω–∏ —à—É–º–∞
    noise_levels = [0.0, 0.01, 0.05, 0.10]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    results = {
        'individual_noise': {'std': [], 'mean': [], 'range': []},
        'uniform_noise': {'std': [], 'mean': [], 'range': []}
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–µ–∫—Ç—Ä –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    spectrum = normalized_spectra[0]
    
    for noise_level in noise_levels:
        if noise_level == 0:
            # –ë–µ–∑ —à—É–º–∞
            results['individual_noise']['std'].append(np.std(spectrum))
            results['individual_noise']['mean'].append(np.mean(spectrum))
            results['individual_noise']['range'].append(np.ptp(spectrum))
            
            results['uniform_noise']['std'].append(np.std(spectrum))
            results['uniform_noise']['mean'].append(np.mean(spectrum))
            results['uniform_noise']['range'].append(np.ptp(spectrum))
        else:
            # –° —à—É–º–æ–º
            np.random.seed(42)
            noise_individual = np.random.normal(0, noise_level, spectrum.shape)
            noise_uniform = np.random.normal(0, noise_level, 1)
            
            spectrum_individual = spectrum + noise_individual
            spectrum_uniform = spectrum + noise_uniform
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ —à—É–º–∞
            results['individual_noise']['std'].append(np.std(spectrum_individual))
            results['individual_noise']['mean'].append(np.mean(spectrum_individual))
            results['individual_noise']['range'].append(np.ptp(spectrum_individual))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —à—É–º–∞
            results['uniform_noise']['std'].append(np.std(spectrum_uniform))
            results['uniform_noise']['mean'].append(np.mean(spectrum_uniform))
            results['uniform_noise']['range'].append(np.ptp(spectrum_uniform))
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    plt.figure(figsize=(20, 15))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    plt.subplot(2, 3, 1)
    plt.plot(noise_levels, results['individual_noise']['std'], 'ro-', linewidth=2, markersize=8, label='–†–∞–∑–Ω—ã–π —à—É–º')
    plt.plot(noise_levels, results['uniform_noise']['std'], 'bo-', linewidth=2, markersize=8, label='–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º')
    plt.title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞')
    plt.ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    plt.subplot(2, 3, 2)
    plt.plot(noise_levels, results['individual_noise']['mean'], 'ro-', linewidth=2, markersize=8, label='–†–∞–∑–Ω—ã–π —à—É–º')
    plt.plot(noise_levels, results['uniform_noise']['mean'], 'bo-', linewidth=2, markersize=8, label='–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º')
    plt.title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞')
    plt.ylabel('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –î–∏–∞–ø–∞–∑–æ–Ω
    plt.subplot(2, 3, 3)
    plt.plot(noise_levels, results['individual_noise']['range'], 'ro-', linewidth=2, markersize=8, label='–†–∞–∑–Ω—ã–π —à—É–º')
    plt.plot(noise_levels, results['uniform_noise']['range'], 'bo-', linewidth=2, markersize=8, label='–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º')
    plt.title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞')
    plt.ylabel('–î–∏–∞–ø–∞–∑–æ–Ω (max-min)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ std
    plt.subplot(2, 3, 4)
    original_std = results['individual_noise']['std'][0]
    individual_change = [(std - original_std) / original_std * 100 for std in results['individual_noise']['std']]
    uniform_change = [(std - original_std) / original_std * 100 for std in results['uniform_noise']['std']]
    
    plt.plot(noise_levels, individual_change, 'ro-', linewidth=2, markersize=8, label='–†–∞–∑–Ω—ã–π —à—É–º')
    plt.plot(noise_levels, uniform_change, 'bo-', linewidth=2, markersize=8, label='–û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º')
    plt.title('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ std (%)', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞')
    plt.ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ std (%)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: –†–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ —à—É–º–∞
    plt.subplot(2, 3, 5)
    std_diff = [ind - uni for ind, uni in zip(results['individual_noise']['std'], results['uniform_noise']['std'])]
    plt.plot(noise_levels, std_diff, 'go-', linewidth=2, markersize=8)
    plt.title('–†–∞–∑–Ω–æ—Å—Ç—å std (—Ä–∞–∑–Ω—ã–π - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞')
    plt.ylabel('–†–∞–∑–Ω–æ—Å—Ç—å std')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    plt.subplot(2, 3, 6)
    plt.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = f"""
    üìä –°–†–ê–í–ù–ï–ù–ò–ï –¢–ò–ü–û–í –®–£–ú–ê
    
    üéØ –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:
    
    üìà –†–∞–∑–Ω—ã–π —à—É–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞:
       ‚Ä¢ –ö–∞–∂–¥—ã–π —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
       ‚Ä¢ –®—É–º ~ N(0, œÉ) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
       ‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é —Å–ø–µ–∫—Ç—Ä–∞
       ‚Ä¢ –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
    
    üìä –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º –¥–ª—è –≤—Å–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞:
       ‚Ä¢ –û–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º—É —Å–ø–µ–∫—Ç—Ä—É
       ‚Ä¢ –®—É–º ~ N(0, œÉ) –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
       ‚Ä¢ –°–¥–≤–∏–≥–∞–µ—Ç —Å–ø–µ–∫—Ç—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
       ‚Ä¢ –ú–µ–Ω–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    üìâ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é:
       ‚Ä¢ –†–∞–∑–Ω—ã–π —à—É–º: —Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
       ‚Ä¢ –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º: –ø—Ä–æ—â–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
       ‚Ä¢ –ù–∞—à –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ê–ó–ù–´–ô —à—É–º (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)
    """
    
    plt.text(0.1, 0.9, stats_text, transform=plt.gca().transAxes, fontsize=10,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray", alpha=0.8))
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'noise_impact_comparison_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    plt.show()

def save_noise_analysis_report(spectra, labels):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ —à—É–º–∞"""
    
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ß–ï–¢–ê –û–ë –ê–ù–ê–õ–ò–ó–ï –®–£–ú–ê...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = f'noise_character_analysis_report_{timestamp}.txt'
    
    with open(report_filename, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write("–û–¢–ß–ï–¢ –û–ë –ê–ù–ê–õ–ò–ó–ï –•–ê–†–ê–ö–¢–ï–†–ê –ê–î–î–ò–¢–ò–í–ù–û–ì–û –®–£–ú–ê\n")
        f.write("="*80 + "\n\n")
        
        f.write("üéØ –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–° –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–Ø:\n\n")
        
        f.write("‚ùì –í–æ–ø—Ä–æ—Å: –°–ª—É—á–∞–π–Ω—ã–π —à—É–º –∞–¥–¥–∏—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è—é—â–∏–π—Å—è –∫ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–º—É –æ—Ç—Å—á–µ—Ç—É:\n")
        f.write("   - –æ–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∏ —Ä–∞–∑–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–æ–¥–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞)\n")
        f.write("   - –∏–ª–∏ –æ–Ω —Å–ª—É—á–∞–π–Ω—ã–π, –Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ (–æ–¥–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞)?\n\n")
        
        f.write("‚úÖ –û–¢–í–ï–¢: –í –ù–ê–®–ï–ú –ö–û–î–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –†–ê–ó–ù–´–ô –®–£–ú –î–õ–Ø –ö–ê–ñ–î–û–ì–û –û–¢–°–ß–ï–¢–ê!\n\n")
        
        f.write("üìã –î–ï–¢–ê–õ–¨–ù–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï:\n\n")
        
        f.write("1Ô∏è‚É£ –†–ê–ó–ù–´–ô –®–£–ú –î–õ–Ø –ö–ê–ñ–î–û–ì–û –û–¢–°–ß–ï–¢–ê (–Ω–∞—à –∫–æ–¥):\n")
        f.write("   ‚Ä¢ –ö–∞–∂–¥—ã–π —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º\n")
        f.write("   ‚Ä¢ –®—É–º ~ N(0, œÉ) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n")
        f.write("   ‚Ä¢ –≠—Ç–æ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π\n")
        f.write("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é —Å–ø–µ–∫—Ç—Ä–∞ –∏ —É—Å–ª–æ–∂–Ω—è–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n")
        
        f.write("2Ô∏è‚É£ –û–î–ò–ù–ê–ö–û–í–´–ô –®–£–ú –î–õ–Ø –í–°–ï–ì–û –°–ü–ï–ö–¢–†–ê:\n")
        f.write("   ‚Ä¢ –û–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º—É —Å–ø–µ–∫—Ç—Ä—É\n")
        f.write("   ‚Ä¢ –®—É–º ~ N(0, œÉ) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º\n")
        f.write("   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Å–¥–≤–∏–≥–∞–µ—Ç —Å–ø–µ–∫—Ç—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Ñ–æ—Ä–º—ã\n")
        f.write("   ‚Ä¢ –ú–µ–Ω–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n")
        
        f.write("üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í –ù–ê–®–ï–ú –ö–û–î–ï:\n")
        f.write("   ```python\n")
        f.write("   # –†–ê–ó–ù–´–ô –®–£–ú (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)\n")
        f.write("   noise = np.random.normal(0, noise_level, X.shape)\n")
        f.write("   X_noisy = X + noise\n")
        f.write("   ```\n\n")
        
        f.write("   vs\n\n")
        
        f.write("   ```python\n")
        f.write("   # –û–î–ò–ù–ê–ö–û–í–´–ô –®–£–ú (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è —Å–ø–µ–∫—Ç—Ä–æ–≤)\n")
        f.write("   noise = np.random.normal(0, noise_level, 1)\n")
        f.write("   X_noisy = X + noise\n")
        f.write("   ```\n\n")
        
        f.write("üìä –í–õ–ò–Ø–ù–ò–ï –ù–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Æ:\n")
        f.write("   ‚Ä¢ –†–∞–∑–Ω—ã–π —à—É–º: –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π\n")
        f.write("   ‚Ä¢ –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —à—É–º: –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞\n")
        f.write("   ‚Ä¢ –ù–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º —à—É–º–æ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã\n\n")
        
        f.write("üéØ –í–´–í–û–î:\n")
        f.write("   –ù–∞—à –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ê–ó–ù–´–ô —à—É–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞,\n")
        f.write("   —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n")
        f.write("   –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º–∏ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏.\n\n")
        
        f.write("="*80 + "\n")
        f.write("–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "\n")
        f.write("="*80 + "\n")
    
    print(f"   üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("="*80)
    print("üîç –ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ê –ê–î–î–ò–¢–ò–í–ù–û–ì–û –®–£–ú–ê")
    print("="*80)
    print("üìã –ü–æ –∑–∞–ø—Ä–æ—Å—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–ø–µ–∫—Ç—Ä–æ–≤
    spectra, labels = load_sample_spectra()
    
    if len(spectra) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ–∫—Ç—Ä—ã!")
        return
    
    # –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —à—É–º–∞
    analyze_noise_characteristics(spectra, labels)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    create_noise_comparison_visualizations(spectra, labels)
    create_noise_impact_analysis(spectra, labels)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    save_noise_analysis_report(spectra, labels)
    
    print("\n" + "="*80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –•–ê–†–ê–ö–¢–ï–†–ê –®–£–ú–ê –ó–ê–í–ï–†–®–ï–ù!")
    print("üéØ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ç–æ–≤")
    print("üìä –í—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    print("="*80)

if __name__ == "__main__":
    main() 