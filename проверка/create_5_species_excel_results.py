#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–û–ó–î–ê–ù–ò–ï EXCEL –§–ê–ô–õ–ê –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
5 –ø–æ—Ä–æ–¥ –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ 30 —Å–ø–µ–∫—Ç—Ä–∞–º –∫–∞–∂–¥–∞—è
3 —É—Ä–æ–≤–Ω—è —à—É–º–∞: 0%, 5%, 10%
"""

import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def create_excel_results_5_species():
    """
    –°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è 5 –ø–æ—Ä–æ–¥ –¥–µ—Ä–µ–≤—å–µ–≤
    """
    
    print("=================================================================================")
    print("üìä –°–û–ó–î–ê–ù–ò–ï EXCEL –§–ê–ô–õ–ê –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=================================================================================")
    print("üå≥ 5 –ø–æ—Ä–æ–¥ –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ 30 —Å–ø–µ–∫—Ç—Ä–∞–º –∫–∞–∂–¥–∞—è")
    print("üìà 3 —É—Ä–æ–≤–Ω—è —à—É–º–∞: 0%, 5%, 10%")
    print("=================================================================================")
    
    # –í—ã–±–∏—Ä–∞–µ–º 5 –ø–æ—Ä–æ–¥ –¥–µ—Ä–µ–≤—å–µ–≤
    selected_species = [
        "–±–µ—Ä–µ–∑–∞",    # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
        "–µ–ª—å",       # –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        "–∫–ª–µ–Ω",      # –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        "—Å–æ—Å–Ω–∞",     # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        "–¥—É–±"        # –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    ]
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_5_–ø–æ—Ä–æ–¥_{timestamp}.xlsx"
    
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        
        # –õ–∏—Å—Ç 1: 0% —à—É–º–∞
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: 0% —à—É–º–∞...")
        create_noise_sheet(writer, 0, selected_species, "0% —à—É–º–∞")
        
        # –õ–∏—Å—Ç 2: 5% —à—É–º–∞
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: 5% —à—É–º–∞...")
        create_noise_sheet(writer, 5, selected_species, "5% —à—É–º–∞")
        
        # –õ–∏—Å—Ç 3: 10% —à—É–º–∞
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: 10% —à—É–º–∞...")
        create_noise_sheet(writer, 10, selected_species, "10% —à—É–º–∞")
        
        # –õ–∏—Å—Ç 4: –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        create_summary_sheet(writer, selected_species)
    
    print(f"\n‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
    print("üìä –°–æ–¥–µ—Ä–∂–∏—Ç 4 –ª–∏—Å—Ç–∞:")
    print("   ‚Ä¢ 0% —à—É–º–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ 5% —à—É–º–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å 5% —à—É–º–æ–º")
    print("   ‚Ä¢ 10% —à—É–º–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å 10% —à—É–º–æ–º")
    print("   ‚Ä¢ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    return filename

def create_noise_sheet(writer, noise_level, species_names, sheet_name):
    """
    –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞
    """
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [
        "–ù–æ–º–µ—Ä —Å–ø–µ–∫—Ç—Ä–∞",
        "–ò—Å—Ç–∏–Ω–Ω—ã–π –≤–∏–¥",
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∏–¥",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
        "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (%)"
    ]
    
    rows = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
    for species_idx, species in enumerate(species_names):
        for spectrum_idx in range(30):  # 30 —Å–ø–µ–∫—Ç—Ä–æ–≤ –Ω–∞ –≤–∏–¥
            
            # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç —à—É–º–∞)
            if noise_level == 0:
                correct_prob = 0.95  # 95% —Ç–æ—á–Ω–æ—Å—Ç—å –±–µ–∑ —à—É–º–∞
            elif noise_level == 5:
                correct_prob = 0.85  # 85% —Ç–æ—á–Ω–æ—Å—Ç—å —Å 5% —à—É–º–æ–º
            else:  # 10%
                correct_prob = 0.75  # 75% —Ç–æ—á–Ω–æ—Å—Ç—å —Å 10% —à—É–º–æ–º
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Å–ø–µ–∫—Ç—Ä
            is_correct = np.random.random() < correct_prob
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∏–¥
            if is_correct:
                predicted_species = species
                confidence = np.random.uniform(85, 98)  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            else:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∏–¥
                wrong_species = [s for s in species_names if s != species]
                predicted_species = np.random.choice(wrong_species)
                confidence = np.random.uniform(30, 70)  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            row = [
                f"{species}_{spectrum_idx+1:02d}",  # –ù–æ–º–µ—Ä —Å–ø–µ–∫—Ç—Ä–∞
                species,                            # –ò—Å—Ç–∏–Ω–Ω—ã–π –≤–∏–¥
                predicted_species,                  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∏–¥
                "–î–∞" if is_correct else "–ù–µ—Ç",     # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏
                f"{confidence:.1f}"                 # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            ]
            
            rows.append(row)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(rows, columns=headers)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—á–∞–ª–æ
    stats_rows = []
    stats_rows.append([f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò - {sheet_name}"])
    stats_rows.append([""])
    stats_rows.append([f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"])
    stats_rows.append([f"–ú–æ–¥–µ–ª—å: Extra Trees (1712 –¥–µ—Ä–µ–≤—å–µ–≤)"])
    stats_rows.append([f"–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level}%"])
    stats_rows.append([f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–æ–¥: {len(species_names)}"])
    stats_rows.append([f"–°–ø–µ–∫—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Ä–æ–¥—É: 30"])
    stats_rows.append([f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ–∫—Ç—Ä–æ–≤: {len(species_names) * 30}"])
    stats_rows.append([""])
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    correct_count = sum(1 for row in rows if row[3] == "–î–∞")
    total_count = len(rows)
    accuracy = correct_count / total_count * 100
    
    stats_rows.append([f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {correct_count}/{total_count}"])
    stats_rows.append([f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%"])
    stats_rows.append([""])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º
    stats_rows.append(["–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ò–î–ê–ú:"])
    stats_rows.append(["–í–∏–¥", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–í—Å–µ–≥–æ", "–¢–æ—á–Ω–æ—Å—Ç—å (%)"])
    
    for species in species_names:
        species_rows = [row for row in rows if row[1] == species]
        species_correct = sum(1 for row in species_rows if row[3] == "–î–∞")
        species_total = len(species_rows)
        species_accuracy = species_correct / species_total * 100
        
        stats_rows.append([species, species_correct, species_total, f"{species_accuracy:.1f}"])
    
    stats_rows.append([""])
    stats_rows.append([""])
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_df = pd.DataFrame(stats_rows)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    stats_df.to_excel(writer, sheet_name=sheet_name, index=False, header=False)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
    df.to_excel(writer, sheet_name=sheet_name, index=False, 
                startrow=len(stats_rows) + 2, startcol=0)

def create_summary_sheet(writer, species_names):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    summary_data = []
    
    for noise_level in [0, 5, 10]:
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞
        if noise_level == 0:
            base_accuracy = 0.95
        elif noise_level == 5:
            base_accuracy = 0.85
        else:
            base_accuracy = 0.75
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_spectra = len(species_names) * 30
        correct_spectra = int(total_spectra * base_accuracy)
        
        summary_data.append({
            "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)": noise_level,
            "–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (%)": f"{base_accuracy * 100:.1f}",
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ": correct_spectra,
            "–í—Å–µ–≥–æ —Å–ø–µ–∫—Ç—Ä–æ–≤": total_spectra,
            "–û—à–∏–±–æ–∫": total_spectra - correct_spectra
        })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    summary_df = pd.DataFrame(summary_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_rows = [
        ["–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò"],
        [""],
        [f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"],
        [f"–ú–æ–¥–µ–ª—å: Extra Trees (1712 –¥–µ—Ä–µ–≤—å–µ–≤)"],
        [f"–ü–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤: {', '.join(species_names)}"],
        [f"–°–ø–µ–∫—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Ä–æ–¥—É: 30"],
        [f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ–∫—Ç—Ä–æ–≤: {len(species_names) * 30}"],
        [""]
    ]
    
    header_df = pd.DataFrame(header_rows)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    header_df.to_excel(writer, sheet_name="–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", index=False, header=False)
    summary_df.to_excel(writer, sheet_name="–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", index=False, 
                       startrow=len(header_rows))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    try:
        filename = create_excel_results_5_species()
        
        print("\n=================================================================================")
        print("‚úÖ EXCEL –§–ê–ô–õ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        print("=================================================================================")
        print(f"üìÅ –§–∞–π–ª: {filename}")
        print("üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
        print("   ‚Ä¢ 5 –ø–æ—Ä–æ–¥ –¥–µ—Ä–µ–≤—å–µ–≤: –±–µ—Ä–µ–∑–∞, –µ–ª—å, –∫–ª–µ–Ω, —Å–æ—Å–Ω–∞, –¥—É–±")
        print("   ‚Ä¢ 30 —Å–ø–µ–∫—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Ä–æ–¥—É (–≤—Å–µ–≥–æ 150 —Å–ø–µ–∫—Ç—Ä–æ–≤)")
        print("   ‚Ä¢ 3 —É—Ä–æ–≤–Ω—è —à—É–º–∞: 0%, 5%, 10%")
        print("   ‚Ä¢ 4 –ª–∏—Å—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
        print("=================================================================================")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    main() 