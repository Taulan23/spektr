#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: 1D ALEXNET –î–õ–Ø 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í
–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

def create_20_species_showcase():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π 1D Alexnet –Ω–∞ 20 –≤–∏–¥–∞—Ö"""
    
    print("üå≤" * 30)
    print("üå≤ 1D ALEXNET - 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í")
    print("üå≤" * 30)
    
    # –î–∞–Ω–Ω—ã–µ 20 –≤–∏–¥–æ–≤
    species_names = [
        '–ë–µ—Ä–µ–∑–∞', '–î—É–±', '–ï–ª—å', '–ï–ª—å –≥–æ–ª—É–±–∞—è', '–ò–≤–∞', '–ö–∞—à—Ç–∞–Ω', '–ö–ª–µ–Ω', '–ö–ª–µ–Ω –∞–º',
        '–õ–∏–ø–∞', '–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–û—Ä–µ—Ö', '–û—Å–∏–Ω–∞', '–†—è–±–∏–Ω–∞', '–°–∏—Ä–µ–Ω—å', '–°–æ—Å–Ω–∞',
        '–¢–æ–ø–æ–ª—å –±–∞–ª—å–∑.', '–¢–æ–ø–æ–ª—å —á–µ—Ä–Ω—ã–π', '–¢—É—è', '–ß–µ—Ä–µ–º—É—Ö–∞', '–Ø—Å–µ–Ω—å'
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º —à—É–º–∞
    noise_results = {
        '0% —à—É–º–∞': 99.3,
        '1% —à—É–º–∞': 97.2,
        '5% —à—É–º–∞': 64.8,
        '10% —à—É–º–∞': 33.7,
        '20% —à—É–º–∞': 12.3
    }
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∏–¥–∞–º (F1-score –±–µ–∑ —à—É–º–∞)
    species_f1_scores = [
        1.000, 0.984, 1.000, 1.000, 0.966, 1.000, 1.000, 1.000, 1.000, 1.000,
        1.000, 0.952, 0.983, 1.000, 1.000, 1.000, 1.000, 1.000, 0.983, 1.000
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–≥–∞-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    fig = plt.figure(figsize=(20, 16))
    
    # 1. –ì–ª–∞–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É
    ax1 = plt.subplot(2, 3, (1, 2))
    
    noise_levels = [0, 1, 5, 10, 20]
    accuracies = [noise_results[f'{noise}% —à—É–º–∞'] for noise in noise_levels]
    
    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    colors = ['green' if acc > 90 else 'orange' if acc > 50 else 'red' for acc in accuracies]
    
    bars = ax1.bar(noise_levels, accuracies, color=colors, alpha=0.8, width=0.8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, acc in zip(bars, accuracies):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                f'{acc}%', ha='center', va='bottom', fontweight='bold', fontsize=12)
    
    ax1.set_title('üöÄ 1D ALEXNET: –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ö –®–£–ú–£ (20 –í–ò–î–û–í)', 
                  fontsize=18, fontweight='bold', pad=20)
    ax1.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=14)
    ax1.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)', fontsize=14)
    ax1.set_ylim(0, 105)
    ax1.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã
    ax1.axhspan(90, 100, alpha=0.2, color='green', label='–û—Ç–ª–∏—á–Ω–æ (>90%)')
    ax1.axhspan(50, 90, alpha=0.2, color='orange', label='–ü—Ä–∏–µ–º–ª–µ–º–æ (50-90%)')
    ax1.axhspan(0, 50, alpha=0.2, color='red', label='–ö—Ä–∏—Ç–∏—á–Ω–æ (<50%)')
    ax1.legend(loc='upper right')
    
    # 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –≤–∏–¥–∞–º
    ax2 = plt.subplot(2, 3, 3)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ F1-score
    perfect_count = sum(1 for score in species_f1_scores if score >= 0.99)
    excellent_count = sum(1 for score in species_f1_scores if 0.95 <= score < 0.99)
    good_count = sum(1 for score in species_f1_scores if score < 0.95)
    
    labels = [f'–ò–¥–µ–∞–ª—å–Ω–æ\n(F1‚â•0.99)\n{perfect_count} –≤–∏–¥–æ–≤', 
              f'–û—Ç–ª–∏—á–Ω–æ\n(0.95‚â§F1<0.99)\n{excellent_count} –≤–∏–¥–æ–≤',
              f'–•–æ—Ä–æ—à–æ\n(F1<0.95)\n{good_count} –≤–∏–¥–æ–≤']
    sizes = [perfect_count, excellent_count, good_count]
    colors_pie = ['gold', 'lightgreen', 'lightcoral']
    explode = (0.1, 0, 0)
    
    if good_count > 0:
        ax2.pie(sizes, explode=explode, labels=labels, colors=colors_pie, autopct='%1.0f%%',
                shadow=True, startangle=90, textprops={'fontsize': 10, 'fontweight': 'bold'})
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç "—Ö–æ—Ä–æ—à–∏—Ö", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã–µ –∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ
        sizes = sizes[:2]
        labels = labels[:2]
        colors_pie = colors_pie[:2]
        explode = (0.1, 0)
        ax2.pie(sizes, explode=explode, labels=labels, colors=colors_pie, autopct='%1.0f%%',
                shadow=True, startangle=90, textprops={'fontsize': 10, 'fontweight': 'bold'})
    
    ax2.set_title('üéØ –ö–ê–ß–ï–°–¢–í–û –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò\n–ü–û –í–ò–î–ê–ú', fontsize=14, fontweight='bold')
    
    # 3. Heatmap —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∏–¥–∞–º
    ax3 = plt.subplot(2, 3, 4)
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (F1-scores –ø–æ –≤–∏–¥–∞–º)
    f1_matrix = np.array(species_f1_scores).reshape(4, 5)  # 4x5 –¥–ª—è 20 –≤–∏–¥–æ–≤
    species_grid = np.array(species_names).reshape(4, 5)
    
    im = ax3.imshow(f1_matrix, cmap='RdYlGn', vmin=0.9, vmax=1.0, aspect='auto')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–æ–≤
    for i in range(4):
        for j in range(5):
            text = ax3.text(j, i, f'{species_grid[i, j]}\n{f1_matrix[i, j]:.3f}',
                           ha="center", va="center", fontweight='bold', fontsize=8)
    
    ax3.set_title('üåø F1-SCORE –ü–û –í–ò–î–ê–ú', fontsize=14, fontweight='bold')
    ax3.set_xticks([])
    ax3.set_yticks([])
    
    # Colorbar
    cbar = plt.colorbar(im, ax=ax3, shrink=0.8)
    cbar.set_label('F1-Score', fontsize=10)
    
    # 4. –ì—Ä–∞—Ñ–∏–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    ax4 = plt.subplot(2, 3, 5)
    
    plt.plot(noise_levels, accuracies, 'ro-', linewidth=4, markersize=10, 
             markerfacecolor='red', markeredgecolor='darkred', markeredgewidth=2)
    
    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
    plt.annotate('–°–¢–ê–†–¢\n99.3%', (0, 99.3), xytext=(1, 85), fontsize=11, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='green'), color='green')
    plt.annotate('–°–¢–ê–ë–ò–õ–¨–ù–û\n97.2%', (1, 97.2), xytext=(2, 80), fontsize=11, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='blue'), color='blue')
    plt.annotate('–ü–ê–î–ï–ù–ò–ï\n64.8%', (5, 64.8), xytext=(7, 75), fontsize=11, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='orange'), color='orange')
    plt.annotate('–ö–†–ò–¢–ò–ß–ù–û\n33.7%', (10, 33.7), xytext=(12, 45), fontsize=11, fontweight='bold',
                arrowprops=dict(arrowstyle='->', color='red'), color='red')
    
    plt.title('üìâ –î–ï–ì–†–ê–î–ê–¶–ò–Ø –û–¢ –®–£–ú–ê', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)', fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 105)
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    ax5 = plt.subplot(2, 3, 6)
    ax5.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievements_text = f"""
üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø 1D ALEXNET

üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –í–∏–¥–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è: 20
‚Ä¢ –û–±—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: 3000
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 99.3%
‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: 49.6 –º–∏–Ω

üéØ –ö–ê–ß–ï–°–¢–í–û –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:
‚Ä¢ –ò–¥–µ–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã (F1‚â•0.99): {perfect_count}
‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã (F1‚â•0.95): {excellent_count}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π F1-score: {np.mean(species_f1_scores):.3f}

üõ°Ô∏è –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ö –®–£–ú–£:
‚Ä¢ –ü—Ä–∏ 1% —à—É–º–∞: 97.2% (–ø–æ—Ç–µ—Ä—è 2.1%)
‚Ä¢ –ü—Ä–∏ 5% —à—É–º–∞: 64.8% (–ø–æ—Ç–µ—Ä—è 34.7%)
‚Ä¢ –ü—Ä–∏ 10% —à—É–º–∞: 33.7% (–ø–æ—Ç–µ—Ä—è 66.0%)

üî¨ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò:
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 1D CNN + 3 –≤–µ—Ç–∫–∏
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ~480MB –º–æ–¥–µ–ª—å
‚Ä¢ –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: 90 (early stop)
‚Ä¢ –õ—É—á—à–∞—è val_accuracy: 99.33%

‚≠ê –°–¢–ê–¢–£–°: –£–°–ü–ï–•!
    """
    
    ax5.text(0.05, 0.95, achievements_text, transform=ax5.transAxes, fontsize=11,
             verticalalignment='top', fontfamily='monospace',
             bbox=dict(boxstyle="round,pad=0.5", facecolor="lightblue", alpha=0.8))
    
    # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('üå≤ 1D ALEXNET: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í üå≤\n' + 
                 '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —Ä–∞–∑—É–º–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∫ —à—É–º—É',
                 fontsize=20, fontweight='bold', y=0.98)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'alexnet_20_species_showcase_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    return filename

def create_species_performance_report():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–æ–≤"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'alexnet_20_species_performance_{timestamp}.txt'
    
    species_details = [
        ('–ë–µ—Ä–µ–∑–∞', 1.000, 1.000, 1.000),
        ('–î—É–±', 0.968, 1.000, 0.984),
        ('–ï–ª—å', 1.000, 1.000, 1.000),
        ('–ï–ª—å –≥–æ–ª—É–±–∞—è', 1.000, 1.000, 1.000),
        ('–ò–≤–∞', 1.000, 0.933, 0.966),
        ('–ö–∞—à—Ç–∞–Ω', 1.000, 1.000, 1.000),
        ('–ö–ª–µ–Ω', 1.000, 1.000, 1.000),
        ('–ö–ª–µ–Ω –∞–º', 1.000, 1.000, 1.000),
        ('–õ–∏–ø–∞', 1.000, 1.000, 1.000),
        ('–õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', 1.000, 1.000, 1.000),
        ('–û—Ä–µ—Ö', 1.000, 1.000, 1.000),
        ('–û—Å–∏–Ω–∞', 0.909, 1.000, 0.952),
        ('–†—è–±–∏–Ω–∞', 1.000, 0.967, 0.983),
        ('–°–∏—Ä–µ–Ω—å', 1.000, 1.000, 1.000),
        ('–°–æ—Å–Ω–∞', 1.000, 1.000, 1.000),
        ('–¢–æ–ø–æ–ª—å –±–∞–ª—å–∑–∞–º–∏—á–µ—Å–∫–∏–π', 1.000, 1.000, 1.000),
        ('–¢–æ–ø–æ–ª—å —á–µ—Ä–Ω—ã–π', 1.000, 1.000, 1.000),
        ('–¢—É—è', 1.000, 1.000, 1.000),
        ('–ß–µ—Ä–µ–º—É—Ö–∞', 1.000, 0.967, 0.983),
        ('–Ø—Å–µ–Ω—å', 1.000, 1.000, 1.000)
    ]
    
    report_content = f"""
üå≤ –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: 1D ALEXNET –ù–ê 20 –í–ò–î–ê–• –î–ï–†–ï–í–¨–ï–í
================================================================

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üéØ –ú–æ–¥–µ–ª—å: 1D Alexnet —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ç–∫–∞–º–∏
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤: 20
üî¢ –û–±—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: 3000 (150 –Ω–∞ –≤–∏–¥)

üèÜ –û–ë–©–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
================================================================
‚úÖ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 99.3%
üéØ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: 2978.2 —Å–µ–∫—É–Ω–¥ (49.6 –º–∏–Ω—É—Ç)
üìà –õ—É—á—à–∞—è validation accuracy: 99.33% (—ç–ø–æ—Ö–∞ 75)
üîÑ –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: 90 (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω early stopping)
üíæ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: 480.6 MB

üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –í–ò–î–ê–ú:
================================================================
{'–í–∏–¥':25} | {'Precision':10} | {'Recall':10} | {'F1-Score':10} | {'–°—Ç–∞—Ç—É—Å':15}
{'-'*80}
"""
    
    for species, precision, recall, f1 in species_details:
        if f1 >= 0.99:
            status = "üü¢ –ò–î–ï–ê–õ–¨–ù–û"
        elif f1 >= 0.95:
            status = "üü° –û–¢–õ–ò–ß–ù–û"
        else:
            status = "üü† –•–û–†–û–®–û"
            
        report_content += f"{species:25} | {precision:10.3f} | {recall:10.3f} | {f1:10.3f} | {status:15}\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–∞–º
    perfect_species = [s[0] for s in species_details if s[3] >= 0.99]
    excellent_species = [s[0] for s in species_details if 0.95 <= s[3] < 0.99]
    good_species = [s[0] for s in species_details if s[3] < 0.95]
    
    report_content += f"""

üéØ –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:
================================================================

üü¢ –ò–î–ï–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø (F1 ‚â• 0.99): {len(perfect_species)} –≤–∏–¥–æ–≤
{chr(10).join([f"   ‚Ä¢ {species}" for species in perfect_species])}

üü° –û–¢–õ–ò–ß–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø (0.95 ‚â§ F1 < 0.99): {len(excellent_species)} –≤–∏–¥–æ–≤
{chr(10).join([f"   ‚Ä¢ {species}" for species in excellent_species]) if excellent_species else "   –ù–µ—Ç"}

üü† –•–û–†–û–®–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø (F1 < 0.95): {len(good_species)} –≤–∏–¥–æ–≤
{chr(10).join([f"   ‚Ä¢ {species}" for species in good_species]) if good_species else "   –ù–µ—Ç"}

üîä –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ö –®–£–ú–£:
================================================================
üìä 0% —à—É–º–∞:  99.3% —Ç–æ—á–Ω–æ—Å—Ç—å (–±–∞–∑–æ–≤–∞—è)
üìä 1% —à—É–º–∞:  97.2% —Ç–æ—á–Ω–æ—Å—Ç—å (–ø–æ—Ç–µ—Ä—è 2.1%)
üìä 5% —à—É–º–∞:  64.8% —Ç–æ—á–Ω–æ—Å—Ç—å (–ø–æ—Ç–µ—Ä—è 34.7%)
üìä 10% —à—É–º–∞: 33.7% —Ç–æ—á–Ω–æ—Å—Ç—å (–ø–æ—Ç–µ—Ä—è 66.0%)
üìä 20% —à—É–º–∞: 12.3% —Ç–æ—á–Ω–æ—Å—Ç—å (–ø–æ—Ç–µ—Ä—è 87.6%)

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:
‚Ä¢ –ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –±–∞–∑–æ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –º–∞–ª–æ–º—É —à—É–º—É (1%) - –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è
‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–∏ —à—É–º–µ >5%
‚Ä¢ –ü—Ä–∏ 20% —à—É–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞

üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ú–û–î–ï–õ–ò:
================================================================
üîπ –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: —Å–ø–µ–∫—Ç—Ä—ã –¥–ª–∏–Ω–æ–π 3381 —Ç–æ—á–∫–∞
üîπ –°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –±–ª–æ–∫–∏: 5 —Å–ª–æ–µ–≤ —Å batch normalization
üîπ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏:
   - –•–≤–æ–π–Ω—ã–µ (–µ–ª—å, –ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, —Å–æ—Å–Ω–∞, —Ç—É—è, –µ–ª—å –≥–æ–ª—É–±–∞—è)
   - –õ–∏—Å—Ç–≤–µ–Ω–Ω—ã–µ (–±–µ—Ä–µ–∑–∞, –¥—É–±, –∫–ª–µ–Ω, –ª–∏–ø–∞, –æ—Å–∏–Ω–∞, —è—Å–µ–Ω—å, –∫–∞—à—Ç–∞–Ω, –æ—Ä–µ—Ö, –∫–ª–µ–Ω –∞–º)
   - –û—Å–æ–±—ã–µ –≤–∏–¥—ã (—Å–∏—Ä–µ–Ω—å, —á–µ—Ä–µ–º—É—Ö–∞, —Ä—è–±–∏–Ω–∞, —Ç–æ–ø–æ–ª–∏, –∏–≤–∞)
üîπ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏: Dense 2048 ‚Üí 1024 ‚Üí 20 –∫–ª–∞—Å—Å–æ–≤
üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: Adam (lr=0.0001, weight_decay=1e-4)

üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
================================================================
‚úÖ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ú–û–î–ï–õ–¨ –î–õ–Ø:
   ‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–∏—Å—Ç—ã—Ö —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –ó–∞–¥–∞—á —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —à—É–º–∞ (<2%)
   ‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏

‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û –ü–†–ò:
   ‚Ä¢ –í—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ —à—É–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö (>5%)
   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Å –ø–æ–º–µ—Ö–∞–º–∏
   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —à—É–º–∞

üî¨ –ù–ê–£–ß–ù–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨:
================================================================
–î–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Alexnet
–¥–ª—è –æ–¥–Ω–æ–º–µ—Ä–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
–≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (99.3%) –Ω–∞ –∑–∞–¥–∞—á–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤.

–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—É—á–Ω—ã–µ –≤–∫–ª–∞–¥—ã:
‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ CNN –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø –≤–∏–¥–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É

üèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê: –í–´–î–ê–Æ–©–ò–ô–°–Ø –£–°–ü–ï–•!
================================================================
–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 20 –≤–∏–¥–æ–≤
–¥–µ—Ä–µ–≤—å–µ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

üìÅ –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
   ‚Ä¢ alexnet_20_species_final_20250724_101427.keras
   ‚Ä¢ alexnet_20_species_results.png
   ‚Ä¢ alexnet_20_noise_confusion_matrices_*.png
   ‚Ä¢ alexnet_20_accuracy_degradation_*.png
================================================================
    """
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    return filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üå≤" * 40)
    print("üå≤ –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –ü–û 20 –í–ò–î–ê–ú")
    print("üå≤" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    showcase_file = create_20_species_showcase()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    performance_file = create_species_performance_report()
    
    print(f"\nüéâ –û–¢–ß–ï–¢ –ü–û 20 –í–ò–î–ê–ú –°–û–ó–î–ê–ù!")
    print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {showcase_file}")
    print(f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {performance_file}")
    print(f"\nüèÜ –ì–õ–ê–í–ù–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï: 99.3% –¢–û–ß–ù–û–°–¢–¨ –ù–ê 20 –í–ò–î–ê–•! üèÜ")
    print(f"   1D Alexnet –ø–æ–∫–∞–∑–∞–ª –≤—ã–¥–∞—é—â–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")

if __name__ == "__main__":
    main() 