import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import accuracy_score, confusion_matrix
import os
import glob
import warnings
warnings.filterwarnings('ignore')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seeds –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

def load_real_spectral_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –†–ï–ê–õ–¨–ù–´–• —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –†–ï–ê–õ–¨–ù–´–• —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≤–∏–¥–æ–≤
    species_mapping = {
        '–±–µ—Ä–µ–∑–∞': '–±–µ—Ä–µ–∑–∞',
        '–¥—É–±': '–¥—É–±', 
        '–µ–ª—å': '–µ–ª—å',
        '–∫–ª–µ–Ω': '–∫–ª–µ–Ω',
        '–ª–∏–ø–∞': '–ª–∏–ø–∞',
        '–æ—Å–∏–Ω–∞': '–æ—Å–∏–Ω–∞',
        '—Å–æ—Å–Ω–∞': '—Å–æ—Å–Ω–∞'
    }
    
    all_data = []
    all_labels = []
    successful_loads = 0
    failed_loads = 0
    
    for folder_name, species_name in species_mapping.items():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª—å—à–µ–π –¥–ª–∏–Ω–æ–π —Å–ø–µ–∫—Ç—Ä–∞
        folder_path = os.path.join('–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ', '–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 7 –≤–∏–¥–æ–≤', folder_name)
        if not os.path.exists(folder_path):
            print(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
            
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {folder_name} -> {species_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        excel_files = glob.glob(os.path.join(folder_path, "*.xlsx"))
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(excel_files)} Excel —Ñ–∞–π–ª–æ–≤")
        
        species_count = 0
        for file_path in excel_files[:50]:  # –£–≤–µ–ª–∏—á–∏–º –¥–æ 50 —Ñ–∞–π–ª–æ–≤ –Ω–∞ –≤–∏–¥
            try:
                # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
                df = pd.read_excel(file_path)
                
                # –ë–µ—Ä—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏)
                if df.shape[1] >= 2 and df.shape[0] >= 50:  # –ú–∏–Ω–∏–º—É–º 50 —Ç–æ—á–µ–∫
                    # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
                    spectrum = df.iloc[:, 1].values
                    
                    # –£–¥–∞–ª—è–µ–º NaN –∏ inf –∑–Ω–∞—á–µ–Ω–∏—è
                    spectrum = spectrum[~np.isnan(spectrum)]
                    spectrum = spectrum[~np.isinf(spectrum)]
                    
                    if len(spectrum) > 50:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–µ–∫—Ç—Ä
                        if np.std(spectrum) > 0:
                            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–ª–∏–Ω–µ 300 —Ç–æ—á–µ–∫
                            if len(spectrum) > 300:
                                spectrum = spectrum[:300]
                            elif len(spectrum) < 300:
                                # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                                spectrum = np.pad(spectrum, (0, 300 - len(spectrum)), 'mean')
                            
                            all_data.append(spectrum)
                            all_labels.append(species_name)
                            species_count += 1
                            successful_loads += 1
                            
            except Exception as e:
                failed_loads += 1
                continue
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {species_count} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è {species_name}")
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {successful_loads} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"‚ùå –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {failed_loads}")
    
    if len(all_data) == 0:
        print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ì–†–£–ó–ò–¢–¨ –î–ê–ù–ù–´–ï!")
        return None, None
    
    X = np.array(all_data)
    y = np.array(all_labels)
    
    print(f"üìà –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
    print(f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã: {np.unique(y)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º
    unique, counts = np.unique(y, return_counts=True)
    print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –í–ò–î–ê–ú:")
    for species, count in zip(unique, counts):
        print(f"   {species}: {count} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    return X, y

def create_original_alexnet(input_shape, num_classes):
    """–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è AlexNet –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –¥—Ä–æ–ø–∞—É—Ç–∞–º–∏ (–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø!)"""
    model = Sequential([
        # –ì—Ä—É–ø–ø–∞ 1 - —É–º–µ–Ω—å—à–∏–º stride –¥–ª—è 300 —Ç–æ—á–µ–∫
        Conv1D(10, 50, strides=2, activation='relu', input_shape=input_shape),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 2 - —É–º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä —è–¥—Ä–∞
        Conv1D(20, 25, strides=1, activation='relu'),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 3
        Conv1D(50, 2, strides=1, activation='relu'),
        Conv1D(50, 2, strides=1, activation='relu'),
        Conv1D(25, 2, strides=1, activation='relu'),
        MaxPooling1D(3, strides=2),
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏
        Flatten(),
        Dense(200, activation='relu'),
        Dropout(0.5),
        Dense(200, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax')
    ])
    
    model.compile(
        optimizer=Adam(learning_rate=0.001),  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def add_gaussian_noise(data, noise_level):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —à—É–º–∞ –∫ –¥–∞–Ω–Ω—ã–º"""
    if noise_level == 0:
        return data
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    noise = np.zeros_like(data)
    for i in range(data.shape[0]):
        std_dev = np.std(data[i])
        noise[i] = np.random.normal(0, noise_level * std_dev, data[i].shape)
    
    return data + noise

def plot_confusion_matrices_like_table(matrices_data, class_names, save_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –æ—à–∏–±–æ–∫ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏ –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    
    fig, axes = plt.subplots(2, 2, figsize=(20, 16))
    axes = axes.ravel()
    
    for i, data in enumerate(matrices_data):
        noise_level = data['noise_level']
        cm_normalized = data['matrix']
        accuracy = data['accuracy']
        
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å 3 –∑–Ω–∞–∫–∞–º–∏ –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        annotations = []
        for row in range(cm_normalized.shape[0]):
            ann_row = []
            for col in range(cm_normalized.shape[1]):
                value = cm_normalized[row, col]
                ann_row.append(f"{value:.3f}")
            annotations.append(ann_row)
        
        # –°–æ–∑–¥–∞—ë–º heatmap
        sns.heatmap(cm_normalized, 
                   annot=annotations,
                   fmt='',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                   cmap='Blues',
                   cbar=True,
                   xticklabels=class_names,
                   yticklabels=class_names,
                   ax=axes[i],
                   square=True)
        
        axes[i].set_title(f'Œ¥ = {noise_level:.0f}% | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}', 
                         fontsize=14, fontweight='bold')
        axes[i].set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=12)
        axes[i].set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=12)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏
        axes[i].tick_params(axis='x', rotation=45)
        axes[i].tick_params(axis='y', rotation=0)
    
    plt.tight_layout()
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    plt.close()

def save_table_format_matrices(matrices_data, class_names, save_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ —É –≤–∞—Å"""
    
    with open(save_path, 'w', encoding='utf-8') as f:
        f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –≥–∏–ø–µ—Ä—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ 2 –Ω–º\n")
        f.write("=" * 80 + "\n\n")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        header = f"{'–ü–æ—Ä–æ–¥–∞':>10s} |"
        for data in matrices_data:
            noise_level = data['noise_level']
            header += f" Œ¥ = {noise_level:2.0f}% |" * 2
        f.write(header + "\n")
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        subheader = f"{'–¥–µ—Ä–µ–≤–∞':>10s} |"
        for data in matrices_data:
            subheader += f"   Pd    |   Pf    |"
        f.write(subheader + "\n")
        f.write("-" * len(subheader) + "\n")
        
        # –°—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
        for i, true_class in enumerate(class_names):
            row = f"{true_class:>10s} |"
            for data in matrices_data:
                cm_normalized = data['matrix']
                pd_value = cm_normalized[i, i]  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–¥–∏–∞–≥–æ–Ω–∞–ª—å)
                # Pf - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–æ–∂–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Å—Ç—Ä–æ–∫–µ –∏—Å–∫–ª—é—á–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å)
                pf_values = [cm_normalized[j, i] for j in range(len(class_names)) if j != i]
                pf_value = np.mean(pf_values) if pf_values else 0.0
                
                row += f" {pd_value:6.3f} | {pf_value:6.3f} |"
            f.write(row + "\n")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("üöÄ –ù–ê–ß–ê–õ–û –û–ë–£–ß–ï–ù–ò–Ø –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    X, y = load_real_spectral_data()
    
    if X is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"\nüîç –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–Ø–ì–ö–£–Æ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Æ...")
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    print(f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: [{np.min(X_scaled):.3f}, {np.max(X_scaled):.3f}], std={np.std(X_scaled):.3f}")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –º–µ—Ç–∫–∏
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(y)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y_encoded, 
        test_size=0.25,  # –ú–µ–Ω—å—à–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞
        random_state=42, 
        stratify=y_encoded
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è CNN
    X_train_cnn = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
    X_test_cnn = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
    
    print(f"\nüìã –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
    print(f"–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train_cnn.shape}")
    print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test_cnn.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    if X_train_cnn.shape[1] < 200:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        return
    
    # –°–æ–∑–¥–∞—ë–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –º–æ–¥–µ–ª—å
    print(f"\nüß† –°–û–ó–î–ê–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò...")
    model = create_original_alexnet((X_train_cnn.shape[1], 1), len(label_encoder.classes_))
    
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏: {model.count_params():,}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks —Å –ë–û–õ–¨–®–ò–ú —Ç–µ—Ä–ø–µ–Ω–∏–µ–º
    early_stopping = EarlyStopping(
        monitor='val_accuracy', 
        patience=25,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ
        restore_best_weights=True,
        verbose=1
    )
    
    # –û–±—É—á–µ–Ω–∏–µ —Å –£–í–ï–õ–ò–ß–ï–ù–ù–´–ú batch_size –∏ —ç–ø–æ—Ö–∞–º–∏
    print(f"\nüéØ –ù–ê–ß–ê–õ–û –û–ë–£–ß–ï–ù–ò–Ø...")
    batch_size = 32  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π batch size
    
    history = model.fit(
        X_train_cnn, y_train,
        epochs=150,  # –ë–æ–ª—å—à–µ —ç–ø–æ—Ö
        batch_size=batch_size,
        validation_split=0.15,  # –ú–µ–Ω—å—à–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –±–æ–ª—å—à–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        callbacks=[early_stopping],
        verbose=1
    )
    
    print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {len(history.history['accuracy'])} —ç–ø–æ—Ö")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —à—É–º–∞
    print(f"\nüîä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ê–ó–õ–ò–ß–ù–´–ú–ò –£–†–û–í–ù–Ø–ú–ò –®–£–ú–ê:")
    print("=" * 60)
    
    noise_levels = [1.0, 5.0, 10.0]  # –ö–∞–∫ –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ
    results = []
    
    for noise_level in noise_levels:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º {noise_level:.1f}% ---")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level/100.0)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        accuracy = accuracy_score(y_test, y_pred_classes)
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
        cm = confusion_matrix(y_test, y_pred_classes)
        cm_normalized = cm.astype('float') / (cm.sum(axis=1)[:, np.newaxis] + 1e-10)
        cm_normalized = np.nan_to_num(cm_normalized)
        
        results.append({
            'noise_level': noise_level,
            'accuracy': accuracy,
            'matrix': cm_normalized,
            'raw_matrix': cm
        })
        
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å (Pd –∑–Ω–∞—á–µ–Ω–∏—è)
        print("Pd –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è):")
        for i, species in enumerate(label_encoder.classes_):
            pd_value = cm_normalized[i, i]
            print(f"  {species}: {pd_value:.3f}")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = "–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø_ALEXNET_–ò–°–ü–†–ê–í–õ–ï–ù–ê"
    os.makedirs(output_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–∏–ª–µ —Ç–∞–±–ª–∏—Ü—ã
    matrices_path = os.path.join(output_dir, "alexnet_confusion_matrices_table_style.png")
    plot_confusion_matrices_like_table(results, label_encoder.classes_, matrices_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ —É –≤–∞—Å
    table_path = os.path.join(output_dir, "classification_results_table_format.txt")
    save_table_format_matrices(results, label_encoder.classes_, table_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_path = os.path.join(output_dir, "original_alexnet_fixed_report.txt")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–Å–¢ –ü–û –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô ALEXNET –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò\n")
        f.write("=" * 70 + "\n\n")
        f.write(f"–ò–ó–ú–ï–ù–ï–ù–ò–Ø (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´):\n")
        f.write(f"- –£–≤–µ–ª–∏—á–µ–Ω batch_size: 32\n")
        f.write(f"- –£–≤–µ–ª–∏—á–µ–Ω—ã —ç–ø–æ—Ö–∏: 150\n")
        f.write(f"- –£–≤–µ–ª–∏—á–µ–Ω–æ —Ç–µ—Ä–ø–µ–Ω–∏–µ: 25\n")
        f.write(f"- –£–º–µ–Ω—å—à–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è: 15%\n")
        f.write(f"- –ú—è–≥–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: StandardScaler\n\n")
        f.write(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –®–£–ú–£:\n")
        f.write("-" * 30 + "\n")
        for result in results:
            f.write(f"Œ¥ = {result['noise_level']:4.1f}%: —Ç–æ—á–Ω–æ—Å—Ç—å {result['accuracy']:.3f}\n")
    
    print(f"\n‚úÖ –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–•–†–ê–ù–ï–ù–´ –í: {output_dir}")
    print(f"üìä –ú–∞—Ç—Ä–∏—Ü—ã: {matrices_path}")
    print(f"üìÑ –¢–∞–±–ª–∏—Ü–∞: {table_path}")
    print(f"üìã –û—Ç—á—ë—Ç: {report_path}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï Pd –ó–ù–ê–ß–ï–ù–ò–Ø:")
    for result in results:
        print(f"\nŒ¥ = {result['noise_level']:.0f}%:")
        for i, species in enumerate(label_encoder.classes_):
            pd_value = result['matrix'][i, i]
            print(f"  {species}: Pd = {pd_value:.3f}")
    
    return results

if __name__ == "__main__":
    results = main()
    print("\nüéâ –û–ë–£–ß–ï–ù–ò–ï –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô –ó–ê–í–ï–†–®–ï–ù–û!")