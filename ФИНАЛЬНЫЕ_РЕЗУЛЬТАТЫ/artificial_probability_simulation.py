import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
import warnings
warnings.filterwarnings('ignore')

def create_artificial_probability_simulation():
    """–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
    print("=== –ò–°–ö–£–°–°–¢–í–ï–ù–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø ===")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    n_samples = 210
    n_classes = 7
    class_names = ['–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '–æ—Å–∏–Ω–∞', '—Å–æ—Å–Ω–∞']
    noise_levels = [0, 0.1, 0.2, 0.5, 1.0, 2.0]
    
    # –ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    np.random.seed(42)
    true_labels = np.random.randint(0, n_classes, n_samples)
    
    results = []
    confusion_matrices = []
    
    print("–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º...")
    
    for noise_level in noise_levels:
        print(f"   –°–∏–º—É–ª—è—Ü–∏—è —Å —à—É–º–æ–º {noise_level*100}%...")
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–µ–∑ —à—É–º–∞ (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
        if noise_level == 0:
            base_prob = 0.85
            std_prob = 0.05
        else:
            # –£–º–µ–Ω—å—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —à—É–º–æ–º
            base_prob = 0.85 * (1 - noise_level * 0.3)  # –°–Ω–∏–∂–µ–Ω–∏–µ —Å —à—É–º–æ–º
            std_prob = 0.05 + noise_level * 0.1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
        max_probs = np.random.normal(base_prob, std_prob, n_samples)
        max_probs = np.clip(max_probs, 0.1, 0.95)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        pred_labels = []
        for i in range(n_samples):
            if np.random.random() < max_probs[i]:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                pred_labels.append(true_labels[i])
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                wrong_pred = np.random.randint(0, n_classes)
                while wrong_pred == true_labels[i]:
                    wrong_pred = np.random.randint(0, n_classes)
                pred_labels.append(wrong_pred)
        
        pred_labels = np.array(pred_labels)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        accuracy = np.mean(pred_labels == true_labels)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫
        cm = confusion_matrix(true_labels, pred_labels)
        confusion_matrices.append(cm)
        
        results.append({
            'noise_level': noise_level,
            'noise_percent': noise_level * 100,
            'mean_max_probability': np.mean(max_probs),
            'std_max_probability': np.std(max_probs),
            'accuracy': accuracy,
            'min_prob': np.min(max_probs),
            'max_prob': np.max(max_probs)
        })
        
        print(f"      –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {np.mean(max_probs):.4f}")
        print(f"      –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(max_probs):.4f}")
        print(f"      –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.2f}%")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    df_results = pd.DataFrame(results)
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ô –°–ò–ú–£–õ–Ø–¶–ò–ò:")
    print("="*60)
    print(df_results.to_string(index=False))
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü –æ—à–∏–±–æ–∫
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    axes = axes.ravel()
    
    for i, (noise_level, cm) in enumerate(zip(noise_levels, confusion_matrices)):
        ax = axes[i]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ç—Ä–∏—Ü—É
        cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        
        # –°–æ–∑–¥–∞–µ–º heatmap
        sns.heatmap(cm_normalized, annot=True, fmt='.2f', cmap='Blues', 
                   xticklabels=class_names, 
                   yticklabels=class_names, ax=ax)
        
        ax.set_title(f'–®—É–º: {noise_level*100}%\n–¢–æ—á–Ω–æ—Å—Ç—å: {results[i]["accuracy"]*100:.1f}%')
        ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
        ax.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è_—Å–∏–º—É–ª—è—Ü–∏—è_–º–∞—Ç—Ä–∏—Ü.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    plt.figure(figsize=(15, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å vs —à—É–º
    plt.subplot(2, 2, 1)
    plt.plot(df_results['noise_percent'], df_results['mean_max_probability'], 'bo-', linewidth=2, markersize=8)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    plt.ylabel('–°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    plt.title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ—á–Ω–æ—Å—Ç—å vs —à—É–º
    plt.subplot(2, 2, 2)
    plt.plot(df_results['noise_percent'], df_results['accuracy']*100, 'ro-', linewidth=2, markersize=8)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)')
    plt.title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –î–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    plt.subplot(2, 2, 3)
    plt.fill_between(df_results['noise_percent'], 
                     df_results['min_prob'], 
                     df_results['max_prob'], 
                     alpha=0.3, color='green')
    plt.plot(df_results['noise_percent'], df_results['mean_max_probability'], 'go-', linewidth=2, markersize=8)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    plt.title('–î–∏–∞–ø–∞–∑–æ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    plt.subplot(2, 2, 4)
    plt.plot(df_results['noise_percent'], df_results['std_max_probability'], 'mo-', linewidth=2, markersize=8)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    plt.ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ')
    plt.title('–ò–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è_—Å–∏–º—É–ª—è—Ü–∏—è_–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df_results.to_csv('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è_—Å–∏–º—É–ª—è—Ü–∏—è_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.csv', index=False)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("üîç –ê–ù–ê–õ–ò–ó –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ô –°–ò–ú–£–õ–Ø–¶–ò–ò:")
    print("="*60)
    
    if df_results['mean_max_probability'].iloc[-1] < df_results['mean_max_probability'].iloc[0]:
        print("‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–Ω–∏–∂–∞—é—Ç—Å—è —Å —à—É–º–æ–º!")
        print("   –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    else:
        print("‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç—É—Ç —Å —à—É–º–æ–º")
    
    print(f"\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print(f"–ë–µ–∑ —à—É–º–∞:     {df_results['mean_max_probability'].iloc[0]:.4f}")
    print(f"–° –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —à—É–º–æ–º: {df_results['mean_max_probability'].iloc[-1]:.4f}")
    print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ:    {df_results['mean_max_probability'].iloc[-1] - df_results['mean_max_probability'].iloc[0]:.4f}")
    
    print(f"\nüéØ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–í–ï–î–ï–ù–ò–ï:")
    print(f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∂–∞—é—Ç—Å—è —Å —à—É–º–æ–º: {df_results['mean_max_probability'].iloc[0]:.3f} ‚Üí {df_results['mean_max_probability'].iloc[-1]:.3f}")
    print(f"- –¢–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å —à—É–º–æ–º: {df_results['accuracy'].iloc[0]*100:.1f}% ‚Üí {df_results['accuracy'].iloc[-1]*100:.1f}%")
    print(f"- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è: {df_results['std_max_probability'].iloc[0]:.3f} ‚Üí {df_results['std_max_probability'].iloc[-1]:.3f}")
    print(f"- –ú–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É—Ö—É–¥—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    print(f"\n‚úÖ –í–´–í–û–î:")
    print(f"- –≠—Ç–æ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–ê–Ø —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
    print(f"- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–æ–ª–∂–Ω—ã –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print(f"- –†–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –≤–µ—Å—Ç–∏ —Å–µ–±—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ")
    print(f"- –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã")

if __name__ == "__main__":
    create_artificial_probability_simulation() 