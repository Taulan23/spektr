import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.metrics import accuracy_score, confusion_matrix
import warnings
warnings.filterwarnings('ignore')
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seeds –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

def create_working_alexnet(input_shape, num_classes):
    """–†–ê–ë–û–ß–ê–Ø –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è 1D-AlexNet (–∏–∑ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"""
    model = Sequential([
        # –ì—Ä—É–ø–ø–∞ 1: 10 —Ñ–∏–ª—å—Ç—Ä–æ–≤, kernel_size=50, strides=4
        Conv1D(10, 50, strides=4, activation='relu', input_shape=input_shape),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 2: 20 —Ñ–∏–ª—å—Ç—Ä–æ–≤, kernel_size=50, strides=1
        Conv1D(20, 50, strides=1, activation='relu', padding='same'),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 3: 50 ‚Üí 50 ‚Üí 25 —Ñ–∏–ª—å—Ç—Ä–æ–≤, kernel_size=2, strides=1
        Conv1D(50, 2, strides=1, activation='relu', padding='same'),
        Conv1D(50, 2, strides=1, activation='relu', padding='same'),
        Conv1D(25, 2, strides=1, activation='relu', padding='same'),
        MaxPooling1D(3, strides=2),
        
        Flatten(),
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏: 200 ‚Üí 200 ‚Üí 7
        Dense(200, activation='relu'),
        Dropout(0.5),
        
        Dense(200, activation='relu'),
        Dropout(0.5),
        
        Dense(num_classes, activation='softmax')
    ])
    
    model.compile(
        optimizer=Adam(learning_rate=0.001),
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def add_gaussian_noise(data, noise_level):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —à—É–º–∞"""
    if noise_level == 0:
        return data
    
    noise = np.random.normal(0, noise_level * np.std(data), data.shape)
    return data + noise

def load_simple_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–ø–∫–∏"""
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
    possible_paths = [
        "–±–µ—Ä–µ–∑–∞",
        "–¥—É–±", 
        "–µ–ª—å",
        "–∫–ª–µ–Ω",
        "–ª–∏–ø–∞",
        "–æ—Å–∏–Ω–∞",
        "—Å–æ—Å–Ω–∞"
    ]
    
    all_data = []
    all_labels = []
    
    for species in possible_paths:
        try:
            import glob
            excel_files = glob.glob(f"{species}/*.xlsx")
            
            count = 0
            for file_path in excel_files[:30]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Ñ–∞–π–ª–æ–≤ –Ω–∞ –≤–∏–¥
                try:
                    df = pd.read_excel(file_path)
                    numeric_cols = df.select_dtypes(include=[np.number]).columns
                    if len(numeric_cols) > 0:
                        spectral_data = df[numeric_cols[0]].values
                        if len(spectral_data) >= 300:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 300 —Ç–æ—á–µ–∫
                            spectral_data = spectral_data[:300]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 300
                            all_data.append(spectral_data)
                            all_labels.append(species)
                            count += 1
                except Exception as e:
                    continue
            
            if count > 0:
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è {species}")
                
        except Exception as e:
            continue
    
    if len(all_data) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return None, None
    
    X = np.array(all_data)
    y = np.array(all_labels)
    
    print(f"‚úÖ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
    print(f"‚úÖ –í–∏–¥—ã: {np.unique(y)}")
    
    return X, y

def create_working_solution():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –†–ï–®–ï–ù–ò–Ø...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    X, y = load_simple_data()
    
    if X is None:
        print("‚ùå –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)
        X = np.random.rand(210, 300) * 0.6 + 0.4  # –î–∞–Ω–Ω—ã–µ –æ—Ç 0.4 –¥–æ 1.0 –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–∞—Ö
        y = np.random.choice(['–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '–æ—Å–∏–Ω–∞', '—Å–æ—Å–Ω–∞'], 210)
        print(f"‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {X.shape}")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –º–µ—Ç–∫–∏
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(y)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    X_train, X_test, y_train, y_test = train_test_split(
        X, y_encoded, test_size=0.3, random_state=42, stratify=y_encoded
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è CNN
    X_train_cnn = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
    X_test_cnn = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
    
    print(f"‚úÖ –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train_cnn.shape}")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test_cnn.shape}")
    print(f"‚úÖ –ö–ª–∞—Å—Å—ã: {label_encoder.classes_}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model = create_working_alexnet((X_train_cnn.shape[1], 1), len(label_encoder.classes_))
    
    print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
    model.summary()
    
    # –û–±—É—á–µ–Ω–∏–µ
    print("\n3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    early_stopping = EarlyStopping(
        monitor='val_accuracy', 
        patience=10,
        restore_best_weights=True,
        verbose=0
    )
    
    history = model.fit(
        X_train_cnn, y_train,
        epochs=50,
        batch_size=16,
        validation_split=0.2,
        callbacks=[early_stopping],
        verbose=1
    )
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —à—É–º–∞
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º...")
    noise_levels = [0, 0.01, 0.05, 0.1]
    results = []
    
    for noise_level in noise_levels:
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —à—É–º–æ–º {noise_level*100}%...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        accuracy = accuracy_score(y_test, y_pred_classes)
        max_probs = np.max(y_pred_proba, axis=1)
        mean_prob = np.mean(max_probs)
        std_prob = np.std(max_probs)
        unique_probs = len(np.unique(np.round(max_probs, 4)))
        
        results.append({
            'noise_percent': noise_level * 100,
            'accuracy': accuracy,
            'mean_probability': mean_prob,
            'std_probability': std_prob,
            'unique_probs': unique_probs,
            'total_samples': len(max_probs),
            'uniqueness_ratio': unique_probs / len(max_probs)
        })
        
        print(f"      –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.1f}%")
        print(f"      –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {mean_prob:.4f}")
        print(f"      –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {unique_probs}/{len(max_probs)} ({unique_probs/len(max_probs)*100:.1f}%)")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    df_results = pd.DataFrame(results)
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*60)
    print(df_results.to_string(index=False))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    first_accuracy = df_results['accuracy'].iloc[0]
    first_uniqueness = df_results['uniqueness_ratio'].iloc[0]
    
    is_working = (first_accuracy > 0.2) and (first_uniqueness > 0.1)
    
    if is_working:
        print("\n‚úÖ –ú–û–î–ï–õ–¨ –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {first_accuracy*100:.1f}%")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {first_uniqueness*100:.1f}%")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {model.count_params():,}")
    else:
        print("\n‚ö†Ô∏è –ú–û–î–ï–õ–¨ –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {first_accuracy*100:.1f}% (–Ω—É–∂–Ω–æ >20%)")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {first_uniqueness*100:.1f}% (–Ω—É–∂–Ω–æ >10%)")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
    print("\n5. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –æ—à–∏–±–æ–∫...")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´', exist_ok=True)
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    axes = axes.ravel()
    
    for i, noise_level in enumerate(noise_levels):
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level)
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        cm = confusion_matrix(y_test, y_pred_classes)
        cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        
        sns.heatmap(cm_normalized, annot=True, fmt='.2f', cmap='Blues', 
                   xticklabels=label_encoder.classes_, 
                   yticklabels=label_encoder.classes_, ax=axes[i])
        
        accuracy = accuracy_score(y_test, y_pred_classes)
        axes[i].set_title(f'–®—É–º: {noise_level*100}%\n–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.1f}%')
        axes[i].set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
        axes[i].set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/final_working_confusion_matrices.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    
    # –¢–æ—á–Ω–æ—Å—Ç—å
    axes[0].plot(df_results['noise_percent'], df_results['accuracy']*100, 'bo-', linewidth=2)
    axes[0].set_xlabel('–®—É–º (%)')
    axes[0].set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)')
    axes[0].set_title('–¢–æ—á–Ω–æ—Å—Ç—å vs –®—É–º')
    axes[0].grid(True)
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    axes[1].plot(df_results['noise_percent'], df_results['mean_probability'], 'ro-', linewidth=2)
    axes[1].set_xlabel('–®—É–º (%)')
    axes[1].set_ylabel('–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    axes[1].set_title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ vs –®—É–º')
    axes[1].grid(True)
    
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    axes[2].plot(df_results['noise_percent'], df_results['uniqueness_ratio']*100, 'go-', linewidth=2)
    axes[2].set_xlabel('–®—É–º (%)')
    axes[2].set_ylabel('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (%)')
    axes[2].set_title('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å vs –®—É–º')
    axes[2].grid(True)
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/final_working_results.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    df_results.to_csv('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/final_working_results.csv', index=False)
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/")
    
    return model, history, df_results, is_working

if __name__ == "__main__":
    model, history, results, working = create_working_solution()
    
    if working:
        print("\nüéâ –í–°–ï –ì–û–¢–û–í–û –ö –ö–û–ú–ú–ò–¢–£ –ò –ü–£–®–£!")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –ù–û –û–°–ù–û–í–ê –†–ê–ë–û–¢–ê–ï–¢")