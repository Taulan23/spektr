import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder  # –ë–ï–ó –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏!
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.metrics import accuracy_score, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seeds –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

def load_spectral_data_7_species():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 7 –≤–∏–¥–æ–≤"""
    base_path = "–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 7 –≤–∏–¥–æ–≤"
    species_folders = ["–±–µ—Ä–µ–∑–∞", "–¥—É–±", "–µ–ª—å", "–∫–ª–µ–Ω", "–ª–∏–ø–∞", "–æ—Å–∏–Ω–∞", "—Å–æ—Å–Ω–∞"]
    
    all_data = []
    all_labels = []
    
    for species in species_folders:
        species_path = f"{base_path}/{species}"
        try:
            import os
            import glob
            excel_files = glob.glob(f"{species_path}/*_vis.xlsx")
            
            for file_path in excel_files:
                try:
                    df = pd.read_excel(file_path)
                    numeric_cols = df.select_dtypes(include=[np.number]).columns
                    if len(numeric_cols) > 0:
                        spectral_data = df[numeric_cols[0]].values
                        if len(spectral_data) > 0:
                            all_data.append(spectral_data)
                            all_labels.append(species)
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {species}: {e}")
            continue
    
    if len(all_data) == 0:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return np.array([]), np.array([])
    
    X = np.array(all_data)
    y = np.array(all_labels)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è {len(np.unique(y))} –≤–∏–¥–æ–≤")
    return X, y

def create_modified_alexnet(input_shape, num_classes):
    """–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø 1D-AlexNet —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    model = Sequential([
        # –ì—Ä—É–ø–ø–∞ 1: 10 —Ñ–∏–ª—å—Ç—Ä–æ–≤
        Conv1D(10, 50, strides=4, activation='relu', input_shape=input_shape),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 2: 20 —Ñ–∏–ª—å—Ç—Ä–æ–≤  
        Conv1D(20, 50, strides=1, activation='relu', padding='same'),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 3: 50 ‚Üí 50 ‚Üí 25 —Ñ–∏–ª—å—Ç—Ä–æ–≤
        Conv1D(50, 2, strides=1, activation='relu', padding='same'),
        Conv1D(50, 2, strides=1, activation='relu', padding='same'),
        Conv1D(25, 2, strides=1, activation='relu', padding='same'),
        MaxPooling1D(3, strides=2),
        
        Flatten(),
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏: 200 ‚Üí 200 ‚Üí 7
        Dense(200, activation='relu'),
        Dropout(0.5),
        
        Dense(200, activation='relu'),
        Dropout(0.5),
        
        Dense(num_classes, activation='softmax')
    ])
    
    model.compile(
        optimizer=Adam(learning_rate=0.001),  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π learning rate
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def add_gaussian_noise(data, noise_level):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —à—É–º–∞"""
    if noise_level == 0:
        return data
    
    noise = np.random.normal(0, noise_level * np.std(data), data.shape)
    return data + noise

def test_modified_alexnet():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("=== –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø 1D-ALEXNET –ë–ï–ó –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ===")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data, labels = load_spectral_data_7_species()
    if len(data) == 0:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - min: {np.min(data):.4f}, max: {np.max(data):.4f}, std: {np.std(data):.4f}")
    
    # –ë–ï–ó –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("2. –ë–ï–ó –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)...")
    X_raw = data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å!
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ - min: {np.min(X_raw):.4f}, max: {np.max(X_raw):.4f}, std: {np.std(X_raw):.4f}")
    
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(labels)
    
    X_train, X_test, y_train, y_test = train_test_split(
        X_raw, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
    )
    
    X_train_cnn = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
    X_test_cnn = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
    
    print(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {X_train.shape}")
    print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_test.shape}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(label_encoder.classes_)}")
    print(f"–ö–ª–∞—Å—Å—ã: {label_encoder.classes_}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô –º–æ–¥–µ–ª–∏
    print("3. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    model = create_modified_alexnet((X_train_cnn.shape[1], 1), len(label_encoder.classes_))
    
    print("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:")
    model.summary()
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    early_stopping = EarlyStopping(
        monitor='val_accuracy', 
        patience=15,
        restore_best_weights=True,
        verbose=1
    )
    reduce_lr = ReduceLROnPlateau(
        monitor='val_loss', 
        factor=0.5, 
        patience=8,
        min_lr=1e-7,
        verbose=1
    )
    
    history = model.fit(
        X_train_cnn, y_train,
        epochs=100,
        batch_size=32,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        validation_split=0.2,
        callbacks=[early_stopping, reduce_lr],
        verbose=1
    )
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —à—É–º–∞
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —à—É–º–∞...")
    y_pred_clean = model.predict(X_test_cnn, verbose=0)
    y_pred_classes_clean = np.argmax(y_pred_clean, axis=1)
    accuracy_clean = accuracy_score(y_test, y_pred_classes_clean)
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å –±–µ–∑ —à—É–º–∞: {accuracy_clean*100:.2f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –±–µ–∑ —à—É–º–∞
    max_probs_clean = np.max(y_pred_clean, axis=1)
    unique_probs_clean = len(np.unique(np.round(max_probs_clean, 4)))
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –±–µ–∑ —à—É–º–∞: {unique_probs_clean}/{len(max_probs_clean)} ({unique_probs_clean/len(max_probs_clean)*100:.1f}%)")
    print(f"–ü–µ—Ä–≤—ã–µ 5 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {max_probs_clean[:5]}")
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: min={np.min(max_probs_clean):.4f}, max={np.max(max_probs_clean):.4f}, std={np.std(max_probs_clean):.4f}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º...")
    noise_levels = [0, 0.01, 0.05, 0.1, 0.2, 0.5]
    results = []
    
    for noise_level in noise_levels:
        print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º {noise_level*100}%...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        max_probs = np.max(y_pred_proba, axis=1)
        mean_max_prob = np.mean(max_probs)
        std_max_prob = np.std(max_probs)
        accuracy = accuracy_score(y_test, y_pred_classes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        unique_probs = len(np.unique(np.round(max_probs, 4)))
        
        results.append({
            'noise_level': noise_level,
            'noise_percent': noise_level * 100,
            'mean_max_probability': mean_max_prob,
            'std_max_probability': std_max_prob,
            'accuracy': accuracy,
            'min_prob': np.min(max_probs),
            'max_prob': np.max(max_probs),
            'unique_probs': unique_probs,
            'total_samples': len(max_probs),
            'uniqueness_ratio': unique_probs / len(max_probs)
        })
        
        print(f"      –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {mean_max_prob:.4f}")
        print(f"      –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_max_prob:.4f}")
        print(f"      –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.2f}%")
        print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {unique_probs}/{len(max_probs)} ({unique_probs/len(max_probs)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df_results = pd.DataFrame(results)
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô –ú–û–î–ï–õ–ò:")
    print("="*80)
    print(df_results.to_string(index=False))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞
    print("\n" + "="*80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    prob_trend = df_results['mean_max_probability'].iloc[-1] - df_results['mean_max_probability'].iloc[0]
    acc_trend = df_results['accuracy'].iloc[-1] - df_results['accuracy'].iloc[0]
    
    if prob_trend < -0.05:  # –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 5%
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–Ω–∏–∂–∞—é—Ç—Å—è —Å —à—É–º–æ–º!")
        print(f"   –°–Ω–∏–∂–µ–Ω–∏–µ: {df_results['mean_max_probability'].iloc[0]:.4f} ‚Üí {df_results['mean_max_probability'].iloc[-1]:.4f}")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–µ —Å–Ω–∏–∂–∞—é—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {df_results['mean_max_probability'].iloc[0]:.4f} ‚Üí {df_results['mean_max_probability'].iloc[-1]:.4f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    min_uniqueness = df_results['uniqueness_ratio'].min()
    if min_uniqueness > 0.3:  # –ë–æ–ª–µ–µ 30% —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã!")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {min_uniqueness*100:.1f}%")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: {min_uniqueness*100:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ
    if accuracy_clean > 0.3:  # –ë–æ–ª–µ–µ 30% —Ç–æ—á–Ω–æ—Å—Ç–∏
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ—á–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–∞—Å—å!")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy_clean*100:.1f}%")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø: –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy_clean*100:.1f}%")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ vs —à—É–º
    axes[0,0].plot(df_results['noise_percent'], df_results['mean_max_probability'], 'bo-', linewidth=2, markersize=8)
    axes[0,0].set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    axes[0,0].set_ylabel('–°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    axes[0,0].set_title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø)')
    axes[0,0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ—á–Ω–æ—Å—Ç—å vs —à—É–º
    axes[0,1].plot(df_results['noise_percent'], df_results['accuracy']*100, 'ro-', linewidth=2, markersize=8)
    axes[0,1].set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    axes[0,1].set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)')
    axes[0,1].set_title('–í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø)')
    axes[0,1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    axes[1,0].plot(df_results['noise_percent'], df_results['uniqueness_ratio']*100, 'go-', linewidth=2, markersize=8)
    axes[1,0].set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    axes[1,0].set_ylabel('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (%)')
    axes[1,0].set_title('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø)')
    axes[1,0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
    axes[1,1].plot(history.history['accuracy'], label='Train Accuracy', linewidth=2)
    axes[1,1].plot(history.history['val_accuracy'], label='Val Accuracy', linewidth=2)
    axes[1,1].set_xlabel('–≠–ø–æ—Ö–∞')
    axes[1,1].set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    axes[1,1].set_title('–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø)')
    axes[1,1].legend()
    axes[1,1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.png', dpi=300, bbox_inches='tight')
    plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ –ø–æ–∫–∞–∑–∞
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    axes = axes.ravel()
    
    for i, noise_level in enumerate(noise_levels):
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level)
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        cm = confusion_matrix(y_test, y_pred_classes)
        cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        
        sns.heatmap(cm_normalized, annot=True, fmt='.2f', cmap='Blues', 
                   xticklabels=label_encoder.classes_, 
                   yticklabels=label_encoder.classes_, ax=axes[i])
        
        accuracy = accuracy_score(y_test, y_pred_classes)
        axes[i].set_title(f'–®—É–º: {noise_level*100}%\n–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.1f}% (–ú–û–î–ò–§.)')
        axes[i].set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
        axes[i].set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_–º–∞—Ç—Ä–∏—Ü—ã_–æ—à–∏–±–æ–∫.png', dpi=300, bbox_inches='tight')
    plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ –ø–æ–∫–∞–∑–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    df_results.to_csv('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.csv', index=False)
    
    print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {len(history.history['accuracy'])} —ç–ø–æ—Ö")
    print(f"üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy_clean*100:.2f}%")
    print(f"üî¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏: {model.count_params():,}")
    
    return model, history, df_results

if __name__ == "__main__":
    model, history, results = test_modified_alexnet()