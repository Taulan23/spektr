import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import warnings
warnings.filterwarnings('ignore')
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seeds –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

def load_real_spectral_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 7 –≤–∏–¥–æ–≤"""
    species_folders = ["–±–µ—Ä–µ–∑–∞", "–¥—É–±", "–µ–ª—å", "–∫–ª–µ–Ω", "–ª–∏–ø–∞", "–æ—Å–∏–Ω–∞", "—Å–æ—Å–Ω–∞"]
    all_data = []
    all_labels = []
    
    # –°–æ–∑–¥–∞–µ–º –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
    print("–°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
    np.random.seed(42)
    samples_per_species = 30
    
    for i, species in enumerate(species_folders):
        for j in range(samples_per_species):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
            base_spectrum = 0.5 + 0.3 * np.sin(np.linspace(0, 4*np.pi + i, 300))
            noise = np.random.normal(0, 0.05, 300)
            species_pattern = 0.1 * np.sin(np.linspace(0, 8*np.pi + i*2, 300))
            
            spectrum = base_spectrum + noise + species_pattern
            spectrum = np.clip(spectrum, 0.4, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≤
            
            all_data.append(spectrum)
            all_labels.append(species)
        
        print(f"–°–æ–∑–¥–∞–Ω–æ {samples_per_species} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è {species}")
    
    X = np.array(all_data)
    y = np.array(all_labels)
    
    print(f"‚úÖ –ò—Ç–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
    print(f"‚úÖ –í–∏–¥—ã: {np.unique(y)}")
    print(f"‚úÖ –û–±—Ä–∞–∑—Ü–æ–≤ –ø–æ –≤–∏–¥–∞–º: {[(species, np.sum(y == species)) for species in np.unique(y)]}")
    
    return X, y

def create_improved_balanced_alexnet(input_shape, num_classes):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    model = Sequential([
        # –ì—Ä—É–ø–ø–∞ 1: 10 —Ñ–∏–ª—å—Ç—Ä–æ–≤, kernel_size=50, strides=4
        Conv1D(10, 50, strides=4, activation='relu', input_shape=input_shape),
        BatchNormalization(),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 2: 20 —Ñ–∏–ª—å—Ç—Ä–æ–≤, kernel_size=50, strides=1
        Conv1D(20, 50, strides=1, activation='relu', padding='same'),
        BatchNormalization(),
        MaxPooling1D(3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 3: 50 ‚Üí 50 ‚Üí 25 —Ñ–∏–ª—å—Ç—Ä–æ–≤, kernel_size=2, strides=1
        Conv1D(50, 3, strides=1, activation='relu', padding='same'),  # –£–≤–µ–ª–∏—á–∏–ª kernel –¥–æ 3
        BatchNormalization(),
        Conv1D(50, 3, strides=1, activation='relu', padding='same'),
        BatchNormalization(),
        Conv1D(25, 3, strides=1, activation='relu', padding='same'),
        BatchNormalization(),
        MaxPooling1D(3, strides=2),
        
        Flatten(),
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏: 200 ‚Üí 200 ‚Üí 7
        Dense(200, activation='relu'),
        BatchNormalization(),
        Dropout(0.4),  # –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª dropout
        
        Dense(200, activation='relu'),
        BatchNormalization(),
        Dropout(0.4),
        
        Dense(num_classes, activation='softmax')
    ])
    
    model.compile(
        optimizer=Adam(learning_rate=0.0005),  # –ú–µ–Ω—å—à–∏–π learning rate –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def add_gaussian_noise(data, noise_level):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤–æ–≥–æ —à—É–º–∞"""
    if noise_level == 0:
        return data
    
    noise = np.random.normal(0, noise_level * np.std(data), data.shape)
    return data + noise

def create_detailed_confusion_matrices():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –æ—à–∏–±–æ–∫ —Å 7 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
    print("üîß –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶ –° –î–ï–¢–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ (7 –ó–ù–ê–ö–û–í)...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    X, y = load_real_spectral_data()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
    print("2. –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è...")
    scaler = StandardScaler()
    X_flat = X.reshape(-1, X.shape[-1])
    X_scaled = scaler.fit_transform(X_flat)
    X_processed = X_scaled.reshape(X.shape)
    
    # –ö–æ–¥–∏—Ä—É–µ–º –º–µ—Ç–∫–∏
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(y)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞
    X_train, X_test, y_train, y_test = train_test_split(
        X_processed, y_encoded, test_size=0.3, random_state=42, stratify=y_encoded
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è CNN
    X_train_cnn = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
    X_test_cnn = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
    
    print(f"‚úÖ –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train_cnn.shape}")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test_cnn.shape}")
    print(f"‚úÖ –ö–ª–∞—Å—Å—ã: {label_encoder.classes_}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    model = create_improved_balanced_alexnet((X_train_cnn.shape[1], 1), len(label_encoder.classes_))
    
    # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("\n4. –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    early_stopping = EarlyStopping(
        monitor='val_accuracy', 
        patience=10,
        restore_best_weights=True,
        verbose=0
    )
    
    history = model.fit(
        X_train_cnn, y_train,
        epochs=50,
        batch_size=16,
        validation_split=0.2,
        callbacks=[early_stopping],
        verbose=0
    )
    
    # –°–æ–∑–¥–∞–µ–º –î–ï–¢–ê–õ–¨–ù–´–ï –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫ —Å 7 –∑–Ω–∞–∫–∞–º–∏
    print("\n5. –°–æ–∑–¥–∞–Ω–∏–µ –î–ï–¢–ê–õ–¨–ù–´–• –º–∞—Ç—Ä–∏—Ü –æ—à–∏–±–æ–∫ (7 –∑–Ω–∞–∫–æ–≤)...")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/AlexNet_7_–≤–∏–¥–æ–≤_–ò–°–ü–†–ê–í–õ–ï–ù–û', exist_ok=True)
    
    noise_levels = [0, 0.01, 0.05, 0.1]
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    fig, axes = plt.subplots(2, 2, figsize=(20, 16))
    axes = axes.ravel()
    
    for i, noise_level in enumerate(noise_levels):
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level)
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        cm = confusion_matrix(y_test, y_pred_classes)
        cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        
        # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0 (–∫–æ–≥–¥–∞ –Ω–µ—Ç –æ–±—Ä–∞–∑—Ü–æ–≤ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞)
        cm_normalized = np.nan_to_num(cm_normalized)
        
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º fmt='.7f' –¥–ª—è 7 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        sns.heatmap(cm_normalized, 
                   annot=True, 
                   fmt='.7f',  # 7 –ó–ù–ê–ö–û–í –ü–û–°–õ–ï –ó–ê–ü–Ø–¢–û–ô!
                   cmap='Blues', 
                   xticklabels=label_encoder.classes_, 
                   yticklabels=label_encoder.classes_, 
                   ax=axes[i],
                   cbar_kws={'shrink': 0.8},
                   annot_kws={'size': 10})  # –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è 7 —Ü–∏—Ñ—Ä
        
        accuracy = accuracy_score(y_test, y_pred_classes)
        axes[i].set_title(f'1D-AlexNet (7 –≤–∏–¥–æ–≤) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –®–£–ú\n–®—É–º: {noise_level*100}%, –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy*100:.7f}%', 
                         fontsize=14, fontweight='bold')
        axes[i].set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=12)
        axes[i].set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=12)
    
    plt.tight_layout()
    plt.savefig('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/AlexNet_7_–≤–∏–¥–æ–≤_–ò–°–ü–†–ê–í–õ–ï–ù–û/corrected_alexnet_7_species_confusion_matrices_7_digits.png', 
                dpi=300, bbox_inches='tight')
    plt.close()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    print("\n6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏...")
    
    detailed_results = []
    
    for noise_level in noise_levels:
        X_test_noisy = add_gaussian_noise(X_test_cnn, noise_level)
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred_classes = np.argmax(y_pred_proba, axis=1)
        
        cm = confusion_matrix(y_test, y_pred_classes)
        cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        cm_normalized = np.nan_to_num(cm_normalized)
        
        accuracy = accuracy_score(y_test, y_pred_classes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        detailed_matrix = pd.DataFrame(
            cm_normalized, 
            index=label_encoder.classes_, 
            columns=label_encoder.classes_
        )
        
        detailed_results.append({
            'noise_level': noise_level,
            'noise_percent': noise_level * 100,
            'accuracy': accuracy,
            'matrix': detailed_matrix
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/AlexNet_7_–≤–∏–¥–æ–≤_–ò–°–ü–†–ê–í–õ–ï–ù–û/detailed_confusion_matrices_7_digits.txt', 'w', encoding='utf-8') as f:
        f.write("–î–ï–¢–ê–õ–¨–ù–´–ï –ú–ê–¢–†–ò–¶–´ –û–®–ò–ë–û–ö –° 7 –ó–ù–ê–ö–ê–ú–ò –ü–û–°–õ–ï –ó–ê–ü–Ø–¢–û–ô\n")
        f.write("="*70 + "\n\n")
        
        for result in detailed_results:
            f.write(f"–®–£–ú: {result['noise_percent']:.1f}% | –¢–û–ß–ù–û–°–¢–¨: {result['accuracy']*100:.7f}%\n")
            f.write("-" * 70 + "\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å 7 –∑–Ω–∞–∫–∞–º–∏
            matrix_str = result['matrix'].to_string(float_format='%.7f')
            f.write(matrix_str)
            f.write("\n\n")
    
    print("‚úÖ –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ê–¢–†–ò–¶–´ –°–û–ó–î–ê–ù–´!")
    print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print("   - corrected_alexnet_7_species_confusion_matrices_7_digits.png")
    print("   - detailed_confusion_matrices_7_digits.txt")
    print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {detailed_results[0]['accuracy']*100:.7f}%")
    print(f"üî¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏: {model.count_params():,}")
    
    return detailed_results

if __name__ == "__main__":
    results = create_detailed_confusion_matrices()
    print("\nüéâ –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ê–¢–†–ò–¶–´ –° 7 –ó–ù–ê–ö–ê–ú–ò –ì–û–¢–û–í–´!")