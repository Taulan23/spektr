#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê et80_10.xlsx
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
"""

import pandas as pd
import numpy as np

def analyze_et80_10():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª et80_10.xlsx"""
    
    print("="*80)
    print("üìä –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê et80_10.xlsx")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    df = pd.read_excel('et80_10.xlsx')
    
    print(f"üìã –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–ê:")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {df.shape}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫: {len(df)}")
    print(f"   ‚Ä¢ –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    print(f"\nüìã –ó–ê–ì–û–õ–û–í–ö–ò:")
    for i in range(min(10, len(df))):
        if pd.notna(df.iloc[i, 0]):
            print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫–∞ {i}: {df.iloc[i, 0]}")
    
    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
    data_start = None
    species_names = []
    
    for i in range(len(df)):
        if pd.notna(df.iloc[i, 0]) and '–±–µ—Ä–µ–∑–∞' in str(df.iloc[i, 0]):
            data_start = i
            break
    
    if data_start is None:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    print(f"\nüìä –ù–ê–ß–ê–õ–û –î–ê–ù–ù–´–•: —Å—Ç—Ä–æ–∫–∞ {data_start}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å—Ç—Ä–æ–∫–∞ 8)
    if data_start + 1 < len(df):
        headers_row = df.iloc[data_start + 1, 1:].values
        print(f"\nüìã –ó–ê–ì–û–õ–û–í–ö–ò –°–¢–û–õ–ë–¶–û–í:")
        for i, header in enumerate(headers_row):
            if pd.notna(header):
                print(f"   ‚Ä¢ –°—Ç–æ–ª–±–µ—Ü {i+1}: {header}")
                species_names.append(header)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:")
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
    species_counts = {}
    correct_classifications = {}
    
    current_species = None
    sample_count = 0
    
    for i in range(data_start + 2, len(df)):
        row = df.iloc[i, 1:].values
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
        if not any(pd.notna(val) for val in row):
            continue
        
        # –ò—â–µ–º –≤–∏–¥ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
        first_col = df.iloc[i, 0]
        if pd.notna(first_col) and any(species in str(first_col) for species in species_names):
            # –≠—Ç–æ –Ω–æ–≤—ã–π –≤–∏–¥
            if current_species:
                species_counts[current_species] = sample_count
                print(f"   ‚Ä¢ {current_species}: {sample_count} –æ–±—Ä–∞–∑—Ü–æ–≤")
            
            current_species = str(first_col)
            sample_count = 0
            correct_classifications[current_species] = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if current_species and any(pd.notna(val) for val in row):
            sample_count += 1
            
            # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é (1 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–æ–ª–±—Ü–µ)
            species_idx = None
            for j, species in enumerate(species_names):
                if current_species in species:
                    species_idx = j
                    break
            
            if species_idx is not None and species_idx < len(row):
                if pd.notna(row[species_idx]) and row[species_idx] == 1:
                    correct_classifications[current_species] += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥
    if current_species:
        species_counts[current_species] = sample_count
        print(f"   ‚Ä¢ {current_species}: {sample_count} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:")
    total_correct = 0
    total_samples = 0
    
    for species in species_counts:
        correct = correct_classifications.get(species, 0)
        total = species_counts[species]
        accuracy = correct / total * 100 if total > 0 else 0
        
        print(f"   ‚Ä¢ {species}: {correct}/{total} ({accuracy:.1f}%)")
        
        total_correct += correct
        total_samples += total
    
    overall_accuracy = total_correct / total_samples * 100 if total_samples > 0 else 0
    print(f"\nüéØ –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {total_correct}/{total_samples} ({overall_accuracy:.1f}%)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ù–ê–®–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
    print(f"   ‚Ä¢ et80_10.xlsx: {overall_accuracy:.1f}%")
    print(f"   ‚Ä¢ –ù–∞—à–∞ –º–æ–¥–µ–ª—å (10% —à—É–º–∞): ~90.3%")
    print(f"   ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞: {overall_accuracy - 90.3:.1f}%")
    
    if overall_accuracy < 90.3:
        print(f"   ‚Ä¢ –í—ã–≤–æ–¥: –í —Ñ–∞–π–ª–µ et80_10.xlsx —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –Ω–∞ {90.3 - overall_accuracy:.1f}%")
    else:
        print(f"   ‚Ä¢ –í—ã–≤–æ–¥: –í —Ñ–∞–π–ª–µ et80_10.xlsx —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ –Ω–∞ {overall_accuracy - 90.3:.1f}%")
    
    print("="*80)

if __name__ == "__main__":
    analyze_et80_10() 