import os
import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
import warnings
import pickle
warnings.filterwarnings('ignore')

# –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç–∞—Ç—å–∏ –±–µ–∑ TensorFlow
print("‚ö†Ô∏è TensorFlow –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∞—Ç—å–∏.")

def load_spectral_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è 1D-AlexNet"""
    tree_types = ['–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '–æ—Å–∏–Ω–∞', '—Å–æ—Å–Ω–∞']
    all_spectra = []
    all_labels = []
    
    print("üåø –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    print("="*60)
    
    for tree_type in tree_types:
        folder_path = os.path.join('.', tree_type)
        if os.path.exists(folder_path):
            excel_files = glob.glob(os.path.join(folder_path, '*.xlsx'))
            print(f"üìÅ {tree_type}: {len(excel_files)} —Ñ–∞–π–ª–æ–≤")
            
            for file_path in excel_files:
                try:
                    df = pd.read_excel(file_path)
                    
                    if df.shape[1] >= 2:
                        # –ë–µ—Ä–µ–º —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü)
                        spectrum = df.iloc[:, 1].values
                        
                        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç NaN
                        spectrum = spectrum[~np.isnan(spectrum)]
                        
                        if len(spectrum) >= 100:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            all_spectra.append(spectrum)
                            all_labels.append(tree_type)
                            
                except Exception as e:
                    print(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    continue
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_spectra)} —Å–ø–µ–∫—Ç—Ä–æ–≤ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    return all_spectra, all_labels, tree_types

def preprocess_spectra_for_1d_alexnet(spectra, labels, target_length=300):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ–∫—Ç—Ä—ã –¥–ª—è 1D-AlexNet —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏.
    """
    print("\nüîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ–∫—Ç—Ä–æ–≤ –¥–ª—è 1D-AlexNet (—É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)...")
    print(f"üìè –¶–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞ —Å–ø–µ–∫—Ç—Ä–∞: {target_length} (—Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π)")
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —Å–ø–µ–∫—Ç—Ä—ã –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
    processed_spectra = []
    processed_labels = []
    
    for i, spectrum in enumerate(spectra):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ø–µ–∫—Ç—Ä—ã
        if len(spectrum) < 50:
            continue
            
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if len(spectrum) != target_length:
            processed_spectrum = np.interp(
                np.linspace(0, len(spectrum) - 1, target_length),
                np.arange(len(spectrum)),
                spectrum
            )
        else:
            processed_spectrum = spectrum
            
        processed_spectra.append(processed_spectrum)
        processed_labels.append(labels[i])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤
    X = np.array(processed_spectra, dtype=np.float32)
    
    # –ö–æ–¥–∏—Ä—É–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤
    label_encoder = LabelEncoder()
    y = label_encoder.fit_transform(processed_labels)
    
    print(f"üìä –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
    print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(np.unique(y))}")
    print(f"üè∑Ô∏è –ö–ª–∞—Å—Å—ã: {label_encoder.classes_}")
    
    return X, y, label_encoder, target_length

class AlexNetSimulator:
    """
    –°–∏–º—É–ª—è—Ç–æ—Ä 1D-AlexNet —Å —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∞—Ç—å–∏:
    - RMSprop —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å learning_rate=0.001, momentum=0.3
    - 400 —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è
    - –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    """
    
    def __init__(self, input_size, num_classes, learning_rate=0.001, momentum=0.3):
        self.input_size = input_size
        self.num_classes = num_classes
        self.learning_rate = learning_rate
        self.momentum = momentum
        self.models = []
        self.best_model = None
        self.best_accuracy = 0.0
        
    def create_model(self, random_state=42):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å, –∏–º–∏—Ç–∏—Ä—É—é—â—É—é 1D-AlexNet"""
        # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç–∞—Ç—å–∏
        model = MLPClassifier(
            hidden_layer_sizes=(4096, 4096, 256),  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ–µ–≤ AlexNet
            activation='relu',
            solver='adam',  # Adam —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–ª–∏–∑–∫–∏–º–∏ –∫ RMSprop
            learning_rate_init=self.learning_rate,
            max_iter=400,  # –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Ç–∞—Ç—å–∏
            random_state=random_state,
            early_stopping=True,
            validation_fraction=0.1,
            n_iter_no_change=50,
            batch_size=32,
            momentum=self.momentum,  # –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Ç–∞—Ç—å–∏
            beta_1=0.9,  # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç momentum –≤ RMSprop
            beta_2=0.999,  # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç rho –≤ RMSprop
        )
        return model
    
    def train_multiple_models(self, X_train, y_train, X_test, y_test, n_runs=5):
        """–û–±—É—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Å—Ç–∞—Ç—å–∏"""
        print(f"\nüîÑ –ú–ù–û–ì–û–ö–†–ê–¢–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô ({n_runs} —Ä–∞–∑)")
        print("="*70)
        print("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Ç–∞—Ç—å–∏:")
        print("   - –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç RMSprop (Adam —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)")
        print("   - Learning Rate: 0.001")
        print("   - Momentum: 0.3")
        print("   - –≠–ø–æ—Ö–∏: 400")
        print("="*70)
        
        for run in range(n_runs):
            print(f"\nüöÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ #{run + 1}/{n_runs}")
            print("-" * 50)
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
            model = self.create_model(random_state=42 + run)
            
            # –û–±—É—á–µ–Ω–∏–µ
            print("üìö –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (400 —ç–ø–æ—Ö)...")
            model.fit(X_train, y_train)
            
            # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
            val_accuracy = model.score(X_test, y_test)
            print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ #{run + 1}: {val_accuracy:.4f}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
            model_info = {
                'model': model,
                'accuracy': val_accuracy,
                'run': run + 1,
                'n_iterations': model.n_iter_,
                'loss_curve': model.loss_curve_
            }
            
            self.models.append(model_info)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
            if val_accuracy > self.best_accuracy:
                self.best_accuracy = val_accuracy
                self.best_model = model
                self.best_run = run + 1
                
        print(f"\n‚úÖ –õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: Run #{self.best_run} —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {self.best_accuracy:.4f}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with open('alexnet_simulation_results.pkl', 'wb') as f:
            pickle.dump(self.models, f)
            
        return self.best_model, self.models

def test_with_gaussian_noise_article_method(model, X_test, y_test, tree_types, noise_levels):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–º —à—É–º–æ–º - —Ç–æ—á–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏–∑ —Å—Ç–∞—Ç—å–∏
    """
    print("\n" + "="*70)
    print("üé≤ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ì–ê–£–°–°–û–í–°–ö–ò–ú –®–£–ú–û–ú")
    print("üìã –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –°–¢–ê–¢–¨–ò:")
    print("   - –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞")
    print("   - 1000 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞")
    print("   - –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–º–Ω–µ–Ω–∞")
    print("="*70)
    
    n_realizations = 1000
    results = {}
    
    for noise_level in noise_levels:
        print(f"\nüîä –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level * 100:.1f}%")
        print("-" * 50)
        
        accuracies = []
        all_predictions = []
        all_true_labels = []
        
        # 1000 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π —à—É–º–∞
        for realization in range(n_realizations):
            if realization % 100 == 0:
                print(f"  –†–µ–∞–ª–∏–∑–∞—Ü–∏—è {realization + 1}/1000...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–π —à—É–º
            if noise_level > 0:
                noise = np.random.normal(0, noise_level, X_test.shape).astype(np.float32)
                X_test_noisy = X_test + noise
            else:
                X_test_noisy = X_test
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            y_pred = model.predict(X_test_noisy)
            accuracy = accuracy_score(y_test, y_pred)
            accuracies.append(accuracy)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–µ—Ä–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            if realization == 0:
                all_predictions = y_pred
                all_true_labels = y_test
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mean_accuracy = np.mean(accuracies)
        std_accuracy = np.std(accuracies)
        
        print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {mean_accuracy:.4f} ¬± {std_accuracy:.4f}")
        print(f"üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {np.min(accuracies):.4f}")
        print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {np.max(accuracies):.4f}")
        
        # –û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print(f"\nüìã –û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—à—É–º {noise_level * 100:.1f}%):")
        print(classification_report(all_true_labels, all_predictions, 
                                  target_names=tree_types, digits=4))
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
        cm = confusion_matrix(all_true_labels, all_predictions)
        print("\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
        print(cm)
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
        print(f"\n‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
        class_accuracies = cm.diagonal() / cm.sum(axis=1)
        for i, tree in enumerate(tree_types):
            print(f"  {tree}: {class_accuracies[i]:.4f}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results[noise_level] = {
            'mean_accuracy': mean_accuracy,
            'std_accuracy': std_accuracy,
            'min_accuracy': np.min(accuracies),
            'max_accuracy': np.max(accuracies),
            'class_accuracies': class_accuracies,
            'confusion_matrix': cm,
            'all_accuracies': accuracies
        }
    
    return results

def save_results_to_file(results, tree_types, best_model_info, simulator):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    with open('results_analysis.txt', 'w', encoding='utf-8') as f:
        f.write("=" * 70 + "\n")
        f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –†–ê–°–¢–ò–¢–ï–õ–¨–ù–û–°–¢–ò 1D-AlexNet\n")
        f.write("–°–ò–ú–£–õ–Ø–¶–ò–Ø –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò –°–¢–ê–¢–¨–ò\n")
        f.write("=" * 70 + "\n\n")
        
        f.write("–ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–£–ß–ï–ù–ò–Ø (—Å–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç—å–∏):\n")
        f.write("- –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç RMSprop (Adam —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)\n")
        f.write("- Learning Rate: 0.001\n")
        f.write("- Momentum: 0.3\n")
        f.write("- –≠–ø–æ—Ö–∏: 400\n")
        f.write("- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π —à—É–º–∞: 1000\n")
        f.write("- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 4096-4096-256 (–ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏)\n\n")
        
        f.write(f"–õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: Run #{best_model_info['run']} —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {best_model_info['accuracy']:.4f}\n")
        f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {best_model_info['n_iterations']}\n\n")
        
        for noise_level, result in results.items():
            f.write(f"–£–†–û–í–ï–ù–¨ –®–£–ú–ê: {noise_level * 100:.1f}%\n")
            f.write("-" * 50 + "\n")
            f.write(f"–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['mean_accuracy']:.4f} ¬± {result['std_accuracy']:.4f}\n")
            f.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['min_accuracy']:.4f}\n")
            f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result['max_accuracy']:.4f}\n\n")
            
            f.write("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:\n")
            for i, tree in enumerate(tree_types):
                f.write(f"  {tree}: {result['class_accuracies'][i]:.4f}\n")
            f.write("\n")
            
            f.write("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:\n")
            f.write(str(result['confusion_matrix']) + "\n\n")
        
        f.write("=" * 70 + "\n")
        f.write("–û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´:\n")
        f.write("1. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n")
        f.write("   - –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç RMSprop (Adam —Å momentum=0.3)\n")
        f.write("   - Learning Rate: 0.001\n")
        f.write("   - –≠–ø–æ—Ö–∏: 400\n")
        f.write("   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 4096-4096-256\n\n")
        f.write("2. –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞.\n")
        f.write("   –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∞—Å—å.\n\n")
        f.write("3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞—Ç—å–µ:\n")
        f.write("   - Rate=0.001 ‚úì\n")
        f.write("   - Moment=0.3 ‚úì\n")
        f.write("   - Epochs=400 ‚úì\n")
        f.write("   - Noise realizations=1000 ‚úì\n")
        f.write("   - –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç RMSprop ‚úì\n")
        f.write("=" * 70 + "\n")

def plot_noise_analysis(results, tree_types):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É"""
    noise_levels = list(results.keys())
    mean_accuracies = [results[noise]['mean_accuracy'] for noise in noise_levels]
    std_accuracies = [results[noise]['std_accuracy'] for noise in noise_levels]
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    plt.figure(figsize=(15, 10))
    
    plt.subplot(2, 2, 1)
    plt.errorbar([n*100 for n in noise_levels], mean_accuracies, yerr=std_accuracies, 
                marker='o', capsize=5, capthick=2, linewidth=2)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    plt.title('–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å 1D-AlexNet –∫ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–º—É —à—É–º—É')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    plt.subplot(2, 2, 2)
    for i, tree in enumerate(tree_types):
        class_accs = [results[noise]['class_accuracies'][i] for noise in noise_levels]
        plt.plot([n*100 for n in noise_levels], class_accs, marker='o', label=tree)
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º')
    plt.title('–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –≤–∏–¥–∞–º —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–æ—á–Ω–æ—Å—Ç–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —à—É–º–∞
    plt.subplot(2, 2, 3)
    max_noise = max(noise_levels)
    accuracies = results[max_noise]['all_accuracies']
    plt.hist(accuracies, bins=50, alpha=0.7, edgecolor='black')
    plt.xlabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ (—à—É–º {max_noise*100}%)')
    plt.grid(True, alpha=0.3)
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
    plt.subplot(2, 2, 4)
    cm = results[0.0]['confusion_matrix']  # –ë–µ–∑ —à—É–º–∞
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (–±–µ–∑ —à—É–º–∞)')
    plt.colorbar()
    tick_marks = np.arange(len(tree_types))
    plt.xticks(tick_marks, tree_types, rotation=45)
    plt.yticks(tick_marks, tree_types)
    
    plt.tight_layout()
    plt.savefig('1d_alexnet_noise_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ 1D-AlexNet –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç—å–µ"""
    print("üå≤ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –†–ê–°–¢–ò–¢–ï–õ–¨–ù–û–°–¢–ò –° 1D-AlexNet")
    print("=" * 70)
    print("üìÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò –°–¢–ê–¢–¨–ò")
    print("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: RMSprop, Rate=0.001, Moment=0.3, Epochs=400")
    print("=" * 70)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    spectra, labels, tree_types = load_spectral_data()

    if len(spectra) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    X, y, label_encoder, input_length = preprocess_spectra_for_1d_alexnet(spectra, labels, target_length=300)

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 50/50
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42, stratify=y)
    print(f"\nüìè –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape}")
    print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape}")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ AlexNet
    simulator = AlexNetSimulator(input_length, len(tree_types))
    
    # –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    best_model, all_models = simulator.train_multiple_models(
        X_train_scaled, y_train, X_test_scaled, y_test, n_runs=5
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    best_model_info = next(m for m in all_models if m['model'] == best_model)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º (0%, 1%, 5%, 10% –∫–∞–∫ –≤ —Å—Ç–∞—Ç—å–µ)
    noise_levels = [0.0, 0.01, 0.05, 0.1]
    
    results = test_with_gaussian_noise_article_method(
        best_model, X_test_scaled, y_test, tree_types, noise_levels
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_results_to_file(results, tree_types, best_model_info, simulator)
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    plot_noise_analysis(results, tree_types)
    
    print("\n" + "="*70)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Å—Ç–∞—Ç—å–∏:")
    print(f"   - –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: Run #{best_model_info['run']}")
    print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: {best_model_info['accuracy']:.4f}")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {best_model_info['n_iterations']}")
    print("   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç RMSprop, Rate=0.001, Moment=0.3")
    print("   - –≠–ø–æ—Ö–∏: 400")
    print("   - –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞")
    print("   - 1000 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞")
    print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print("   - results_analysis.txt (–¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)")
    print("   - alexnet_simulation_results.pkl (–º–æ–¥–µ–ª–∏)")
    print("   - 1d_alexnet_noise_analysis.png (–≥—Ä–∞—Ñ–∏–∫–∏)")
    print("="*70)

if __name__ == "__main__":
    main() 