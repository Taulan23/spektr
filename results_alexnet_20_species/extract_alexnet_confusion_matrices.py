#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–û–ß–ù–´–• CONFUSION MATRICES –î–õ–Ø 1D ALEXNET (20 –í–ò–î–û–í)
"""

import numpy as np
import pandas as pd
from datetime import datetime

def extract_confusion_matrices():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ confusion matrices –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞"""
    
    # –í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤ (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏)
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑–∞–º–∏—á–µ—Å–∫–∏–π', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∏–¥–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞ (–∏–∑ alexnet_20_noise_analysis_report)
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    # –û–±—â–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    general_accuracies = {
        0: 0.993,
        1: 0.972,
        5: 0.648,
        10: 0.337,
        20: 0.123
    }
    
    print("üìä –¢–û–ß–ù–´–ï –ß–ò–°–õ–û–í–´–ï –î–ê–ù–ù–´–ï 1D ALEXNET (20 –í–ò–î–û–í)")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df_data = []
    
    for noise_level in [0, 1, 5, 10, 20]:
        print(f"\nüîä –£–†–û–í–ï–ù–¨ –®–£–ú–ê: {noise_level}%")
        print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {general_accuracies[noise_level]:.3f} ({general_accuracies[noise_level]*100:.1f}%)")
        print("-" * 50)
        
        print("–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –≤–∏–¥–∞–º:")
        for i, species in enumerate(species_names):
            accuracy = species_accuracies[noise_level][i]
            print(f"  {species:25}: {accuracy:.3f}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
            df_data.append({
                'noise_level': f'{noise_level}%',
                'species': species,
                'accuracy': accuracy
            })
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    df = pd.DataFrame(df_data)
    pivot_table = df.pivot(index='species', columns='noise_level', values='accuracy')
    
    print("\n" + "=" * 80)
    print("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –¢–û–ß–ù–û–°–¢–ï–ô –ü–û –í–ò–î–ê–ú")
    print("=" * 80)
    print(pivot_table.round(3))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_filename = f'alexnet_20_species_detailed_results_{timestamp}.csv'
    pivot_table.to_csv(csv_filename)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    txt_filename = f'alexnet_20_species_confusion_data_{timestamp}.txt'
    
    with open(txt_filename, 'w', encoding='utf-8') as f:
        f.write("–¢–û–ß–ù–´–ï –ß–ò–°–õ–û–í–´–ï –î–ê–ù–ù–´–ï 1D ALEXNET (20 –í–ò–î–û–í)\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("–û–ë–©–ò–ï –¢–û–ß–ù–û–°–¢–ò –ü–û –£–†–û–í–ù–Ø–ú –®–£–ú–ê:\n")
        f.write("-" * 40 + "\n")
        for noise_level in [0, 1, 5, 10, 20]:
            f.write(f"{noise_level:2}% —à—É–º–∞: {general_accuracies[noise_level]:.4f} ({general_accuracies[noise_level]*100:.1f}%)\n")
        
        f.write("\n\n–î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –í–ò–î–ê–ú:\n")
        f.write("=" * 80 + "\n")
        f.write(f"{'–í–∏–¥':25} | {'0%':8} | {'1%':8} | {'5%':8} | {'10%':8} | {'20%':8}\n")
        f.write("-" * 80 + "\n")
        
        for i, species in enumerate(species_names):
            line = f"{species:25} |"
            for noise_level in [0, 1, 5, 10, 20]:
                accuracy = species_accuracies[noise_level][i]
                line += f" {accuracy:7.3f} |"
            f.write(line + "\n")
        
        f.write("\n\n–ê–ù–ê–õ–ò–ó –î–ï–ì–†–ê–î–ê–¶–ò–ò:\n")
        f.write("-" * 40 + "\n")
        for i, species in enumerate(species_names):
            degradation = species_accuracies[0][i] - species_accuracies[20][i]
            status = "–£–°–¢–û–ô–ß–ò–í" if degradation < 0.5 else "–£–ú–ï–†–ï–ù–ù–û" if degradation < 0.8 else "–ß–£–í–°–¢–í–ò–¢–ï–õ–ï–ù"
            f.write(f"{species:25}: –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è {degradation:.3f} ({status})\n")
    
    print(f"\nüíæ –§–ê–ô–õ–´ –°–û–•–†–ê–ù–ï–ù–´:")
    print(f"üìä CSV —Ç–∞–±–ª–∏—Ü–∞: {csv_filename}")
    print(f"üìã –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {txt_filename}")
    
    return pivot_table, csv_filename, txt_filename

def create_comparison_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Extra Trees"""
    
    print("\n" + "üî¨" * 30)
    print("üî¨ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –°–†–ê–í–ù–ï–ù–ò–Æ –° EXTRA TREES")
    print("üî¨" * 30)
    
    # –î–∞–Ω–Ω—ã–µ Alexnet –Ω–∞ 20% —à—É–º–∞ (–∫–ª—é—á–µ–≤—ã–µ –≤–∏–¥—ã)
    alexnet_20_results = {
        '–±–µ—Ä–µ–∑–∞': 0.667,
        '–¥—É–±': 0.000,
        '–µ–ª—å': 0.000,
        '–µ–ª—å_–≥–æ–ª—É–±–∞—è': 0.400,
        '–∏–≤–∞': 0.367,
        '–∫–∞—à—Ç–∞–Ω': 0.233,
        '–∫–ª–µ–Ω': 0.000,
        '–∫–ª–µ–Ω_–∞–º': 0.000,
        '–ª–∏–ø–∞': 0.000,
        '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞': 0.000,
        '–æ—Ä–µ—Ö': 0.000,
        '–æ—Å–∏–Ω–∞': 0.000,
        '—Ä—è–±–∏–Ω–∞': 0.000,
        '—Å–∏—Ä–µ–Ω—å': 0.467,
        '—Å–æ—Å–Ω–∞': 0.000,
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑–∞–º–∏—á–µ—Å–∫–∏–π': 0.100,
        '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π': 0.000,
        '—Ç—É—è': 0.000,
        '—á–µ—Ä–µ–º—É—Ö–∞': 0.000,
        '—è—Å–µ–Ω—å': 0.233
    }
    
    print("üìä 1D ALEXNET –ù–ê 20% –®–£–ú–ê:")
    print("-" * 40)
    
    working_species = []
    failed_species = []
    
    for species, accuracy in alexnet_20_results.items():
        print(f"  {species:25}: {accuracy:.3f}")
        if accuracy > 0.3:
            working_species.append(species)
        else:
            failed_species.append(species)
    
    print(f"\n‚úÖ –í–ò–î–´ –° –ü–†–ò–ï–ú–õ–ï–ú–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ (>30%): {len(working_species)}")
    for species in working_species:
        print(f"   ‚Ä¢ {species}: {alexnet_20_results[species]:.3f}")
    
    print(f"\n‚ùå –í–ò–î–´ –° –ö–†–ò–¢–ò–ß–ù–û –ù–ò–ó–ö–û–ô –¢–û–ß–ù–û–°–¢–¨–Æ (<30%): {len(failed_species)}")
    for species in failed_species:
        print(f"   ‚Ä¢ {species}: {alexnet_20_results[species]:.3f}")
    
    print(f"\nüìà –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨ ALEXNET –ù–ê 20% –®–£–ú–ê: 12.3%")
    print(f"üéØ –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Extra Trees –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —à—É–º–∞")
    
    return alexnet_20_results

if __name__ == "__main__":
    print("üå≤ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• 1D ALEXNET")
    print("=" * 50)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    pivot_table, csv_file, txt_file = extract_confusion_matrices()
    
    # –ì–æ—Ç–æ–≤–∏–º –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
    alexnet_results = create_comparison_table()
    
    print(f"\nüéØ –ì–û–¢–û–í–û! –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!") 