#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–û–ó–î–ê–ù–ò–ï PNG CONFUSION MATRICES –î–õ–Ø –í–°–ï–• –£–†–û–í–ù–ï–ô –®–£–ú–ê
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

def create_confusion_matrices_all_noise_levels():
    """–°–æ–∑–¥–∞–µ—Ç PNG confusion matrices –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞"""
    
    # –í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤ (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏)
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑.', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    # –¢–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∏–¥–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    # –û–±—â–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    general_accuracies = {
        0: 0.993, 1: 0.972, 5: 0.648, 10: 0.337, 20: 0.123
    }
    
    # –°–æ–∑–¥–∞–µ–º confusion matrices (–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    n_species = len(species_names)
    
    print("üñºÔ∏è –°–û–ó–î–ê–ù–ò–ï PNG CONFUSION MATRICES")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É —Å 5 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(2, 3, figsize=(24, 16))
    axes = axes.flatten()
    
    noise_levels = [0, 1, 5, 10, 20]
    
    for idx, noise_level in enumerate(noise_levels):
        ax = axes[idx]
        
        # –°–æ–∑–¥–∞–µ–º confusion matrix 
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º—ã –∏–º–µ–µ–º 30 –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        samples_per_class = 30
        cm = np.zeros((n_species, n_species))
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        for i in range(n_species):
            accuracy = species_accuracies[noise_level][i]
            correct_predictions = int(accuracy * samples_per_class)
            cm[i, i] = correct_predictions
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—à–∏–±–∫–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–∞–º
            errors = samples_per_class - correct_predictions
            if errors > 0:
                error_per_class = errors / (n_species - 1)
                for j in range(n_species):
                    if i != j:
                        cm[i, j] = error_per_class
        
        # –°–æ–∑–¥–∞–µ–º heatmap
        sns.heatmap(cm, 
                   xticklabels=species_names, 
                   yticklabels=species_names,
                   annot=True, 
                   fmt='.0f',
                   cmap='Blues',
                   ax=ax,
                   cbar_kws={'shrink': 0.8})
        
        ax.set_title(f'–®—É–º {noise_level}%\n–¢–æ—á–Ω–æ—Å—Ç—å: {general_accuracies[noise_level]:.1%}', 
                    fontsize=14, fontweight='bold', pad=20)
        ax.set_xlabel('Predicted', fontsize=12)
        ax.set_ylabel('True', fontsize=12)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        ax.set_xticklabels(species_names, rotation=45, ha='right', fontsize=10)
        ax.set_yticklabels(species_names, rotation=0, fontsize=10)
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Å—Ç–æ–π –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫
    axes[5].remove()
    
    # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('1D ALEXNET: CONFUSION MATRICES –î–õ–Ø –†–ê–ó–ù–´–• –£–†–û–í–ù–ï–ô –®–£–ú–ê\n' +
                 '20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ - –ê–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–º—É —à—É–º—É',
                 fontsize=18, fontweight='bold', y=0.98)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'alexnet_20_confusion_matrices_all_noise_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    
    return filename

def create_individual_confusion_matrices():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ PNG —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞"""
    
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑.', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    general_accuracies = {
        0: 0.993, 1: 0.972, 5: 0.648, 10: 0.337, 20: 0.123
    }
    
    n_species = len(species_names)
    samples_per_class = 30
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    created_files = []
    
    for noise_level in [0, 1, 5, 10, 20]:
        print(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ confusion matrix –¥–ª—è {noise_level}% —à—É–º–∞...")
        
        # –°–æ–∑–¥–∞–µ–º confusion matrix
        cm = np.zeros((n_species, n_species))
        
        for i in range(n_species):
            accuracy = species_accuracies[noise_level][i]
            correct_predictions = int(accuracy * samples_per_class)
            cm[i, i] = correct_predictions
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—à–∏–±–∫–∏
            errors = samples_per_class - correct_predictions
            if errors > 0:
                error_per_class = errors / (n_species - 1)
                for j in range(n_species):
                    if i != j:
                        cm[i, j] = error_per_class
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä—É
        plt.figure(figsize=(16, 14))
        
        # Heatmap —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
        sns.heatmap(cm, 
                   xticklabels=species_names, 
                   yticklabels=species_names,
                   annot=True, 
                   fmt='.1f',
                   cmap='Blues',
                   square=True,
                   linewidths=0.5,
                   cbar_kws={'shrink': 0.8})
        
        plt.title(f'1D ALEXNET: CONFUSION MATRIX\n' +
                 f'–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level}% | –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {general_accuracies[noise_level]:.1%}',
                 fontsize=16, fontweight='bold', pad=20)
        
        plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=14)
        plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=14)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏
        plt.xticks(rotation=45, ha='right', fontsize=11)
        plt.yticks(rotation=0, fontsize=11)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f'alexnet_20_confusion_matrix_{noise_level}percent_{timestamp}.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        created_files.append(filename)
        print(f"  ‚úÖ {filename}")
    
    return created_files

def create_accuracy_degradation_chart():
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑.', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    general_accuracies = [0.993, 0.972, 0.648, 0.337, 0.123]
    noise_levels = [0, 1, 5, 10, 20]
    
    plt.figure(figsize=(20, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    plt.subplot(2, 2, 1)
    plt.plot(noise_levels, [acc*100 for acc in general_accuracies], 
             'ro-', linewidth=4, markersize=12, markerfacecolor='red')
    plt.title('–û–±—â–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)', fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 105)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    for i, (noise, acc) in enumerate(zip(noise_levels, general_accuracies)):
        plt.annotate(f'{acc:.1%}', (noise, acc*100), 
                    textcoords="offset points", xytext=(0,10), ha='center')
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–æ–ø-5 –≤–∏–¥–∞–º
    plt.subplot(2, 2, 2)
    top_species = ['–µ–ª—å_–≥–æ–ª—É–±–∞—è', '—Å–∏—Ä–µ–Ω—å', '–±–µ—Ä–µ–∑–∞', '–∫–ª–µ–Ω', '—Å–æ—Å–Ω–∞']
    top_indices = [species_names.index(sp) for sp in top_species]
    
    for i, species_idx in enumerate(top_indices):
        species_data = [species_accuracies[noise][species_idx]*100 for noise in noise_levels]
        plt.plot(noise_levels, species_data, 'o-', label=top_species[i], linewidth=2, markersize=8)
    
    plt.title('–¢–æ–ø-5 —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –≤–∏–¥–æ–≤', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)', fontsize=12)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 105)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ö—É–¥—à–∏–º –≤–∏–¥–∞–º
    plt.subplot(2, 2, 3)
    worst_species = ['–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '—Å–æ—Å–Ω–∞']
    worst_indices = [species_names.index(sp) for sp in worst_species]
    
    for i, species_idx in enumerate(worst_indices):
        species_data = [species_accuracies[noise][species_idx]*100 for noise in noise_levels]
        plt.plot(noise_levels, species_data, 'o-', label=worst_species[i], linewidth=2, markersize=8)
    
    plt.title('–ù–∞–∏–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)', fontsize=12)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 105)
    
    # Heatmap –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    plt.subplot(2, 2, 4)
    
    degradation_matrix = []
    for i, species in enumerate(species_names):
        degradation = []
        for noise in noise_levels:
            degradation.append(species_accuracies[noise][i])
        degradation_matrix.append(degradation)
    
    degradation_matrix = np.array(degradation_matrix)
    
    sns.heatmap(degradation_matrix, 
               xticklabels=[f'{n}%' for n in noise_levels],
               yticklabels=species_names,
               annot=True, 
               fmt='.2f',
               cmap='RdYlGn',
               cbar_kws={'label': '–¢–æ—á–Ω–æ—Å—Ç—å'})
    
    plt.title('Heatmap –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–¥–∞–º', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞', fontsize=12)
    plt.ylabel('–í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤', fontsize=12)
    
    plt.tight_layout()
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'alexnet_20_accuracy_degradation_analysis_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìà –ì—Ä–∞—Ñ–∏–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    return filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üñºÔ∏è" * 50)
    print("üñºÔ∏è –°–û–ó–î–ê–ù–ò–ï PNG CONFUSION MATRICES –î–õ–Ø –í–°–ï–• –£–†–û–í–ù–ï–ô –®–£–ú–ê")
    print("üñºÔ∏è" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç—Ä–∏—Ü–∞–º–∏
    combined_file = create_confusion_matrices_all_noise_levels()
    
    print("\n" + "üìä" * 50)
    print("üìä –°–û–ó–î–ê–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• CONFUSION MATRICES")
    print("üìä" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    individual_files = create_individual_confusion_matrices()
    
    print("\n" + "üìà" * 50)
    print("üìà –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –î–ï–ì–†–ê–î–ê–¶–ò–ò")
    print("üìà" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    degradation_file = create_accuracy_degradation_chart()
    
    print(f"\nüéâ –í–°–ï PNG –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´!")
    print(f"üìÅ –§–∞–π–ª—ã:")
    print(f"   üñºÔ∏è –û–±—â–∏–π: {combined_file}")
    for file in individual_files:
        noise_level = file.split('_')[4].replace('percent', '')
        print(f"   üìä {noise_level}% —à—É–º–∞: {file}")
    print(f"   üìà –ê–Ω–∞–ª–∏–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏: {degradation_file}")

if __name__ == "__main__":
    main() 