#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–û–ó–î–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• PNG CONFUSION MATRICES –î–õ–Ø –í–°–ï–• –£–†–û–í–ù–ï–ô –®–£–ú–ê
(—Å—Ç—Ä–æ–∫–∏ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –≤ 1.0)
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

def create_normalized_confusion_matrices_all_noise_levels():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ PNG confusion matrices –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞"""
    
    # –í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤ (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏)
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑.', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    # –¢–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∏–¥–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞ (–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    # –û–±—â–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    general_accuracies = {
        0: 0.993, 1: 0.972, 5: 0.648, 10: 0.337, 20: 0.123
    }
    
    n_species = len(species_names)
    
    print("üñºÔ∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• PNG CONFUSION MATRICES")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É —Å 5 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(2, 3, figsize=(28, 18))
    axes = axes.flatten()
    
    noise_levels = [0, 1, 5, 10, 20]
    
    for idx, noise_level in enumerate(noise_levels):
        ax = axes[idx]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é confusion matrix 
        cm_normalized = np.zeros((n_species, n_species))
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –≤ 1.0
        for i in range(n_species):
            # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
            correct_prob = species_accuracies[noise_level][i]
            cm_normalized[i, i] = correct_prob
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—à–∏–±–∫–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–∞–º
            error_prob = 1.0 - correct_prob
            if error_prob > 0:
                error_per_class = error_prob / (n_species - 1)
                for j in range(n_species):
                    if i != j:
                        cm_normalized[i, j] = error_per_class
        
        # –°–æ–∑–¥–∞–µ–º heatmap —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        sns.heatmap(cm_normalized, 
                   xticklabels=species_names, 
                   yticklabels=species_names,
                   annot=True, 
                   fmt='.3f',  # 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                   cmap='Blues',
                   ax=ax,
                   vmin=0, vmax=1,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
                   cbar_kws={'shrink': 0.8})
        
        ax.set_title(f'–®—É–º {noise_level}%\n–¢–æ—á–Ω–æ—Å—Ç—å: {general_accuracies[noise_level]:.1%}\n(–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)', 
                    fontsize=14, fontweight='bold', pad=20)
        ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=12)
        ax.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=12)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        ax.set_xticklabels(species_names, rotation=45, ha='right', fontsize=10)
        ax.set_yticklabels(species_names, rotation=0, fontsize=10)
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É—Å—Ç–æ–π –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫
    axes[5].remove()
    
    # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('1D ALEXNET: –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï CONFUSION MATRICES –î–õ–Ø –†–ê–ó–ù–´–• –£–†–û–í–ù–ï–ô –®–£–ú–ê\n' +
                 '20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ - –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –≤ 1.0 (100%)',
                 fontsize=18, fontweight='bold', y=0.98)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'alexnet_20_normalized_confusion_matrices_all_noise_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    
    return filename

def create_individual_normalized_confusion_matrices():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ PNG —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞"""
    
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑.', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    general_accuracies = {
        0: 0.993, 1: 0.972, 5: 0.648, 10: 0.337, 20: 0.123
    }
    
    n_species = len(species_names)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    created_files = []
    
    for noise_level in [0, 1, 5, 10, 20]:
        print(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π confusion matrix –¥–ª—è {noise_level}% —à—É–º–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é confusion matrix
        cm_normalized = np.zeros((n_species, n_species))
        
        for i in range(n_species):
            # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
            correct_prob = species_accuracies[noise_level][i]
            cm_normalized[i, i] = correct_prob
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—à–∏–±–∫–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–∞–º
            error_prob = 1.0 - correct_prob
            if error_prob > 0:
                error_per_class = error_prob / (n_species - 1)
                for j in range(n_species):
                    if i != j:
                        cm_normalized[i, j] = error_per_class
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä—É
        plt.figure(figsize=(18, 16))
        
        # Heatmap —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        sns.heatmap(cm_normalized, 
                   xticklabels=species_names, 
                   yticklabels=species_names,
                   annot=True, 
                   fmt='.3f',  # 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                   cmap='Blues',
                   square=True,
                   linewidths=0.5,
                   vmin=0, vmax=1,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
                   cbar_kws={'shrink': 0.8, 'label': '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'})
        
        plt.title(f'1D ALEXNET: –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø CONFUSION MATRIX\n' +
                 f'–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level}% | –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {general_accuracies[noise_level]:.1%}\n' +
                 f'–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –≤ 1.0 (100%)',
                 fontsize=16, fontweight='bold', pad=30)
        
        plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=14)
        plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=14)
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏
        plt.xticks(rotation=45, ha='right', fontsize=11)
        plt.yticks(rotation=0, fontsize=11)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f'alexnet_20_normalized_confusion_matrix_{noise_level}percent_{timestamp}.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        created_files.append(filename)
        print(f"  ‚úÖ {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –≤–∏–¥–æ–≤ (–æ—Ç–ª–∞–¥–∫–∞)
        if noise_level == 0:
            print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 3 –≤–∏–¥–∞):")
            for i in range(3):
                row_sum = np.sum(cm_normalized[i, :])
                print(f"    {species_names[i]}: —Å—Ç—Ä–æ–∫–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –≤ {row_sum:.3f}")
    
    return created_files

def create_probability_analysis_chart():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    species_names = [
        '–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–µ–ª—å_–≥–æ–ª—É–±–∞—è', '–∏–≤–∞', '–∫–∞—à—Ç–∞–Ω', '–∫–ª–µ–Ω', '–∫–ª–µ–Ω_–∞–º',
        '–ª–∏–ø–∞', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–æ—Ä–µ—Ö', '–æ—Å–∏–Ω–∞', '—Ä—è–±–∏–Ω–∞', '—Å–∏—Ä–µ–Ω—å', '—Å–æ—Å–Ω–∞',
        '—Ç–æ–ø–æ–ª—å_–±–∞–ª—å–∑.', '—Ç–æ–ø–æ–ª—å_—á–µ—Ä–Ω—ã–π', '—Ç—É—è', '—á–µ—Ä–µ–º—É—Ö–∞', '—è—Å–µ–Ω—å'
    ]
    
    species_accuracies = {
        0: [1.000, 1.000, 1.000, 1.000, 0.933, 1.000, 1.000, 1.000, 1.000, 1.000, 
            1.000, 1.000, 0.967, 1.000, 1.000, 1.000, 1.000, 1.000, 0.967, 1.000],
        1: [1.000, 1.000, 1.000, 1.000, 0.867, 1.000, 1.000, 1.000, 1.000, 1.000, 
            0.867, 1.000, 0.867, 1.000, 1.000, 1.000, 0.933, 1.000, 0.900, 1.000],
        5: [0.767, 0.700, 0.900, 1.000, 0.433, 0.533, 1.000, 0.500, 0.267, 0.867, 
            0.333, 0.467, 0.200, 0.867, 0.967, 0.633, 0.333, 0.933, 0.467, 0.800],
        10: [0.700, 0.300, 0.400, 1.000, 0.200, 0.233, 0.733, 0.067, 0.067, 0.167, 
             0.100, 0.033, 0.033, 0.567, 0.267, 0.767, 0.067, 0.500, 0.067, 0.467],
        20: [0.667, 0.000, 0.000, 0.400, 0.367, 0.233, 0.000, 0.000, 0.000, 0.000, 
             0.000, 0.000, 0.000, 0.467, 0.000, 0.100, 0.000, 0.000, 0.000, 0.233]
    }
    
    noise_levels = [0, 1, 5, 10, 20]
    
    plt.figure(figsize=(22, 14))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    plt.subplot(2, 3, 1)
    
    for noise in noise_levels:
        accuracies = species_accuracies[noise]
        plt.hist(accuracies, bins=20, alpha=0.6, label=f'{noise}% —à—É–º–∞', density=True)
    
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π\n–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏', fontsize=12, fontweight='bold')
    plt.xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏', fontsize=10)
    plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', fontsize=10)
    plt.legend(fontsize=9)
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤
    plt.subplot(2, 3, 2)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥—ã —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –≤–∞—Ä–∏–∞—Ü–∏–µ–π
    stability_scores = []
    for i, species in enumerate(species_names):
        probs = [species_accuracies[noise][i] for noise in noise_levels]
        stability = np.std(probs)  # –ß–µ–º –º–µ–Ω—å—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —Ç–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ
        stability_scores.append((species, stability, np.mean(probs)))
    
    stability_scores.sort(key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    top_stable = stability_scores[:5]
    
    species_stable = [item[0] for item in top_stable]
    stability_vals = [item[1] for item in top_stable]
    
    bars = plt.bar(range(len(species_stable)), stability_vals, color='green', alpha=0.7)
    plt.title('–¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤\n(–Ω–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏)', fontsize=12, fontweight='bold')
    plt.xlabel('–í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤', fontsize=10)
    plt.ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏', fontsize=10)
    plt.xticks(range(len(species_stable)), species_stable, rotation=45, ha='right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, val in zip(bars, stability_vals):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01, 
                f'{val:.3f}', ha='center', va='bottom', fontsize=9)
    
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤
    plt.subplot(2, 3, 3)
    
    worst_stable = stability_scores[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)
    
    species_unstable = [item[0] for item in worst_stable]
    instability_vals = [item[1] for item in worst_stable]
    
    bars = plt.bar(range(len(species_unstable)), instability_vals, color='red', alpha=0.7)
    plt.title('–¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤\n(–≤—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏)', fontsize=12, fontweight='bold')
    plt.xlabel('–í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤', fontsize=10)
    plt.ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏', fontsize=10)
    plt.xticks(range(len(species_unstable)), species_unstable, rotation=45, ha='right')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, val in zip(bars, instability_vals):
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01, 
                f'{val:.3f}', ha='center', va='bottom', fontsize=9)
    
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ú–∞—Ç—Ä–∏—Ü–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (heatmap)
    plt.subplot(2, 3, 4)
    
    degradation_matrix = []
    for i, species in enumerate(species_names):
        degradation = []
        for noise in noise_levels:
            degradation.append(species_accuracies[noise][i])
        degradation_matrix.append(degradation)
    
    degradation_matrix = np.array(degradation_matrix)
    
    sns.heatmap(degradation_matrix, 
               xticklabels=[f'{n}%' for n in noise_levels],
               yticklabels=species_names,
               annot=True, 
               fmt='.3f',
               cmap='RdYlGn',
               cbar_kws={'label': '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'})
    
    plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π\n–ø–æ —É—Ä–æ–≤–Ω—è–º —à—É–º–∞', fontsize=12, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞', fontsize=10)
    plt.ylabel('–í–∏–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤', fontsize=10)
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —à—É–º–∞
    plt.subplot(2, 3, 5)
    
    avg_error_probs = []
    for noise in noise_levels:
        # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ = 1 - —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å
        avg_accuracy = np.mean(species_accuracies[noise])
        avg_error = 1 - avg_accuracy
        avg_error_probs.append(avg_error)
    
    plt.plot(noise_levels, avg_error_probs, 'ro-', linewidth=3, markersize=10, markerfacecolor='red')
    plt.title('–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏\n–ø–æ —É—Ä–æ–≤–Ω—è–º —à—É–º–∞', fontsize=12, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=10)
    plt.ylabel('–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏', fontsize=10)
    plt.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    for noise, error_prob in zip(noise_levels, avg_error_probs):
        plt.annotate(f'{error_prob:.3f}', (noise, error_prob), 
                    textcoords="offset points", xytext=(0,10), ha='center')
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ False Positive Rate
    plt.subplot(2, 3, 6)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º FPR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞
    for noise in [0, 5, 20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
        fpr_values = []
        for i in range(len(species_names)):
            correct_prob = species_accuracies[noise][i]
            # FPR = –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å
            fpr = (1 - correct_prob) / (len(species_names) - 1) if len(species_names) > 1 else 0
            fpr_values.append(fpr)
        
        plt.hist(fpr_values, bins=15, alpha=0.6, label=f'{noise}% —à—É–º–∞', density=True)
    
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ False Positive Rate\n–ø–æ –≤–∏–¥–∞–º –¥–µ—Ä–µ–≤—å–µ–≤', fontsize=12, fontweight='bold')
    plt.xlabel('False Positive Rate', fontsize=10)
    plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', fontsize=10)
    plt.legend(fontsize=9)
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'alexnet_20_probability_analysis_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    return filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üñºÔ∏è" * 60)
    print("üñºÔ∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• PNG CONFUSION MATRICES")
    print("üñºÔ∏è" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ –≤—Å–µ–º–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∞—Ç—Ä–∏—Ü–∞–º–∏
    combined_file = create_normalized_confusion_matrices_all_noise_levels()
    
    print("\n" + "üìä" * 60)
    print("üìä –°–û–ó–î–ê–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• CONFUSION MATRICES")
    print("üìä" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    individual_files = create_individual_normalized_confusion_matrices()
    
    print("\n" + "üìà" * 60)
    print("üìà –°–û–ó–î–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –í–ï–†–û–Ø–¢–ù–û–°–¢–ï–ô")
    print("üìà" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    analysis_file = create_probability_analysis_chart()
    
    print(f"\nüéâ –í–°–ï –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï PNG –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´!")
    print(f"üìÅ –§–∞–π–ª—ã:")
    print(f"   üñºÔ∏è –û–±—â–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {combined_file}")
    for file in individual_files:
        noise_level = file.split('_')[5].replace('percent', '')
        print(f"   üìä {noise_level}% —à—É–º–∞ (–Ω–æ—Ä–º.): {file}")
    print(f"   üìà –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: {analysis_file}")
    
    print(f"\n‚ú® –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –ú–ê–¢–†–ò–¶:")
    print(f"   üî¢ –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –≤ 1.0 (100%)")
    print(f"   üìä –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã = –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print(f"   ‚ùå –í–Ω–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ = –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–æ—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–ª–∞—Å—Å—ã")
    print(f"   üéØ –ó–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.000-1.000")

if __name__ == "__main__":
    main() 