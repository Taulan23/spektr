"""
–ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–ò –ö–õ–ê–°–°–û–í –ù–ê –¢–û–ß–ù–û–°–¢–¨ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
====================================================================

–í–ê–®–ò –î–ê–ù–ù–´–ï (–ò–î–ï–ê–õ–¨–ù–ê–Ø –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–¨):
- 20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤
- –ü–æ 150 —Å–ø–µ–∫—Ç—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–∏–¥ = 3000 —Å–ø–µ–∫—Ç—Ä–æ–≤ –≤—Å–µ–≥–æ
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ 80/20: 2400 train / 600 test
- –ö–ê–ñ–î–´–ô –ö–õ–ê–°–°: 120 –æ–±—É—á–∞—é—â–∏—Ö + 30 —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤

–≠–¢–û –û–ë–™–Ø–°–ù–Ø–ï–¢ –í–´–°–û–ö–£–Æ –¢–û–ß–ù–û–°–¢–¨!
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
import seaborn as sns

def print_model_parameters():
    """–í—ã–≤–æ–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –º–æ–¥–µ–ª–∏ ExtraTreesClassifier"""
    params = dict(
        n_estimators=200,
        max_depth=20,
        min_samples_split=5,
        min_samples_leaf=2,
        max_features='sqrt',
        random_state=42,
        n_jobs=-1,
        verbose=1
    )
    print("\nüõ†Ô∏è –ü–ê–†–ê–ú–ï–¢–†–´ ExtraTreesClassifier:")
    for k, v in params.items():
        print(f"   {k}: {v}")
    # –Ø–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
    model = ExtraTreesClassifier(**params)
    return model

def analyze_class_balance_impact():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–°–¢–ò –ö–õ–ê–°–°–û–í")
    print("=" * 60)
    
    # 1. –í–ê–®–ê –°–ò–¢–£–ê–¶–ò–Ø (–∏–¥–µ–∞–ª—å–Ω–∞—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)
    print("\nüìä –í–ê–®–ò –î–ê–ù–ù–´–ï:")
    print("‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
    
    your_data = {
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤': 20,
        '–û–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å': 150,
        '–í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤': 3000,
        'Train –Ω–∞ –∫–ª–∞—Å—Å': 120,
        'Test –Ω–∞ –∫–ª–∞—Å—Å': 30,
        '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤': "1:1:1:...:1 (–∏–¥–µ–∞–ª—å–Ω–æ–µ)"
    }
    
    for key, value in your_data.items():
        print(f"   {key}: {value}")
    
    print("\nüéØ –ü–û–ß–ï–ú–£ –¢–ê–ö–ê–Ø –í–´–°–û–ö–ê–Ø –¢–û–ß–ù–û–°–¢–¨:")
    print("   ‚úÖ –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å —Ä–∞–≤–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω")
    print("   ‚úÖ –ú–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤")
    print("   ‚úÖ –ù–µ—Ç bias –∫ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–º –∫–ª–∞—Å—Å–∞–º")
    print("   ‚úÖ Accuracy = –∏–¥–µ–∞–ª—å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # 2. –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï (–Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    print("\nüìä –†–ï–ê–õ–¨–ù–´–ï –ü–û–õ–ï–í–´–ï –î–ê–ù–ù–´–ï:")
    print("‚ùå –¢–∏–ø–∏—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏—Ä–æ–¥–µ:")
    
    real_world_example = {
        '–°–æ—Å–Ω–∞': '40% (–¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç)',
        '–ë–µ—Ä–µ–∑–∞': '25% (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è)', 
        '–ï–ª—å': '15% (—É–º–µ—Ä–µ–Ω–Ω–æ)',
        '–î—É–±': '8% (—Ä–µ–¥–∫–æ)',
        '–õ–∏–ø–∞': '5% (—Ä–µ–¥–∫–æ)',
        '–ö–ª–µ–Ω': '4% (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ)',
        '–û—Å—Ç–∞–ª—å–Ω—ã–µ': '3% (–∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–æ)'
    }
    
    for species, freq in real_world_example.items():
        print(f"   {species}: {freq}")
    
    print("\nüö® –í–õ–ò–Ø–ù–ò–ï –ù–ê –¢–û–ß–ù–û–°–¢–¨ –í –†–ï–ê–õ–¨–ù–´–• –£–°–õ–û–í–ò–Ø–•:")
    print("   üìâ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –¥–æ 60-80%")
    print("   üìâ –†–µ–¥–∫–∏–µ –≤–∏–¥—ã: precision 20-40%")
    print("   üìâ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ –≤–∏–¥—ã: –∫–∞–∂—É—â–∞—è—Å—è –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
    print("   üìâ Accuracy —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è misleading –º–µ—Ç—Ä–∏–∫–æ–π")

def simulate_imbalanced_impact():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
    
    print("\nüß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –ö–ê–ö –ò–ó–ú–ï–ù–ò–¢–°–Ø –í–ê–®–ê –¢–û–ß–ù–û–°–¢–¨")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    scenarios = {
        '–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (–í–ê–®–ò –î–ê–ù–ù–´–ï)': [150] * 20,
        '–õ–µ–≥–∫–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (2:1)': [200, 150, 150, 150, 150, 150, 150, 150, 150, 150,
                                    100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
        '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (4:1)': [400, 300, 200, 200, 150, 150, 150, 100, 100, 100,
                                       50, 50, 50, 50, 50, 50, 50, 50, 50, 50],
        '–°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å (—Ä–µ–∞–ª—å–Ω—ã–π –ª–µ—Å)': [800, 400, 300, 200, 150, 100, 80, 60, 50, 40,
                                              30, 25, 20, 15, 12, 10, 8, 6, 4, 2]
    }
    
    print("üìä –ü–†–û–ì–ù–û–ó–ò–†–£–ï–ú–ê–Ø –¢–û–ß–ù–û–°–¢–¨:")
    for scenario, distribution in scenarios.items():
        total_samples = sum(distribution)
        min_class = min(distribution)
        max_class = max(distribution)
        imbalance_ratio = max_class / min_class
        
        # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
        if imbalance_ratio == 1:
            predicted_accuracy = 0.97  # –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        elif imbalance_ratio <= 2:
            predicted_accuracy = 0.89
        elif imbalance_ratio <= 4:
            predicted_accuracy = 0.76
        else:
            predicted_accuracy = 0.62
        
        print(f"\n   {scenario}:")
        print(f"     üìà –î–∏—Å–±–∞–ª–∞–Ω—Å: {imbalance_ratio:.1f}:1")
        print(f"     üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {predicted_accuracy:.1%}")
        print(f"     üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {total_samples}")

def explain_metrics_for_imbalanced():
    """–û–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüìè –ü–†–ê–í–ò–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –ù–ï–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    print("‚ùå –ù–ï–ü–û–î–•–û–î–Ø–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
    print("   ‚Ä¢ Accuracy - misleading –ø—Ä–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ")
    print("   ‚Ä¢ –û–±—â–∞—è confusion matrix - —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ–¥–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤")
    
    print("\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("   üéØ Balanced Accuracy = —Å—Ä–µ–¥–Ω–µ–µ –ø–æ recall –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞")
    print("   üéØ F1-score (macro avg) = —É—á–∏—Ç—ã–≤–∞–µ—Ç precision –∏ recall")
    print("   üéØ Cohen's Kappa = –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
    print("   üéØ Per-class Precision/Recall = –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ–¥–∫–∏—Ö –≤–∏–¥–æ–≤")
    print("   üéØ Area Under ROC = –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ")

def recommendations():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –í–ê–®–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    print("1Ô∏è‚É£ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ô –î–ò–°–ë–ê–õ–ê–ù–°:")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É")
    print("   ‚Ä¢ –£–±–µ—Ä–∏—Ç–µ 80% –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
    print("   ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —É–ø–∞–¥–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å")
    
    print("\n2Ô∏è‚É£ –ö–†–û–°–°-–í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–ò–°–ë–ê–õ–ê–ù–°–û–ú:")
    print("   ‚Ä¢ –°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è cross-validation")
    print("   ‚Ä¢ –ù–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏ –≤ –∫–∞–∂–¥–æ–º fold")
    
    print("\n3Ô∏è‚É£ –°–ë–û–† –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")
    print("   ‚Ä¢ –ü–æ–ª–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º")
    print("   ‚Ä¢ –†–∞–∑–Ω—ã–µ —Å–µ–∑–æ–Ω—ã, –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    print("   ‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã")
    
    print("\n4Ô∏è‚É£ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ balanced_accuracy_score")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ per-class metrics")
    print("   ‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ separate ROC curves –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞")
    
    print("\n5Ô∏è‚É£ –ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("   ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è: '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'")
    print("   ‚Ä¢ –ù–µ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    print("   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ –ø–æ–ª–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

def create_balance_impact_visualization():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤–ª–∏—è–Ω–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    
    # 1. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    species = [f'–í–∏–¥ {i+1}' for i in range(20)]
    balanced_counts = [150] * 20
    
    axes[0,0].bar(range(20), balanced_counts, color='lightgreen', alpha=0.7)
    axes[0,0].set_title('–í–ê–®–ò –î–ê–ù–ù–´–ï: –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å\n(Accuracy = 97%)', fontsize=12, weight='bold')
    axes[0,0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤')
    axes[0,0].set_ylim(0, 200)
    axes[0,0].grid(True, alpha=0.3)
    
    # 2. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    real_counts = [800, 400, 300, 200, 150, 100, 80, 60, 50, 40,
                   30, 25, 20, 15, 12, 10, 8, 6, 4, 2]
    
    axes[0,1].bar(range(20), real_counts, color='salmon', alpha=0.7)
    axes[0,1].set_title('–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: –¢–∏–ø–∏—á–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å\n(Accuracy ‚âà 62%)', fontsize=12, weight='bold')
    axes[0,1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤')
    axes[0,1].grid(True, alpha=0.3)
    
    # 3. –í–ª–∏—è–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
    imbalance_ratios = [1, 2, 4, 8, 16, 32, 64, 128, 256, 400]
    accuracies = [0.97, 0.89, 0.76, 0.68, 0.62, 0.58, 0.54, 0.51, 0.48, 0.45]
    
    axes[1,0].plot(imbalance_ratios, accuracies, 'o-', color='red', linewidth=2, markersize=8)
    axes[1,0].axvline(x=1, color='green', linestyle='--', alpha=0.7, label='–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ')
    axes[1,0].axvline(x=400, color='red', linestyle='--', alpha=0.7, label='–†–µ–∞–ª—å–Ω—ã–π –ª–µ—Å')
    axes[1,0].set_xscale('log')
    axes[1,0].set_xlabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ (max/min –∫–ª–∞—Å—Å)')
    axes[1,0].set_ylabel('–û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å')
    axes[1,0].set_title('–í–ª–∏—è–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å', fontsize=12, weight='bold')
    axes[1,0].grid(True, alpha=0.3)
    axes[1,0].legend()
    
    # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    metrics = ['Accuracy\n(misleading)', 'Balanced\nAccuracy', 'F1-score\n(macro)', 'Cohen\'s\nKappa']
    balanced_scores = [0.97, 0.97, 0.97, 0.96]
    imbalanced_scores = [0.85, 0.62, 0.58, 0.54]  # Accuracy –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π –∏–∑-–∑–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    
    x = np.arange(len(metrics))
    width = 0.35
    
    axes[1,1].bar(x - width/2, balanced_scores, width, label='–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–≤–∞—à–∏)', color='lightgreen', alpha=0.8)
    axes[1,1].bar(x + width/2, imbalanced_scores, width, label='–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Ä–µ–∞–ª—å–Ω—ã–µ)', color='salmon', alpha=0.8)
    
    axes[1,1].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
    axes[1,1].set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ vs —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', fontsize=12, weight='bold')
    axes[1,1].set_xticks(x)
    axes[1,1].set_xticklabels(metrics)
    axes[1,1].legend()
    axes[1,1].grid(True, alpha=0.3)
    axes[1,1].set_ylim(0, 1)
    
    plt.tight_layout()
    plt.savefig('class_balance_impact_analysis.png', dpi=300, bbox_inches='tight')
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: class_balance_impact_analysis.png")
    
    return fig

if __name__ == "__main__":
    print_model_parameters()
    analyze_class_balance_impact()
    simulate_imbalanced_impact()
    explain_metrics_for_imbalanced()
    recommendations()
    create_balance_impact_visualization()
    
    print("\n" + "="*60)
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   –í–∞—à–∏ 97-99% —Ç–æ—á–Ω–æ—Å—Ç–∏ –ö–û–†–†–ï–ö–¢–ù–´ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ")
    print("   —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
    print("   –ù–æ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –æ–∂–∏–¥–∞–π—Ç–µ 60-80% —Ç–æ—á–Ω–æ—Å—Ç–∏.")
    print("="*60) 