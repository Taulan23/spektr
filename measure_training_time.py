import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.metrics import accuracy_score, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

def load_spectral_data_7_species():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 7 –≤–∏–¥–æ–≤"""
    base_path = "–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 7 –≤–∏–¥–æ–≤"
    species_folders = ["–±–µ—Ä–µ–∑–∞", "–¥—É–±", "–µ–ª—å", "–∫–ª–µ–Ω", "–ª–∏–ø–∞", "–æ—Å–∏–Ω–∞", "—Å–æ—Å–Ω–∞"]
    
    all_data = []
    all_labels = []
    
    for species in species_folders:
        species_path = f"{base_path}/{species}"
        try:
            import os
            import glob
            excel_files = glob.glob(f"{species_path}/*_vis.xlsx")
            
            for file_path in excel_files:
                try:
                    df = pd.read_excel(file_path)
                    numeric_cols = df.select_dtypes(include=[np.number]).columns
                    if len(numeric_cols) > 0:
                        spectral_data = df[numeric_cols[0]].values
                        if len(spectral_data) > 0:
                            all_data.append(spectral_data)
                            all_labels.append(species)
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {species}: {e}")
            continue
    
    if len(all_data) == 0:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return np.array([]), np.array([])
    
    X = np.array(all_data)
    y = np.array(all_labels)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è {len(np.unique(y))} –≤–∏–¥–æ–≤")
    return X, y

def create_1d_alexnet(input_shape, num_classes):
    """–°–æ–∑–¥–∞–Ω–∏–µ 1D-AlexNet"""
    model = Sequential([
        Conv1D(96, 11, strides=4, activation='relu', input_shape=input_shape),
        BatchNormalization(),
        MaxPooling1D(3, strides=2),
        
        Conv1D(256, 5, padding='same', activation='relu'),
        BatchNormalization(),
        MaxPooling1D(3, strides=2),
        
        Conv1D(384, 3, padding='same', activation='relu'),
        Conv1D(384, 3, padding='same', activation='relu'),
        Conv1D(256, 3, padding='same', activation='relu'),
        MaxPooling1D(3, strides=2),
        
        Flatten(),
        Dense(4096, activation='relu'),
        Dropout(0.5),
        Dense(4096, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax')
    ])
    
    model.compile(
        optimizer=Adam(learning_rate=0.001),
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def measure_training_time():
    """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("=== –ò–ó–ú–ï–†–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –û–ë–£–ß–ï–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò ===")
    
    # –ó–∞—Å–µ–∫–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
    total_start_time = time.time()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_start_time = time.time()
    data, labels = load_spectral_data_7_species()
    if len(data) == 0:
        return
    data_time = time.time() - data_start_time
    print(f"   –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {data_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # Preprocessing
    print("2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    preprocess_start_time = time.time()
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(data)
    
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(labels)
    
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
    )
    
    X_train_cnn = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
    X_test_cnn = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)
    preprocess_time = time.time() - preprocess_start_time
    print(f"   –í—Ä–µ–º—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {preprocess_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("3. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model_start_time = time.time()
    model = create_1d_alexnet((X_train_cnn.shape[1], 1), len(label_encoder.classes_))
    model_time = time.time() - model_start_time
    print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {model_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    training_start_time = time.time()
    
    early_stopping = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=1e-7)
    
    history = model.fit(
        X_train_cnn, y_train,
        epochs=100,
        batch_size=32,
        validation_split=0.2,
        callbacks=[early_stopping, reduce_lr],
        verbose=1
    )
    training_time = time.time() - training_start_time
    print(f"   –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    test_start_time = time.time()
    y_pred = model.predict(X_test_cnn, verbose=0)
    y_pred_classes = np.argmax(y_pred, axis=1)
    accuracy = accuracy_score(y_test, y_pred_classes)
    test_time = time.time() - test_start_time
    print(f"   –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –û–±—â–µ–µ –≤—Ä–µ–º—è
    total_time = time.time() - total_start_time
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ò:")
    print("="*60)
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö:     {data_time:8.2f} —Å–µ–∫")
    print(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:       {preprocess_time:8.2f} —Å–µ–∫")
    print(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:     {model_time:8.2f} —Å–µ–∫")
    print(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:     {training_time:8.2f} —Å–µ–∫")
    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:        {test_time:8.2f} —Å–µ–∫")
    print("-" * 60)
    print(f"–û–ë–©–ï–ï –í–†–ï–ú–Ø:         {total_time:8.2f} —Å–µ–∫")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:     {accuracy*100:8.2f}%")
    print("="*60)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüìà –î–ï–¢–ê–õ–ò:")
    print(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {len(X_train)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏:  {len(X_test)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö:          {len(history.history['accuracy'])}")
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:       {history.history['accuracy'][-1]*100:.2f}%")
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è:  {history.history['val_accuracy'][-1]*100:.2f}%")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        '–û–ø–µ—Ä–∞—Ü–∏—è': ['–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö', '–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞', '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏', '–û–±—É—á–µ–Ω–∏–µ', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–û–ë–©–ï–ï'],
        '–í—Ä–µ–º—è (—Å–µ–∫)': [data_time, preprocess_time, model_time, training_time, test_time, total_time]
    }
    
    df_results = pd.DataFrame(results)
    df_results.to_csv('–§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–≤—Ä–µ–º—è_–æ–±—É—á–µ–Ω–∏—è_–º–æ–¥–µ–ª–∏.csv', index=False)
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: –§–ò–ù–ê–õ–¨–ù–´–ï_–†–ï–ó–£–õ–¨–¢–ê–¢–´/–≤—Ä–µ–º—è_–æ–±—É—á–µ–Ω–∏—è_–º–æ–¥–µ–ª–∏.csv")

if __name__ == "__main__":
    measure_training_time() 