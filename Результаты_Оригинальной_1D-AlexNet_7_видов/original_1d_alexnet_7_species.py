#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 7 –≤–µ—Å–µ–Ω–Ω–∏—Ö –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–µ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import os
import glob
import json
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

def load_spring_7_species_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è 7 –≤–µ—Å–µ–Ω–Ω–∏—Ö –≤–∏–¥–æ–≤"""
    
    spring_folder = "–ò—Å—Ö–æ–¥–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ/–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 7 –≤–∏–¥–æ–≤"
    
    print("üå± –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• 7 –í–ï–°–ï–ù–ù–ò–• –í–ò–î–û–í...")
    
    tree_types = ['–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '–æ—Å–∏–Ω–∞', '—Å–æ—Å–Ω–∞']
    
    all_data = []
    all_labels = []
    species_counts = {}
    
    for species in tree_types:
        species_folder = os.path.join(spring_folder, species)
        if not os.path.exists(species_folder):
            print(f"   ‚ö†Ô∏è  {species}: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
            
        files = glob.glob(os.path.join(species_folder, "*.xlsx"))
        
        print(f"   üå≥ {species}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        species_counts[species] = len(files)
        
        species_data = []
        for file in files:
            try:
                df = pd.read_excel(file, header=None)
                spectrum = df.iloc[:, 1].values  # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–ø–µ–∫—Ç—Ä
                spectrum = spectrum[~pd.isna(spectrum)]  # –£–±–∏—Ä–∞–µ–º NaN
                species_data.append(spectrum)
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file}: {e}")
                continue
        
        if species_data:
            all_data.extend(species_data)
            all_labels.extend([species] * len(species_data))
    
    print(f"\nüìä –ò–¢–û–ì–û –ó–ê–ì–†–£–ñ–ï–ù–û:")
    for species, count in species_counts.items():
        print(f"   üå≥ {species}: {count} —Å–ø–µ–∫—Ç—Ä–æ–≤")
    
    print(f"\n‚úÖ –û–±—â–∏–π –∏—Ç–æ–≥: {len(all_data)} —Å–ø–µ–∫—Ç—Ä–æ–≤, {len(set(all_labels))} –≤–∏–¥–æ–≤")
    
    return all_data, all_labels, species_counts

def preprocess_spectra(spectra_list):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ–∫—Ç—Ä–æ–≤"""
    
    print("üîß –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ï–ö–¢–†–û–í...")
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    min_length = min(len(spectrum) for spectrum in spectra_list)
    print(f"   üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ø–µ–∫—Ç—Ä–∞: {min_length}")
    
    # –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Å–ø–µ–∫—Ç—Ä—ã –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    processed_spectra = []
    for spectrum in spectra_list:
        truncated = spectrum[:min_length]
        processed_spectra.append(truncated)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
    X = np.array(processed_spectra)
    print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
    
    return X

def create_original_1d_alexnet_model(input_shape, num_classes):
    """–°–æ–∑–¥–∞–µ—Ç –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ 1D-AlexNet —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–µ"""
    
    print("üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô 1D-AlexNet –ú–û–î–ï–õ–ò...")
    
    model = keras.Sequential([
        # –ì—Ä—É–ø–ø–∞ 1: –ü–µ—Ä–≤–∞—è —Å–≤–µ—Ä—Ç–∫–∞ + –ø—É–ª–∏–Ω–≥
        layers.Conv1D(filters=96, kernel_size=11, strides=4, padding='same', 
                     activation='relu', input_shape=input_shape),
        layers.BatchNormalization(),
        layers.MaxPooling1D(pool_size=3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 2: –í—Ç–æ—Ä–∞—è —Å–≤–µ—Ä—Ç–∫–∞ + –ø—É–ª–∏–Ω–≥
        layers.Conv1D(filters=256, kernel_size=5, strides=1, padding='same', 
                     activation='relu'),
        layers.BatchNormalization(),
        layers.MaxPooling1D(pool_size=3, strides=2),
        
        # –ì—Ä—É–ø–ø–∞ 3: –¢—Ä–∏ —Å–≤–µ—Ä—Ç–∫–∏ –ø–æ–¥—Ä—è–¥ + –ø—É–ª–∏–Ω–≥
        layers.Conv1D(filters=384, kernel_size=3, strides=1, padding='same', 
                     activation='relu'),
        layers.Conv1D(filters=384, kernel_size=3, strides=1, padding='same', 
                     activation='relu'),
        layers.Conv1D(filters=256, kernel_size=3, strides=1, padding='same', 
                     activation='relu'),
        layers.MaxPooling1D(pool_size=3, strides=2),
        
        # Flatten –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–º —Å–ª–æ—è–º
        layers.Flatten(),
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
        layers.Dense(4096, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(4096, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(num_classes, activation='softmax')
    ])
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    model.compile(
        optimizer=keras.optimizers.SGD(learning_rate=0.01, momentum=0.9),
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    print(f"   üìä –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
    model.summary()
    
    return model

def add_noise(X, noise_level):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–π —à—É–º –∫ –¥–∞–Ω–Ω—ã–º"""
    if noise_level == 0:
        return X
    noise = np.random.normal(0, noise_level, X.shape).astype(np.float32)
    return X + noise

def evaluate_with_noise(model, X_test, y_test, tree_types, noise_levels=[1, 5, 10]):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —à—É–º–∞"""
    
    print(f"\nüîä –û–¶–ï–ù–ö–ê –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò –° –®–£–ú–û–ú...")
    
    results = {}
    confusion_matrices = {}
    
    for noise_level in noise_levels:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º —à—É–º–∞: {noise_level}%")
        print(f"{'='*60}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
        X_test_noisy = add_noise(X_test, noise_level / 100.0)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        y_pred_proba = model.predict(X_test_noisy, verbose=0)
        y_pred = np.argmax(y_pred_proba, axis=1)
        y_test_classes = np.argmax(y_test, axis=1)
        
        # –¢–æ—á–Ω–æ—Å—Ç—å
        accuracy = accuracy_score(y_test_classes, y_pred)
        results[noise_level] = accuracy
        
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ {noise_level}% —à—É–º–µ: {accuracy:.7f}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –í–ï–†–û–Ø–¢–ù–û–°–¢–ï–ô:")
        for i, species in enumerate(tree_types):
            species_probs = y_pred_proba[y_test_classes == i]
            if len(species_probs) > 0:
                max_probs = np.max(species_probs, axis=1)
                mean_max_prob = np.mean(max_probs)
                std_max_prob = np.std(max_probs)
                print(f"   {species}: —Å—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = {mean_max_prob:.4f} ¬± {std_max_prob:.4f}")
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
        cm = confusion_matrix(y_test_classes, y_pred)
        confusion_matrices[noise_level] = cm
        
        print(f"\n–û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(classification_report(y_test_classes, y_pred, target_names=tree_types, digits=7))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
        plt.figure(figsize=(12, 10))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                   xticklabels=tree_types, yticklabels=tree_types)
        plt.title(f'–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet - –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ {noise_level}% —à—É–º–∞')
        plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
        plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
        plt.tight_layout()
        plt.savefig(f'original_confusion_matrix_{noise_level}percent.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º = 1)
        cm_normalized = cm.astype('float') / cm.sum(axis=0)[np.newaxis, :]
        cm_normalized = np.nan_to_num(cm_normalized)  # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        np.save(f'original_confusion_matrix_{noise_level}percent_normalized.npy', cm_normalized)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        plt.figure(figsize=(12, 10))
        sns.heatmap(cm_normalized, annot=True, fmt='.7f', cmap='Blues', 
                   xticklabels=tree_types, yticklabels=tree_types)
        plt.title(f'–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ {noise_level}% —à—É–º–∞')
        plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
        plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
        plt.tight_layout()
        plt.savefig(f'original_confusion_matrix_{noise_level}percent_normalized.png', dpi=300, bbox_inches='tight')
        plt.show()
    
    return results, confusion_matrices

def save_network_params(model, tree_types, timestamp):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏"""
    
    params = {
        'architecture': '–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet',
        'timestamp': timestamp,
        'input_shape': list(model.input_shape[1:]),
        'num_classes': len(tree_types),
        'tree_types': list(tree_types),
        'layers': []
    }
    
    for layer in model.layers:
        layer_info = {
            'name': layer.name,
            'type': layer.__class__.__name__,
            'config': layer.get_config()
        }
        params['layers'].append(layer_info)
    
    filename = f'original_network_params_{timestamp}.json'
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(params, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô 1D-AlexNet –î–õ–Ø 7 –í–ï–°–ï–ù–ù–ò–• –í–ò–î–û–í")
    print("="*70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    all_data, all_labels, species_counts = load_spring_7_species_data()
    
    if not all_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        return
    
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    X = preprocess_spectra(all_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –¥–ª—è 1D —Å–≤–µ—Ä—Ç–∫–∏
    X = X.reshape(X.shape[0], X.shape[1], 1)
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–∫
    le = LabelEncoder()
    y_encoded = le.fit_transform(all_labels)
    tree_types = le.classes_
    
    # One-hot encoding
    y_onehot = tf.keras.utils.to_categorical(y_encoded, num_classes=len(tree_types))
    
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"   X shape: {X.shape}")
    print(f"   y shape: {y_onehot.shape}")
    print(f"   –ö–ª–∞—Å—Å—ã: {tree_types}")
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 80/20
    X_train, X_test, y_train, y_test = train_test_split(
        X, y_onehot, test_size=0.2, random_state=42, stratify=y_encoded
    )
    
    print(f"\nüìä –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
    print(f"   –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"   –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = create_original_1d_alexnet_model((X_train.shape[1], 1), len(tree_types))
    
    # –û–±—É—á–µ–Ω–∏–µ
    print(f"\nüéØ –û–ë–£–ß–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò...")
    
    history = model.fit(
        X_train, y_train,
        epochs=50,
        batch_size=32,
        validation_split=0.2,
        verbose=1,
        callbacks=[
            keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True),
            keras.callbacks.ReduceLROnPlateau(factor=0.5, patience=5)
        ]
    )
    
    # –û—Ü–µ–Ω–∫–∞ –Ω–∞ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìä –û–¶–ï–ù–ö–ê –ù–ê –ß–ò–°–¢–´–• –î–ê–ù–ù–´–•...")
    test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {test_accuracy:.7f}")
    
    # –û—Ü–µ–Ω–∫–∞ —Å —à—É–º–æ–º
    results, confusion_matrices = evaluate_with_noise(model, X_test, y_test, tree_types)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    save_network_params(model, tree_types, timestamp)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_filename = f'original_1d_alexnet_7_species_{timestamp}.h5'
    model.save(model_filename)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_filename}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    plt.figure(figsize=(12, 4))
    
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='–û–±—É—á–∞—é—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å')
    plt.plot(history.history['val_accuracy'], label='–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å')
    plt.title('–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet - –¢–æ—á–Ω–æ—Å—Ç—å')
    plt.xlabel('–≠–ø–æ—Ö–∞')
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    plt.legend()
    
    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='–û–±—É—á–∞—é—â–∞—è –æ—à–∏–±–∫–∞')
    plt.plot(history.history['val_loss'], label='–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
    plt.title('–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet - –û—à–∏–±–∫–∞')
    plt.xlabel('–≠–ø–æ—Ö–∞')
    plt.ylabel('–û—à–∏–±–∫–∞')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig(f'original_training_history_{timestamp}.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"\nüéâ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø 1D-AlexNet –ì–û–¢–û–í–ê!")
    print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'original_'")

if __name__ == "__main__":
    main() 