#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –®–£–ú–ê
–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ mean –∏ RMS
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

def check_noise_statistics():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à—É–º–∞ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    
    print("=================================================================================")
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –®–£–ú–ê")
    print("=================================================================================")
    print("üìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ mean –∏ RMS")
    print("=================================================================================")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ–∫—Ç—Ä—ã)
    np.random.seed(42)
    test_spectrum = np.random.normal(0, 1, 1000)  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ–∫—Ç—Ä
    
    print(f"üìä –¢–ï–°–¢–û–í–´–ô –°–ü–ï–ö–¢–†:")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {len(test_spectrum)} —Ç–æ—á–µ–∫")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {np.mean(test_spectrum):.6f}")
    print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(test_spectrum):.6f}")
    print(f"   ‚Ä¢ RMS: {np.sqrt(np.mean(test_spectrum**2)):.6f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —à—É–º–∞
    noise_levels = [0.01, 0.05, 0.10, 0.20]  # 1%, 5%, 10%, 20%
    
    print("\n" + "="*80)
    print("üìà –ê–ù–ê–õ–ò–ó –ì–ê–£–°–°–û–í–ê –®–£–ú–ê")
    print("="*80)
    
    for noise_level in noise_levels:
        print(f"\nüîç –£–†–û–í–ï–ù–¨ –®–£–ú–ê: {noise_level*100}% ({noise_level})")
        print("-" * 50)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º
        noise = np.random.normal(0, noise_level, test_spectrum.shape)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à—É–º–∞
        noise_mean = np.mean(noise)
        noise_std = np.std(noise)
        noise_rms = np.sqrt(np.mean(noise**2))
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –®–£–ú–ê:")
        print(f"   ‚Ä¢ Mean: {noise_mean:.6f} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚âà 0)")
        print(f"   ‚Ä¢ Std: {noise_std:.6f} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚âà {noise_level:.3f})")
        print(f"   ‚Ä¢ RMS: {noise_rms:.6f} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚âà {noise_level:.3f})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        mean_error = abs(noise_mean - 0)
        std_error = abs(noise_std - noise_level)
        rms_error = abs(noise_rms - noise_level)
        
        print(f"üìã –ü–†–û–í–ï–†–ö–ê:")
        print(f"   ‚Ä¢ Mean ‚âà 0: {'‚úÖ' if mean_error < 0.01 else '‚ùå'} (–æ—à–∏–±–∫–∞: {mean_error:.6f})")
        print(f"   ‚Ä¢ Std ‚âà {noise_level:.3f}: {'‚úÖ' if std_error < 0.01 else '‚ùå'} (–æ—à–∏–±–∫–∞: {std_error:.6f})")
        print(f"   ‚Ä¢ RMS ‚âà {noise_level:.3f}: {'‚úÖ' if rms_error < 0.01 else '‚ùå'} (–æ—à–∏–±–∫–∞: {rms_error:.6f})")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—É–º –∫ —Å–ø–µ–∫—Ç—Ä—É
        noisy_spectrum = test_spectrum + noise
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
        noisy_mean = np.mean(noisy_spectrum)
        noisy_std = np.std(noisy_spectrum)
        noisy_rms = np.sqrt(np.mean(noisy_spectrum**2))
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–®–£–ú–õ–ï–ù–ù–û–ì–û –°–ü–ï–ö–¢–†–ê:")
        print(f"   ‚Ä¢ Mean: {noisy_mean:.6f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {noisy_mean - np.mean(test_spectrum):+.6f})")
        print(f"   ‚Ä¢ Std: {noisy_std:.6f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {noisy_std - np.std(test_spectrum):+.6f})")
        print(f"   ‚Ä¢ RMS: {noisy_rms:.6f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {noisy_rms - np.sqrt(np.mean(test_spectrum**2)):+.6f})")
    
    print("\n" + "="*80)
    print("‚ùì –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´")
    print("="*80)
    
    print("\n1Ô∏è‚É£ –£ –ì–ê–£–°–°–û–í–ê –®–£–ú–ê MEAN –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –†–ê–í–ï–ù 0?")
    print("   ‚úÖ –î–ê! –ì–∞—É—Å—Å–æ–≤ —à—É–º –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å mean = 0")
    print("   üìä –í –Ω–∞—à–µ–º –∫–æ–¥–µ: np.random.normal(0, noise_level, ...)")
    print("   üìä –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä = 0 - —ç—Ç–æ mean")
    print("   üìä –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä = noise_level - —ç—Ç–æ standard deviation")
    
    print("\n2Ô∏è‚É£ RMS –ó–ê–î–ê–ï–¢–°–Ø –ü–†–û–¶–ï–ù–¢–û–ú?")
    print("   ‚ùå –ù–ï–¢! RMS –Ω–µ –∑–∞–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é")
    print("   üìä RMS (Root Mean Square) = ‚àö(mean(x¬≤))")
    print("   üìä –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS ‚âà std")
    print("   üìä –í –Ω–∞—à–µ–º –∫–æ–¥–µ noise_level - —ç—Ç–æ standard deviation")
    print("   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - —ç—Ç–æ —É—Å–ª–æ–≤–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è")
    
    print("\n3Ô∏è‚É£ –ö–ê–ö –ò–ù–¢–ï–†–ü–†–ï–¢–ò–†–û–í–ê–¢–¨ '1% –®–£–ú'?")
    print("   üìä –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç std —à—É–º–∞ = 0.01")
    print("   üìä –î–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (std=1) —ç—Ç–æ 1% –æ—Ç std –¥–∞–Ω–Ω—ã—Ö")
    print("   üìä –î–ª—è –Ω–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∞—Ç—å –Ω–∞ std –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n4Ô∏è‚É£ –ü–†–ê–í–ò–õ–¨–ù–ê –õ–ò –ù–ê–®–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø?")
    print("   ‚úÖ –î–ê! –ù–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:")
    print("   üìä np.random.normal(0, noise_level, X.shape)")
    print("   üìä mean=0, std=noise_level")
    print("   üìä –®—É–º –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–π –∏ —Ä–∞–∑–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_noise_visualization()
    
    print("\n" + "="*80)
    print("‚úÖ –í–´–í–û–î–´")
    print("="*80)
    print("1. ‚úÖ –ì–∞—É—Å—Å–æ–≤ —à—É–º –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å mean = 0")
    print("2. ‚úÖ RMS ‚âà std –¥–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean = 0")
    print("3. ‚úÖ –ù–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print("4. ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ - —É—Å–ª–æ–≤–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —à—É–º–∞")
    print("="*80)

def create_noise_visualization():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à—É–º–∞"""
    
    print("\nüìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò...")
    
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    noise_levels = [0.01, 0.05, 0.10, 0.20]
    n_samples = 10000
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    axes = axes.flatten()
    
    for i, noise_level in enumerate(noise_levels):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º
        noise = np.random.normal(0, noise_level, n_samples)
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        axes[i].hist(noise, bins=50, alpha=0.7, color='red', edgecolor='black', density=True)
        
        # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è
        x = np.linspace(-4*noise_level, 4*noise_level, 1000)
        y = (1/(noise_level*np.sqrt(2*np.pi))) * np.exp(-0.5*((x-0)/noise_level)**2)
        axes[i].plot(x, y, 'b-', linewidth=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mean_actual = np.mean(noise)
        std_actual = np.std(noise)
        rms_actual = np.sqrt(np.mean(noise**2))
        
        axes[i].set_title(f'–®—É–º {noise_level*100}% (std={noise_level:.3f})', fontsize=12, fontweight='bold')
        axes[i].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞')
        axes[i].set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
        axes[i].grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f'Mean: {mean_actual:.4f}\nStd: {std_actual:.4f}\nRMS: {rms_actual:.4f}'
        axes[i].text(0.02, 0.98, stats_text, transform=axes[i].transAxes, 
                    verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", 
                    facecolor="white", alpha=0.8), fontsize=10)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è mean –∏ std
        axes[i].axvline(x=0, color='green', linestyle='--', alpha=0.7, label='Mean=0')
        axes[i].axvline(x=noise_level, color='orange', linestyle='--', alpha=0.7, label=f'Std={noise_level:.3f}')
        axes[i].axvline(x=-noise_level, color='orange', linestyle='--', alpha=0.7)
        
        axes[i].legend()
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    filename = 'noise_statistics_analysis.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    plt.show()

if __name__ == "__main__":
    check_noise_statistics() 