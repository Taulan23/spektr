import os
import glob
import pandas as pd
import numpy as np

def test_data_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
    tree_types = ['–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '–æ—Å–∏–Ω–∞', '—Å–æ—Å–Ω–∞']
    total_files = 0
    total_spectra = 0
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("="*50)
    
    for tree_type in tree_types:
        folder_path = os.path.join('.', tree_type)
        
        if os.path.exists(folder_path):
            excel_files = glob.glob(os.path.join(folder_path, '*.xlsx'))
            valid_files = 0
            
            print(f"\n{tree_type.upper()}:")
            print(f"  –ü–∞–ø–∫–∞: {folder_path}")
            print(f"  –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
            
            spectrum_lengths = []
            
            for file_path in excel_files[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                try:
                    df = pd.read_excel(file_path)
                    
                    if df.shape[1] >= 2:
                        spectrum_data = df.iloc[:, 1].values
                        # –£–¥–∞–ª—è–µ–º NaN
                        spectrum_data = spectrum_data[~np.isnan(spectrum_data)]
                        
                        if len(spectrum_data) > 10:
                            valid_files += 1
                            spectrum_lengths.append(len(spectrum_data))
                            total_spectra += 1
                            
                            print(f"    ‚úì {os.path.basename(file_path)}: {len(spectrum_data)} —Ç–æ—á–µ–∫")
                        else:
                            print(f"    ‚úó {os.path.basename(file_path)}: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ({len(spectrum_data)} —Ç–æ—á–µ–∫)")
                    else:
                        print(f"    ‚úó {os.path.basename(file_path)}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ ({df.shape[1]})")
                        
                except Exception as e:
                    print(f"    ‚úó {os.path.basename(file_path)}: –æ—à–∏–±–∫–∞ - {e}")
            
            if spectrum_lengths:
                print(f"  –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {valid_files}")
                print(f"  –î–ª–∏–Ω–∞ —Å–ø–µ–∫—Ç—Ä–æ–≤: {min(spectrum_lengths)} - {max(spectrum_lengths)}")
                print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {np.mean(spectrum_lengths):.1f}")
            
            total_files += len(excel_files)
            
        else:
            print(f"\n{tree_type.upper()}:")
            print(f"  ‚úó –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")
    
    print("\n" + "="*50)
    print("–ò–¢–û–ì–û:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"  –í–∞–ª–∏–¥–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–æ–≤: {total_spectra}")
    
    if total_spectra < 50:
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 50 —Å–ø–µ–∫—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    return total_spectra > 0

def check_sample_spectrum():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–∑–µ—Ü —Å–ø–µ–∫—Ç—Ä–∞"""
    tree_types = ['–±–µ—Ä–µ–∑–∞', '–¥—É–±', '–µ–ª—å', '–∫–ª–µ–Ω', '–ª–∏–ø–∞', '–æ—Å–∏–Ω–∞', '—Å–æ—Å–Ω–∞']
    
    print("\n" + "="*50)
    print("–ê–ù–ê–õ–ò–ó –û–ë–†–ê–ó–¶–ê –°–ü–ï–ö–¢–†–ê:")
    
    for tree_type in tree_types:
        folder_path = os.path.join('.', tree_type)
        if os.path.exists(folder_path):
            excel_files = glob.glob(os.path.join(folder_path, '*.xlsx'))
            if excel_files:
                try:
                    df = pd.read_excel(excel_files[0])
                    print(f"\n–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞: {excel_files[0]}")
                    print(f"–†–∞–∑–º–µ—Ä DataFrame: {df.shape}")
                    print(f"–°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
                    
                    if df.shape[1] >= 2:
                        print(f"–ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π —Å–ø–µ–∫—Ç—Ä–∞:")
                        spectrum = df.iloc[:5, 1].values
                        for i, val in enumerate(spectrum):
                            print(f"  –¢–æ—á–∫–∞ {i+1}: {val}")
                    
                    return True
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {excel_files[0]}: {e}")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –°–ü–ï–ö–¢–†–û–í –î–ï–†–ï–í–¨–ï–í")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    data_ok = test_data_structure()
    
    if data_ok:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–∑–µ—Ü
        check_sample_spectrum()
        
        print("\n" + "="*60)
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    else:
        print("\n" + "="*60)
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ Excel —Ñ–∞–π–ª—ã.")

if __name__ == "__main__":
    main() 