#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ExtraTreesClassifier –ü–†–ò –†–ê–ó–ù–´–• –£–†–û–í–ù–Ø–• –®–£–ú–ê
================================================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞—É—á–Ω–∏–∫–∞ –ø–æ ExtraTreesClassifier
–ø—Ä–∏ —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞ 1% –∏ 10%.


"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import ExtraTreesClassifier
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']

def load_and_analyze_results():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""

    print("=" * 80)
    print("üî¨ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ExtraTreesClassifier")
    print("=" * 80)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    try:
        df_1 = pd.read_excel('et80_1.xlsx')
        df_10 = pd.read_excel('et80_10.xlsx')
        print("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    print("\nüìã –ü–ê–†–ê–ú–ï–¢–†–´ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í:")
    print("-" * 40)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤
    for name, df in [("1% —à—É–º–∞", df_1), ("10% —à—É–º–∞", df_10)]:
        print(f"\n{name}:")
        for i in range(min(10, len(df))):
            row_val = df.iloc[i, 0]
            if pd.notna(row_val) and str(row_val).strip():
                if any(keyword in str(row_val).lower() for keyword in ['—à—É–º', '—Ä–µ–∞–ª–∏–∑–∞—Ü', '–≤—Ä–µ–º—è']):
                    print(f"  ‚Ä¢ {row_val}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_1 = extract_performance_metrics(df_1, "1% —à—É–º–∞")
    results_10 = extract_performance_metrics(df_10, "10% —à—É–º–∞")

    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    compare_results(results_1, results_10)

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    analyze_model_parameters()

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    provide_recommendations()

def extract_performance_metrics(df, noise_level):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ DataFrame"""

    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: {noise_level}")
    print("-" * 40)

    results = {}

    # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π)
    max_values = 0
    main_col_idx = 1

    for col_idx in range(1, df.shape[1]):
        col = df.iloc[:, col_idx]
        numeric_count = sum(1 for val in col if pd.notna(val) and isinstance(val, (int, float)) and val != 0)
        if numeric_count > max_values:
            max_values = numeric_count
            main_col_idx = col_idx

    main_col = df.iloc[:, main_col_idx]
    numeric_values = [val for val in main_col if pd.notna(val) and isinstance(val, (int, float)) and val != 0]

    if numeric_values:
        results['accuracy_mean'] = np.mean(numeric_values)
        results['accuracy_std'] = np.std(numeric_values)
        results['accuracy_min'] = np.min(numeric_values)
        results['accuracy_max'] = np.max(numeric_values)
        results['total_samples'] = len(numeric_values)

        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(numeric_values)}")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {np.mean(numeric_values):.4f} ¬± {np.std(numeric_values):.4f}")
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω: [{np.min(numeric_values):.4f}, {np.max(numeric_values):.4f}]")
        print(f"–ú–µ–¥–∏–∞–Ω–∞: {np.median(numeric_values):.4f}")

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        q25 = np.percentile(numeric_values, 25)
        q75 = np.percentile(numeric_values, 75)
        print(f"Q25-Q75: [{q25:.4f}, {q75:.4f}]")

        results['q25'] = q25
        results['q75'] = q75
        results['median'] = np.median(numeric_values)
        results['values'] = numeric_values

    return results

def compare_results(results_1, results_10):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞"""

    print("\nüîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 50)

    if not results_1 or not results_10:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    acc_1 = results_1['accuracy_mean']
    acc_10 = results_10['accuracy_mean']

    print(f"üìà –¢–û–ß–ù–û–°–¢–¨:")
    print(f"  –ü—Ä–∏ 1% —à—É–º–∞:  {acc_1:.4f} ¬± {results_1['accuracy_std']:.4f}")
    print(f"  –ü—Ä–∏ 10% —à—É–º–∞: {acc_10:.4f} ¬± {results_10['accuracy_std']:.4f}")
    print(f"  –ü–∞–¥–µ–Ω–∏–µ:      {acc_1 - acc_10:.4f} ({((acc_1 - acc_10)/acc_1)*100:.1f}%)")

    # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    std_1 = results_1['accuracy_std']
    std_10 = results_10['accuracy_std']

    print(f"\nüìä –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ):")
    print(f"  –ü—Ä–∏ 1% —à—É–º–∞:  {std_1:.4f}")
    print(f"  –ü—Ä–∏ 10% —à—É–º–∞: {std_10:.4f}")
    print(f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ:    {std_10 - std_1:.4f}")

    # –ú–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    med_1 = results_1['median']
    med_10 = results_10['median']

    print(f"\nüìç –ú–ï–î–ò–ê–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:")
    print(f"  –ü—Ä–∏ 1% —à—É–º–∞:  {med_1:.4f}")
    print(f"  –ü—Ä–∏ 10% —à—É–º–∞: {med_10:.4f}")
    print(f"  –ü–∞–¥–µ–Ω–∏–µ:      {med_1 - med_10:.4f}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è
    print(f"\nüéØ –í–´–í–û–î–´:")
    if acc_1 - acc_10 > 0.01:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1%
        print(f"  ‚ö†Ô∏è  –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —à—É–º–∞")
        print(f"      –ü–∞–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {((acc_1 - acc_10)/acc_1)*100:.1f}%")
    else:
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ —à—É–º—É")

    if std_10 > std_1 * 1.5:
        print(f"  ‚ö†Ô∏è  –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
    else:
        print(f"  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–∏–µ–º–ª–µ–º–∞—è")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    create_comparison_plot(results_1, results_10)

def create_comparison_plot(results_1, results_10):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ExtraTreesClassifier: 1% vs 10% —à—É–º–∞', fontsize=16, fontweight='bold')

    # –ì—Ä–∞—Ñ–∏–∫ 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    ax1.hist(results_1['values'], bins=20, alpha=0.7, label='1% —à—É–º–∞', color='green', density=True)
    ax1.hist(results_10['values'], bins=20, alpha=0.7, label='10% —à—É–º–∞', color='red', density=True)
    ax1.set_xlabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    ax1.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏')
    ax1.legend()
    ax1.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 2: Box plot
    data_to_plot = [results_1['values'], results_10['values']]
    labels = ['1% —à—É–º–∞', '10% —à—É–º–∞']
    box_plot = ax2.boxplot(data_to_plot, labels=labels, patch_artist=True)
    box_plot['boxes'][0].set_facecolor('lightgreen')
    box_plot['boxes'][1].set_facecolor('lightcoral')
    ax2.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    ax2.set_title('Box Plot —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ')
    ax2.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
    means = [results_1['accuracy_mean'], results_10['accuracy_mean']]
    stds = [results_1['accuracy_std'], results_10['accuracy_std']]
    colors = ['green', 'red']

    bars = ax3.bar(labels, means, yerr=stds, capsize=5, color=colors, alpha=0.7)
    ax3.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    ax3.set_title('–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ¬± œÉ')
    ax3.grid(True, alpha=0.3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (mean, std) in enumerate(zip(means, stds)):
        ax3.text(i, mean + std + 0.01, f'{mean:.3f}¬±{std:.3f}',
                ha='center', va='bottom', fontweight='bold')

    # –ì—Ä–∞—Ñ–∏–∫ 4: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π)
    ax4.plot(range(len(results_1['values'])), sorted(results_1['values'], reverse=True),
             'g-', label='1% —à—É–º–∞', linewidth=2)
    ax4.plot(range(len(results_10['values'])), sorted(results_10['values'], reverse=True),
             'r-', label='10% —à—É–º–∞', linewidth=2)
    ax4.set_xlabel('–†–∞–Ω–≥ –∏–∑–º–µ—Ä–µ–Ω–∏—è')
    ax4.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    ax4.set_title('–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    ax4.legend()
    ax4.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig('
        ', dpi=300, bbox_inches='tight')
    plt.show()

    print("\nüíæ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'extra_trees_comparison.png'")

def analyze_model_parameters():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ ExtraTreesClassifier"""

    print("\nüõ†Ô∏è  –ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–û–í –ú–û–î–ï–õ–ò")
    print("=" * 50)

    # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    current_params = {
        'n_estimators': 200,
        'max_depth': 20,
        'min_samples_split': 5,
        'min_samples_leaf': 2,
        'max_features': 'sqrt',
        'random_state': 42,
        'n_jobs': -1,
        'verbose': 1
    }

    print("üìã –¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    for param, value in current_params.items():
        print(f"  {param:20s}: {value}")

    print("\nüéØ –í–õ–ò–Ø–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –ù–ê –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ö –®–£–ú–£:")
    print("-" * 50)

    print("1. n_estimators=200:")
    print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞/—Å–∫–æ—Ä–æ—Å—Ç–∏")
    print("   üí° –î–ª—è –±–æ–ª—å—à–µ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 300-500")

    print("\n2. max_depth=20:")
    print("   ‚ö†Ô∏è  –î–æ–≤–æ–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ - –º–æ–∂–µ—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é")
    print("   üí° –ü—Ä–∏ —à—É–º–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 10-15")

    print("\n3. min_samples_split=5:")
    print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è")
    print("   üí° –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º —à—É–º–µ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 10-20")

    print("\n4. min_samples_leaf=2:")
    print("   ‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —à—É–º–Ω—ã–µ –ª–∏—Å—Ç—å—è")
    print("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 5-10 –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É")

    print("\n5. max_features='sqrt':")
    print("   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è ExtraTreesClassifier")
    print("   üí° –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —à—É–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

def provide_recommendations():
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""

    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –®–£–ú–£")
    print("=" * 60)

    print("1. üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í:")
    print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å min_samples_leaf –¥–æ 5-10")
    print("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å max_depth –¥–æ 10-15")
    print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å min_samples_split –¥–æ 10-20")
    print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ n_estimators –¥–æ 300-500")

    print("\n2. üìä –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•:")
    print("   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —à—É–º–∞")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RobustScaler –≤–º–µ—Å—Ç–æ StandardScaler")
    print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏")

    print("\n3. üéõÔ∏è  –¢–ï–•–ù–ò–ö–ò –ê–ù–°–ê–ú–ë–õ–ò–†–û–í–ê–ù–ò–Ø:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Voting Classifier —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏")
    print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å Gradient Boosting –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å Stacking —Å –º–µ—Ç–∞–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")

    print("\n4. üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å StratifiedKFold –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞ (2%, 5%, 15%)")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    print("\n5. üìà –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ß–ï–°–¢–í–ê:")
    print("   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ accuracy, –Ω–æ –∏ precision/recall")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å confusion matrix –ø–æ –∫–ª–∞—Å—Å–∞–º")
    print("   ‚Ä¢ –ò–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("\nüöÄ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –®–£–ú–£:")
    print("-" * 60)

    robust_params = """
model = ExtraTreesClassifier(
    n_estimators=300,           # –ë–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    max_depth=12,               # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø—Ä–æ—Ç–∏–≤ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    min_samples_split=15,       # –ë–æ–ª—å—à–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
    min_samples_leaf=8,         # –ë–æ–ª—å—à–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –ª–∏—Å—Ç—å—è—Ö
    max_features='sqrt',        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è Extra Trees
    random_state=42,
    n_jobs=-1,
    bootstrap=False,            # Extra Trees –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç bootstrap
    class_weight='balanced',    # –î–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    verbose=1
)"""

    print(robust_params)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    try:
        load_and_analyze_results()

        print("\n" + "=" * 80)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 80)
        print("\nüìù –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï:")
        print("‚Ä¢ –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ 10% —à—É–º–∞ –æ–∂–∏–¥–∞–µ–º–æ")
        print("‚Ä¢ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ '–∏–¥–µ–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã' –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —à—É–º–µ")
        print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")
        print("‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
