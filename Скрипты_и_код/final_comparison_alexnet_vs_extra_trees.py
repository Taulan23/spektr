#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: ALEXNET 1D vs EXTRA TREES
20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ - –∞–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É
"""

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from datetime import datetime

def create_final_comparison():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π"""
    
    print("üìä –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–†–ê–í–ù–ï–ù–ò–Ø –ú–û–î–ï–õ–ï–ô...")
    
    # –î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π
    noise_levels = [0, 1, 5, 10, 20]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Alexnet 1D
    alexnet_accuracies = [0.993, 0.972, 0.648, 0.337, 0.123]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Extra Trees
    extra_trees_accuracies = [0.970, 0.970, 0.968, 0.955, 0.935]
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å 6 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(2, 3, figsize=(24, 16))
    fig.suptitle('–§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: 1D ALEXNET vs EXTRA TREES\n' +
                 '20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ - –ê–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É',
                 fontsize=20, fontweight='bold', y=0.98)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å–Ω–æ–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    ax1 = axes[0, 0]
    x = np.arange(len(noise_levels))
    width = 0.35
    
    bars1 = ax1.bar(x - width/2, alexnet_accuracies, width, 
                   label='1D Alexnet', color='orange', alpha=0.8, edgecolor='black')
    bars2 = ax1.bar(x + width/2, extra_trees_accuracies, width,
                   label='Extra Trees', color='green', alpha=0.8, edgecolor='black')
    
    ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —à—É–º–∞', fontsize=14, fontweight='bold')
    ax1.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    ax1.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å', fontsize=12)
    ax1.set_xticks(x)
    ax1.set_xticklabels(noise_levels)
    ax1.legend(fontsize=11)
    ax1.grid(True, alpha=0.3)
    ax1.set_ylim(0, 1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, val in zip(bars1, alexnet_accuracies):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                f'{val:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
    for bar, val in zip(bars2, extra_trees_accuracies):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                f'{val:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –õ–∏–Ω–µ–π–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    ax2 = axes[0, 1]
    ax2.plot(noise_levels, alexnet_accuracies, 'o-', linewidth=3, markersize=10, 
            color='orange', label='1D Alexnet', markerfacecolor='orange')
    ax2.plot(noise_levels, extra_trees_accuracies, 's-', linewidth=3, markersize=10,
            color='green', label='Extra Trees', markerfacecolor='green')
    
    ax2.set_title('–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
    ax2.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    ax2.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å', fontsize=12)
    ax2.legend(fontsize=11)
    ax2.grid(True, alpha=0.3)
    ax2.set_ylim(0, 1)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    ax3 = axes[0, 2]
    relative_performance = [et/an if an > 0 else 0 for et, an in zip(extra_trees_accuracies, alexnet_accuracies)]
    
    colors = ['red' if rp < 1 else 'green' for rp in relative_performance]
    bars = ax3.bar(noise_levels, relative_performance, color=colors, alpha=0.7, edgecolor='black')
    
    ax3.axhline(y=1, color='black', linestyle='--', alpha=0.8, linewidth=2)
    ax3.set_title('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n(Extra Trees / Alexnet)', fontsize=14, fontweight='bold')
    ax3.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    ax3.set_ylabel('–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–µ–π', fontsize=12)
    ax3.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    for bar, val in zip(bars, relative_performance):
        ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                f'{val:.2f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    ax4 = axes[1, 0]
    
    alexnet_loss = [(alexnet_accuracies[0] - acc) / alexnet_accuracies[0] * 100 for acc in alexnet_accuracies]
    extra_trees_loss = [(extra_trees_accuracies[0] - acc) / extra_trees_accuracies[0] * 100 for acc in extra_trees_accuracies]
    
    ax4.plot(noise_levels, alexnet_loss, 'o-', linewidth=3, markersize=10, 
            color='orange', label='1D Alexnet')
    ax4.plot(noise_levels, extra_trees_loss, 's-', linewidth=3, markersize=10,
            color='green', label='Extra Trees')
    
    ax4.set_title('–ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π)', fontsize=14, fontweight='bold')
    ax4.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    ax4.set_ylabel('–ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (%)', fontsize=12)
    ax4.legend(fontsize=11)
    ax4.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: –û–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞
    ax5 = axes[1, 1]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –≥–¥–µ –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –ª—É—á—à–µ
    x_fine = np.linspace(0, 20, 100)
    
    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ª–∏–Ω–∏–π
    alexnet_interp = np.interp(x_fine, noise_levels, alexnet_accuracies)
    extra_trees_interp = np.interp(x_fine, noise_levels, extra_trees_accuracies)
    
    ax5.plot(x_fine, alexnet_interp, color='orange', linewidth=3, label='1D Alexnet')
    ax5.plot(x_fine, extra_trees_interp, color='green', linewidth=3, label='Extra Trees')
    
    # –ó–∞–ª–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç–∏
    ax5.fill_between(x_fine, alexnet_interp, extra_trees_interp, 
                    where=(alexnet_interp >= extra_trees_interp), 
                    color='orange', alpha=0.3, label='Alexnet –ª—É—á—à–µ')
    ax5.fill_between(x_fine, alexnet_interp, extra_trees_interp, 
                    where=(alexnet_interp < extra_trees_interp), 
                    color='green', alpha=0.3, label='Extra Trees –ª—É—á—à–µ')
    
    ax5.set_title('–û–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π', fontsize=14, fontweight='bold')
    ax5.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    ax5.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å', fontsize=12)
    ax5.legend(fontsize=11)
    ax5.grid(True, alpha=0.3)
    ax5.set_ylim(0, 1)
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –¢–∞–±–ª–∏—Ü–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    ax6 = axes[1, 2]
    ax6.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    characteristics = [
        ['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '1D Alexnet', 'Extra Trees'],
        ['–¢–æ—á–Ω–æ—Å—Ç—å (0% —à—É–º–∞)', '99.3%', '97.0%'],
        ['–¢–æ—á–Ω–æ—Å—Ç—å (1% —à—É–º–∞)', '97.2%', '97.0%'],
        ['–¢–æ—á–Ω–æ—Å—Ç—å (20% —à—É–º–∞)', '12.3%', '93.5%'],
        ['–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É', '–ù–∏–∑–∫–∞—è', '–í—ã—Å–æ–∫–∞—è'],
        ['–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏', '480 MB', '31 MB'],
        ['–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è', '~50 –º–∏–Ω', '~3 –º–∏–Ω'],
        ['–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å', '–ù–∏–∑–∫–∞—è', '–í—ã—Å–æ–∫–∞—è'],
        ['–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ', '–†—É—á–Ω–æ–µ'],
        ['–õ—É—á—à–µ –ø—Ä–∏ —à—É–º–µ ‚â§', '1%', '>1%']
    ]
    
    table = ax6.table(cellText=characteristics, 
                     cellLoc='center',
                     loc='center',
                     colWidths=[0.4, 0.3, 0.3])
    
    table.auto_set_font_size(False)
    table.set_fontsize(11)
    table.scale(1, 2)
    
    # –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    for i in range(len(characteristics)):
        for j in range(len(characteristics[0])):
            cell = table[(i, j)]
            if i == 0:  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                cell.set_facecolor('#4472C4')
                cell.set_text_props(weight='bold', color='white')
            elif j == 1:  # Alexnet –∫–æ–ª–æ–Ω–∫–∞
                cell.set_facecolor('#FFF2CC')
            elif j == 2:  # Extra Trees –∫–æ–ª–æ–Ω–∫–∞
                cell.set_facecolor('#E8F5E8')
            
            cell.set_edgecolor('black')
            cell.set_linewidth(1)
    
    ax6.set_title('–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫', fontsize=14, fontweight='bold', pad=20)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'final_comparison_alexnet_vs_extra_trees_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    return filename

def create_executive_summary():
    """–°–æ–∑–¥–∞–µ—Ç executive summary —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    
    print("\nüìã –°–û–ó–î–ê–ù–ò–ï EXECUTIVE SUMMARY...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'executive_summary_20_species_{timestamp}.txt'
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("EXECUTIVE SUMMARY: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("–ó–ê–î–ê–ß–ê:\n")
        f.write("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤\n")
        f.write("–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É.\n\n")
        
        f.write("–ò–°–°–õ–ï–î–û–í–ê–ù–ù–´–ï –ú–û–î–ï–õ–ò:\n")
        f.write("-" * 40 + "\n")
        f.write("1. 1D Alexnet (Convolutional Neural Network)\n")
        f.write("2. Extra Trees (Ensemble of Decision Trees)\n\n")
        
        f.write("–ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
        f.write("-" * 40 + "\n")
        f.write("                 ‚îÇ  0% —à—É–º–∞  ‚îÇ  1% —à—É–º–∞  ‚îÇ  5% —à—É–º–∞  ‚îÇ 10% —à—É–º–∞  ‚îÇ 20% —à—É–º–∞  ‚îÇ\n")
        f.write("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n")
        f.write("1D Alexnet       ‚îÇ   99.3%   ‚îÇ   97.2%   ‚îÇ   64.8%   ‚îÇ   33.7%   ‚îÇ   12.3%   ‚îÇ\n")
        f.write("Extra Trees      ‚îÇ   97.0%   ‚îÇ   97.0%   ‚îÇ   96.8%   ‚îÇ   95.5%   ‚îÇ   93.5%   ‚îÇ\n")
        f.write("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n")
        
        f.write("–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:\n")
        f.write("-" * 40 + "\n")
        f.write("‚úì 1D Alexnet –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–†–ï–í–û–°–•–û–î–ù–£–Æ —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö (99.3%)\n")
        f.write("‚úì Extra Trees –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–£–Æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É\n")
        f.write("‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: ~1.5% —à—É–º–∞\n")
        f.write("‚úì –ü—Ä–∏ —à—É–º–µ >5% Extra Trees –≤ 7-8 —Ä–∞–∑ —Ç–æ—á–Ω–µ–µ Alexnet\n\n")
        
        f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Æ:\n")
        f.write("-" * 40 + "\n")
        f.write("üéØ –õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï –£–°–õ–û–í–ò–Ø (—à—É–º ‚â§1%):\n")
        f.write("   ‚û§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1D Alexnet –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏\n")
        f.write("   ‚û§ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: 99.3% —Ç–æ—á–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n\n")
        
        f.write("üåç –ü–û–õ–ï–í–´–ï –£–°–õ–û–í–ò–Ø (—à—É–º >1%):\n")
        f.write("   ‚û§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Extra Trees –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
        f.write("   ‚û§ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ\n\n")
        
        f.write("üî¨ –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ó–ê–î–ê–ß–ò:\n")
        f.write("   ‚û§ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∞–Ω—Å–∞–º–±–ª—å –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π\n")
        f.write("   ‚û§ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è —à—É–º–∞\n\n")
        
        f.write("–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n")
        f.write("-" * 40 + "\n")
        f.write("1D Alexnet:\n")
        f.write("  ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è CNN —Å –≤–µ—Ç–≤—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø –≤–∏–¥–æ–≤\n")
        f.write("  ‚Ä¢ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: 480 MB\n")
        f.write("  ‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ~50 –º–∏–Ω—É—Ç\n")
        f.write("  ‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: GPU –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n")
        
        f.write("Extra Trees:\n")
        f.write("  ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º: –ê–Ω—Å–∞–º–±–ª—å –∏–∑ 200 —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤\n")
        f.write("  ‚Ä¢ –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: 31 MB\n")
        f.write("  ‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ~3 –º–∏–Ω—É—Ç—ã\n")
        f.write("  ‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n")
        
        f.write("–ù–ê–£–ß–ù–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –í–ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≤–µ–¥–µ–Ω —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É\n")
        f.write("  –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤\n")
        f.write("‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤\n")
        f.write("‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏ —Å –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π\n\n")
        
        f.write("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:\n")
        f.write("-" * 40 + "\n")
        f.write("üå≥ –õ–µ—Å–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –ª–µ—Å–æ–≤\n")
        f.write("üî¨ –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –æ—Ü–µ–Ω–∫–∞ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è\n")
        f.write("üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤\n")
        f.write("üèõÔ∏è –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç–∞–∫—Å–æ–Ω–æ–º–∏—è\n\n")
        
        f.write("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n")
        f.write("-" * 40 + "\n")
        f.write("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∏–ª–æ –∑–∞–¥–∞—á—É –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
        f.write("20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É\n")
        f.write("–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.\n\n")
        
        f.write(f"–û—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    print(f"   ‚úÖ Executive Summary: {filename}")
    return filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üèÜ" * 60)
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –î–õ–Ø 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í")
    print("üèÜ" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    comparison_file = create_final_comparison()
    
    # –°–æ–∑–¥–∞–µ–º executive summary
    summary_file = create_executive_summary()
    
    print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {comparison_file}")
    print(f"üìã Executive Summary: {summary_file}")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ü•á 1D Alexnet: 99.3% (—á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ), –æ—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
    print(f"   ü•à Extra Trees: 97.0% (—á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ), –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å")
    print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è —à—É–º–∞")
    
    print(f"\n‚ú® –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è!")

if __name__ == "__main__":
    main() 