#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô ExtraTreesClassifier –î–õ–Ø –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –®–£–ú–£
==============================================================

–°–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ExtraTreesClassifier
–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–î–∞—Ç–∞: 2024
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import ExtraTreesClassifier, VotingClassifier, GradientBoostingClassifier
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.preprocessing import RobustScaler, StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.svm import SVC
import warnings
warnings.filterwarnings('ignore')

class OptimizedExtraTreesConfig:
    """–ö–ª–∞—Å—Å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ ExtraTreesClassifier"""

    @staticmethod
    def get_baseline_config():
        """–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ç–µ–∫—É—â–∞—è –≤ —Å–∏—Å—Ç–µ–º–µ)"""
        return {
            'n_estimators': 200,
            'max_depth': 20,
            'min_samples_split': 5,
            'min_samples_leaf': 2,
            'max_features': 'sqrt',
            'random_state': 42,
            'n_jobs': -1,
            'verbose': 0
        }

    @staticmethod
    def get_noise_resistant_config():
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —É—Å—Ç–æ–π—á–∏–≤–∞—è –∫ —à—É–º—É"""
        return {
            'n_estimators': 300,
            'max_depth': 12,
            'min_samples_split': 15,
            'min_samples_leaf': 8,
            'max_features': 'sqrt',
            'random_state': 42,
            'n_jobs': -1,
            'bootstrap': False,
            'class_weight': 'balanced',
            'verbose': 0
        }

    @staticmethod
    def get_high_stability_config():
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            'n_estimators': 500,
            'max_depth': 10,
            'min_samples_split': 20,
            'min_samples_leaf': 10,
            'max_features': 'sqrt',
            'random_state': 42,
            'n_jobs': -1,
            'bootstrap': False,
            'class_weight': 'balanced',
            'verbose': 0
        }

    @staticmethod
    def get_balanced_config():
        """–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞)"""
        return {
            'n_estimators': 250,
            'max_depth': 15,
            'min_samples_split': 10,
            'min_samples_leaf': 5,
            'max_features': 'sqrt',
            'random_state': 42,
            'n_jobs': -1,
            'bootstrap': False,
            'class_weight': 'balanced',
            'verbose': 0
        }

class NoiseResistantPipeline:
    """–ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ —à—É–º—É –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""

    def __init__(self, config_type='noise_resistant'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞

        Args:
            config_type: —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ('baseline', 'noise_resistant',
                        'high_stability', 'balanced')
        """
        self.config_type = config_type
        self.model = None
        self.scaler = None
        self.selector = None
        self.is_fitted = False

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        configs = {
            'baseline': OptimizedExtraTreesConfig.get_baseline_config(),
            'noise_resistant': OptimizedExtraTreesConfig.get_noise_resistant_config(),
            'high_stability': OptimizedExtraTreesConfig.get_high_stability_config(),
            'balanced': OptimizedExtraTreesConfig.get_balanced_config()
        }

        self.config = configs.get(config_type, configs['noise_resistant'])

    def create_model(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        self.model = ExtraTreesClassifier(**self.config)
        return self.model

    def create_robust_scaler(self):
        """–°–æ–∑–¥–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –≤—ã–±—Ä–æ—Å–∞–º —Å–∫–µ–π–ª–µ—Ä"""
        self.scaler = RobustScaler()
        return self.scaler

    def create_feature_selector(self, k='auto'):
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

        Args:
            k: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ('auto' –¥–ª—è 80% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
        """
        self.selector = SelectKBest(f_classif, k=k)
        return self.selector

    def fit(self, X, y, use_feature_selection=True, feature_ratio=0.8):
        """
        –û–±—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω

        Args:
            X: –ø—Ä–∏–∑–Ω–∞–∫–∏
            y: —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            use_feature_selection: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_ratio: –¥–æ–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ç–±–æ—Ä–∞
        """
        print(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {self.config_type}")

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.create_robust_scaler()
        X_scaled = self.scaler.fit_transform(X)

        # –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if use_feature_selection:
            k = int(X.shape[1] * feature_ratio) if feature_ratio < 1 else 'all'
            self.create_feature_selector(k)
            X_scaled = self.selector.fit_transform(X_scaled, y)
            print(f"  üìä –û—Ç–æ–±—Ä–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_scaled.shape[1]} –∏–∑ {X.shape[1]}")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        self.create_model()
        self.model.fit(X_scaled, y)

        self.is_fitted = True
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")

        return self

    def predict(self, X):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        if not self.is_fitted:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fit() —Å–Ω–∞—á–∞–ª–∞.")

        X_scaled = self.scaler.transform(X)
        if self.selector:
            X_scaled = self.selector.transform(X_scaled)

        return self.model.predict(X_scaled)

    def predict_proba(self, X):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
        if not self.is_fitted:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fit() —Å–Ω–∞—á–∞–ª–∞.")

        X_scaled = self.scaler.transform(X)
        if self.selector:
            X_scaled = self.selector.transform(X_scaled)

        return self.model.predict_proba(X_scaled)

    def get_feature_importance(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if not self.is_fitted:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞.")

        return self.model.feature_importances_

class NoiseTestingFramework:
    """–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É"""

    def __init__(self):
        self.results = {}

    def add_noise(self, X, noise_level):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –¥–∞–Ω–Ω—ã–º

        Args:
            X: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            noise_level: —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (0.01 = 1%)
        """
        noise = np.random.normal(0, noise_level * np.std(X, axis=0), X.shape)
        return X + noise

    def test_configuration(self, X, y, config_type, noise_levels=[0.01, 0.05, 0.10],
                          n_iterations=10, test_size=0.3):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞

        Args:
            X, y: –¥–∞–Ω–Ω—ã–µ
            config_type: —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            noise_levels: —É—Ä–æ–≤–Ω–∏ —à—É–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            n_iterations: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
            test_size: —Ä–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
        """
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_type}")
        print("=" * 50)

        config_results = {}

        for noise_level in noise_levels:
            print(f"\nüìä –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level*100:.1f}%")

            accuracies = []

            for i in range(n_iterations):
                # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
                X_noisy = self.add_noise(X, noise_level)

                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                X_train, X_test, y_train, y_test = train_test_split(
                    X_noisy, y, test_size=test_size, random_state=i, stratify=y
                )

                # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                pipeline = NoiseResistantPipeline(config_type)
                pipeline.fit(X_train, y_train)

                # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
                y_pred = pipeline.predict(X_test)
                accuracy = accuracy_score(y_test, y_pred)
                accuracies.append(accuracy)

                if (i + 1) % 5 == 0:
                    print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{n_iterations}: {np.mean(accuracies[-5:]):.4f}")

            config_results[noise_level] = {
                'mean': np.mean(accuracies),
                'std': np.std(accuracies),
                'min': np.min(accuracies),
                'max': np.max(accuracies),
                'values': accuracies
            }

            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {np.mean(accuracies):.4f} ¬± {np.std(accuracies):.4f}")

        self.results[config_type] = config_results
        return config_results

    def compare_configurations(self, X, y, configs_to_test=None):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

        if configs_to_test is None:
            configs_to_test = ['baseline', 'noise_resistant', 'high_stability', 'balanced']

        print("\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
        print("=" * 60)

        for config in configs_to_test:
            self.test_configuration(X, y, config)

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        self.create_comparison_table()
        self.plot_comparison()

    def create_comparison_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

        print("\nüìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 80)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è".ljust(20)
        for noise_level in [0.01, 0.05, 0.10]:
            header += f"{noise_level*100:.0f}% —à—É–º–∞".center(15)
        print(header)
        print("-" * 80)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for config, results in self.results.items():
            row = config.ljust(20)
            for noise_level in [0.01, 0.05, 0.10]:
                if noise_level in results:
                    mean_acc = results[noise_level]['mean']
                    std_acc = results[noise_level]['std']
                    row += f"{mean_acc:.3f}¬±{std_acc:.3f}".center(15)
                else:
                    row += "N/A".center(15)
            print(row)

    def plot_comparison(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        noise_levels = [0.01, 0.05, 0.10]

        for config, results in self.results.items():
            means = [results[nl]['mean'] for nl in noise_levels if nl in results]
            stds = [results[nl]['std'] for nl in noise_levels if nl in results]

            ax1.errorbar([nl*100 for nl in noise_levels[:len(means)]], means,
                        yerr=stds, marker='o', label=config, linewidth=2, markersize=8)

        ax1.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
        ax1.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
        ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
        for config, results in self.results.items():
            stds = [results[nl]['std'] for nl in noise_levels if nl in results]

            ax2.plot([nl*100 for nl in noise_levels[:len(stds)]], stds,
                    marker='s', label=config, linewidth=2, markersize=8)

        ax2.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)')
        ax2.set_ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ')
        ax2.set_title('–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π')
        ax2.legend()
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('optimized_configurations_comparison.png', dpi=300, bbox_inches='tight')
        plt.show()

def create_ensemble_model():
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω—Å–∞–º–±–ª–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""

    # –†–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ExtraTreesClassifier
    et1 = ExtraTreesClassifier(**OptimizedExtraTreesConfig.get_noise_resistant_config())
    et2 = ExtraTreesClassifier(**OptimizedExtraTreesConfig.get_high_stability_config())

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    gb = GradientBoostingClassifier(n_estimators=100, max_depth=8, random_state=42)
    svm = SVC(probability=True, random_state=42)

    # –ê–Ω—Å–∞–º–±–ª—å
    ensemble = VotingClassifier([
        ('extra_trees_1', et1),
        ('extra_trees_2', et2),
        ('gradient_boost', gb),
        ('svm', svm)
    ], voting='soft')

    return ensemble

def demonstrate_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""

    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
    print("=" * 70)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    from sklearn.datasets import make_classification

    X, y = make_classification(
        n_samples=1000,
        n_features=50,
        n_informative=30,
        n_redundant=10,
        n_classes=5,
        random_state=42
    )

    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {X.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤, {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, {len(np.unique(y))} –∫–ª–∞—Å—Å–æ–≤")

    # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
    print("\n1Ô∏è‚É£ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    baseline = NoiseResistantPipeline('baseline')
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    baseline.fit(X_train, y_train)
    baseline_score = accuracy_score(y_test, baseline.predict(X_test))
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {baseline_score:.4f}")

    # –£—Å—Ç–æ–π—á–∏–≤–∞—è –∫ —à—É–º—É –º–æ–¥–µ–ª—å
    print("\n2Ô∏è‚É£ –£—Å—Ç–æ–π—á–∏–≤–∞—è –∫ —à—É–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    robust = NoiseResistantPipeline('noise_resistant')
    robust.fit(X_train, y_train)
    robust_score = accuracy_score(y_test, robust.predict(X_test))
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {robust_score:.4f}")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —à—É–º–æ–º
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å 10% —à—É–º–∞:")
    framework = NoiseTestingFramework()
    X_noisy = framework.add_noise(X, 0.10)
    X_train_noisy, X_test_noisy, y_train, y_test = train_test_split(
        X_noisy, y, test_size=0.3, random_state=42
    )

    baseline_noisy = NoiseResistantPipeline('baseline')
    baseline_noisy.fit(X_train_noisy, y_train)
    baseline_noisy_score = accuracy_score(y_test, baseline_noisy.predict(X_test_noisy))

    robust_noisy = NoiseResistantPipeline('noise_resistant')
    robust_noisy.fit(X_train_noisy, y_train)
    robust_noisy_score = accuracy_score(y_test, robust_noisy.predict(X_test_noisy))

    print(f"   –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å —à—É–º–æ–º: {baseline_noisy_score:.4f}")
    print(f"   –£—Å—Ç–æ–π—á–∏–≤–∞—è –º–æ–¥–µ–ª—å —Å —à—É–º–æ–º: {robust_noisy_score:.4f}")
    print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {robust_noisy_score - baseline_noisy_score:.4f}")

if __name__ == "__main__":

    print("üå≥ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô ExtraTreesClassifier")
    print("=" * 50)

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    demonstrate_usage()

    print("\n" + "=" * 50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   framework = NoiseTestingFramework()")
    print("   framework.compare_configurations(X, y)")
