#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ë–™–Ø–°–ù–ï–ù–ò–ï –ü–õ–û–¢–ù–û–°–¢–ò –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –ì–ê–£–°–°–û–í–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò RMS
–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

def explain_gaussian_density_and_rms():
    """–û–±—ä—è—Å–Ω—è–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≥–∞—É—Å—Å–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ RMS"""
    
    print("=================================================================================")
    print("üîç –ü–õ–û–¢–ù–û–°–¢–¨ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –ì–ê–£–°–°–û–í–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò RMS")
    print("=================================================================================")
    print("üìã –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏")
    print("=================================================================================")
    
    print("üìä –í–ê–® –í–û–ü–†–û–° –û –ü–õ–û–¢–ù–û–°–¢–ò –í–ï–†–û–Ø–¢–ù–û–°–¢–ò:")
    print("="*60)
    print("‚úÖ –í–´ –ê–ë–°–û–õ–Æ–¢–ù–û –ü–†–ê–í–´!")
    print("üìä –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≥–∞—É—Å—Å–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    print("   f(x) = 1/(œÉ‚àö(2œÄ)) * exp(-(x-Œº)¬≤/(2œÉ¬≤))")
    print("   –≥–¥–µ Œº = mean, œÉ = std (sigma)")
    
    print("\nüìã –î–õ–Ø –ì–ê–£–°–°–û–í–ê –®–£–ú–ê –° MEAN=0:")
    print("   f(x) = 1/(œÉ‚àö(2œÄ)) * exp(-x¬≤/(2œÉ¬≤))")
    print("   –≥–¥–µ œÉ = std (sigma) = noise_level")
    
    print("\n" + "="*80)
    print("üìà –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–£–õ–´")
    print("="*80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    noise_level = 0.1  # 10% —à—É–º
    n_samples = 100000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞—É—Å—Å–æ–≤ —à—É–º
    noise = np.random.normal(0, noise_level, n_samples)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean_val = np.mean(noise)
    std_val = np.std(noise)
    rms_val = np.sqrt(np.mean(noise**2))
    
    print(f"üîç –¢–ï–°–¢–û–í–´–ô –®–£–ú: {noise_level*100}% (œÉ={noise_level})")
    print("-" * 50)
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
    print(f"   ‚Ä¢ Mean (Œº): {mean_val:.8f} ‚âà 0")
    print(f"   ‚Ä¢ Std (œÉ): {std_val:.8f} ‚âà {noise_level:.3f}")
    print(f"   ‚Ä¢ RMS: {rms_val:.8f} ‚âà {noise_level:.3f}")
    
    print(f"\nüìê –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–£–õ:")
    print(f"   ‚Ä¢ std = ‚àö(mean((x - mean)¬≤)) = {std_val:.6f}")
    print(f"   ‚Ä¢ RMS = ‚àö(mean(x¬≤)) = {rms_val:.6f}")
    print(f"   ‚Ä¢ –î–ª—è mean‚âà0: RMS = std ‚úÖ")
    
    print(f"\nüìä –ü–õ–û–¢–ù–û–°–¢–¨ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò:")
    print(f"   ‚Ä¢ f(x) = 1/({std_val:.6f}*‚àö(2œÄ)) * exp(-x¬≤/(2*{std_val:.6f}¬≤))")
    print(f"   ‚Ä¢ f(x) = {1/(std_val*np.sqrt(2*np.pi)):.6f} * exp(-x¬≤/(2*{std_val**2:.6f}))")
    
    print("\n" + "="*80)
    print("‚ùì –û–¢–í–ï–¢ –ù–ê –í–ê–® –í–û–ü–†–û–° –û RMS")
    print("="*80)
    
    print("\nüîç –í–ê–® –í–û–ü–†–û–°: '–ü—Ä–æ –∫–æ—Ä–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞'")
    print("\nüìä –û–ë–™–Ø–°–ù–ï–ù–ò–ï –§–û–†–ú–£–õ–´ RMS:")
    print("   üìê RMS = Root Mean Square = ‚àö(mean(x¬≤))")
    print("   üìê –≠—Ç–æ –ù–ï –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏!")
    print("   üìê –≠—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞")
    
    print("\nüìã –†–ê–ó–ù–ò–¶–ê –ú–ï–ñ–î–£ –§–û–†–ú–£–õ–ê–ú–ò:")
    print("   1Ô∏è‚É£ –ü–õ–û–¢–ù–û–°–¢–¨ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò (–≤–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞):")
    print("      f(x) = 1/(œÉ‚àö(2œÄ)) * exp(-x¬≤/(2œÉ¬≤))")
    print("      –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π")
    
    print("\n   2Ô∏è‚É£ RMS (–Ω–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞):")
    print("      RMS = ‚àö(mean(x¬≤))")
    print("      –≠—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç '–º–æ—â–Ω–æ—Å—Ç—å' —Å–∏–≥–Ω–∞–ª–∞")
    
    print("\nüìä –°–í–Ø–ó–¨ –ú–ï–ñ–î–£ –ù–ò–ú–ò:")
    print("   ‚Ä¢ –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS = std")
    print("   ‚Ä¢ std –≤—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º—É–ª—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ RMS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–º–ø–ª–∏—Ç—É–¥—ã")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_gaussian_density_visualization()
    
    print("\n" + "="*80)
    print("‚úÖ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´")
    print("="*80)
    print("1. ‚úÖ –í–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
    print("2. ‚úÖ RMS = ‚àö(mean(x¬≤)) - —ç—Ç–æ –¥—Ä—É–≥–∞—è —Ñ–æ—Ä–º—É–ª–∞, –Ω–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
    print("3. ‚úÖ –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS = std")
    print("4. ‚úÖ std –≤—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º—É–ª—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    print("5. ‚úÖ –û–±–µ —Ñ–æ—Ä–º—É–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã")
    print("="*80)

def create_gaussian_density_visualization():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ RMS"""
    
    print("\nüìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò...")
    
    np.random.seed(42)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    noise_level = 0.1  # 10% —à—É–º
    n_samples = 10000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º
    noise = np.random.normal(0, noise_level, n_samples)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean_val = np.mean(noise)
    std_val = np.std(noise)
    rms_val = np.sqrt(np.mean(noise**2))
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    ax1.hist(noise, bins=50, alpha=0.7, color='red', edgecolor='black', density=True, label='–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    x = np.linspace(-4*noise_level, 4*noise_level, 1000)
    y_density = (1/(std_val*np.sqrt(2*np.pi))) * np.exp(-0.5*((x-mean_val)/std_val)**2)
    ax1.plot(x, y_density, 'b-', linewidth=2, label='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
    
    ax1.set_title(f'–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞\nœÉ={std_val:.4f}', fontsize=12, fontweight='bold')
    ax1.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ —à—É–º–∞')
    ax1.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
    ax1.grid(True, alpha=0.3)
    ax1.legend()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É
    formula_text = f'f(x) = 1/(œÉ‚àö(2œÄ)) * exp(-x¬≤/(2œÉ¬≤))\nœÉ = {std_val:.4f}'
    ax1.text(0.02, 0.98, formula_text, transform=ax1.transAxes, 
            verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", 
            facecolor="white", alpha=0.8), fontsize=10)
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    ax1.axvline(x=0, color='green', linestyle='--', alpha=0.7, label='Mean=0')
    ax1.axvline(x=std_val, color='orange', linestyle='--', alpha=0.7, label=f'Std={std_val:.3f}')
    ax1.axvline(x=-std_val, color='orange', linestyle='--', alpha=0.7)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: RMS –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º x¬≤
    x_squared = noise**2
    ax2.hist(x_squared, bins=50, alpha=0.7, color='purple', edgecolor='black', density=True, label='x¬≤')
    
    # –°—Ä–µ–¥–Ω–µ–µ x¬≤
    mean_x_squared = np.mean(x_squared)
    ax2.axvline(x=mean_x_squared, color='red', linestyle='--', linewidth=2, label=f'mean(x¬≤)={mean_x_squared:.4f}')
    
    # RMS
    ax2.axvline(x=rms_val**2, color='blue', linestyle='--', linewidth=2, label=f'RMS¬≤={rms_val**2:.4f}')
    
    ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ x¬≤ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ RMS\nRMS = ‚àö(mean(x¬≤)) = {rms_val:.4f}', fontsize=12, fontweight='bold')
    ax2.set_xlabel('x¬≤')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax2.grid(True, alpha=0.3)
    ax2.legend()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É RMS
    rms_formula = f'RMS = ‚àö(mean(x¬≤))\nRMS = ‚àö({mean_x_squared:.4f})\nRMS = {rms_val:.4f}'
    ax2.text(0.02, 0.98, rms_formula, transform=ax2.transAxes, 
            verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", 
            facecolor="white", alpha=0.8), fontsize=10)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    filename = 'gaussian_density_rms_explanation.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    plt.show()

if __name__ == "__main__":
    explain_gaussian_density_and_rms() 