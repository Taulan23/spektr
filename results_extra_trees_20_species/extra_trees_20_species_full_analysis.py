#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXTRA TREES –î–õ–Ø 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í –° –ü–û–õ–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú –®–£–ú–ê
–û–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Å–µ–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —à—É–º–∞
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.impute import SimpleImputer
import pickle
import os
import glob
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

def load_20_species_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö 20 –≤–∏–¥–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–ª–µ–Ω_–∞–º)"""
    
    spring_folder = "–°–ø–µ–∫—Ç—Ä—ã, –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, 20 –≤–∏–¥–æ–≤"
    
    print("üå± –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• 20 –í–ò–î–û–í...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
    all_folders = [f for f in os.listdir(spring_folder) 
                   if os.path.isdir(os.path.join(spring_folder, f)) and not f.startswith('.')]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–µ–Ω_–∞–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏
    if "–∫–ª–µ–Ω_–∞–º" not in all_folders:
        if os.path.exists("–∫–ª–µ–Ω_–∞–º"):
            all_folders.append("–∫–ª–µ–Ω_–∞–º")
    
    print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(all_folders)}")
    
    all_data = []
    all_labels = []
    species_counts = {}
    
    for species in sorted(all_folders):
        if species == "–∫–ª–µ–Ω_–∞–º":
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–ª–µ–Ω_–∞–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö)
            species_folder = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ
            main_folder_path = os.path.join("–∫–ª–µ–Ω_–∞–º", "–∫–ª–µ–Ω_–∞–º")
            if os.path.exists(main_folder_path):
                species_folder = main_folder_path
            elif os.path.exists("–∫–ª–µ–Ω_–∞–º"):
                species_folder = "–∫–ª–µ–Ω_–∞–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–ø–∫–µ –≤–µ—Å–µ–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if species_folder is None:
                spring_path = os.path.join(spring_folder, species)
                if os.path.exists(spring_path):
                    subfolder_path = os.path.join(spring_path, species)
                    if os.path.exists(subfolder_path):
                        species_folder = subfolder_path
                    else:
                        species_folder = spring_path
        else:
            species_folder = os.path.join(spring_folder, species)
        
        if species_folder is None or not os.path.exists(species_folder):
            print(f"   ‚ö†Ô∏è  {species}: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
            
        files = glob.glob(os.path.join(species_folder, "*.xlsx"))
        
        print(f"   üå≥ {species}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        species_counts[species] = len(files)
        
        species_data = []
        for file in files:
            try:
                df = pd.read_excel(file, header=None)
                spectrum = df.iloc[:, 1].values  # –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å–ø–µ–∫—Ç—Ä
                spectrum = spectrum[~pd.isna(spectrum)]  # –£–±–∏—Ä–∞–µ–º NaN
                species_data.append(spectrum)
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file}: {e}")
                continue
        
        if species_data:
            all_data.extend(species_data)
            all_labels.extend([species] * len(species_data))
    
    print(f"\nüìä –ò–¢–û–ì–û –ó–ê–ì–†–£–ñ–ï–ù–û:")
    for species, count in species_counts.items():
        print(f"   üå≥ {species}: {count} —Å–ø–µ–∫—Ç—Ä–æ–≤")
    
    print(f"\n‚úÖ –û–±—â–∏–π –∏—Ç–æ–≥: {len(all_data)} —Å–ø–µ–∫—Ç—Ä–æ–≤, {len(set(all_labels))} –≤–∏–¥–æ–≤")
    
    return all_data, all_labels, species_counts

def preprocess_spectra(spectra_list):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ–∫—Ç—Ä–æ–≤"""
    
    print("üîß –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ï–ö–¢–†–û–í...")
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    min_length = min(len(spectrum) for spectrum in spectra_list)
    print(f"   üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ø–µ–∫—Ç—Ä–∞: {min_length}")
    
    # –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Å–ø–µ–∫—Ç—Ä—ã –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    processed_spectra = []
    for spectrum in spectra_list:
        truncated = spectrum[:min_length]
        processed_spectra.append(truncated)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
    X = np.array(processed_spectra)
    print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
    
    return X

def extract_enhanced_features(X):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Å–ø–µ–∫—Ç—Ä–æ–≤"""
    
    print("‚öôÔ∏è –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í...")
    
    features_list = []
    
    for spectrum in X:
        features = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        features.extend([
            np.mean(spectrum),
            np.std(spectrum),
            np.median(spectrum),
            np.min(spectrum),
            np.max(spectrum),
            np.ptp(spectrum),  # peak-to-peak
            np.var(spectrum)
        ])
        
        # –ö–≤–∞–Ω—Ç–∏–ª–∏
        quantiles = np.percentile(spectrum, [10, 25, 75, 90])
        features.extend(quantiles)
        
        # –ú–æ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        features.extend([
            np.sum(spectrum),
            np.sum(spectrum**2),
            np.sum(spectrum**3),
            np.sum(spectrum**4)
        ])
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if len(spectrum) > 1:
            diff1 = np.diff(spectrum)
            diff2 = np.diff(diff1) if len(diff1) > 1 else [0]
            
            features.extend([
                np.mean(diff1),
                np.std(diff1),
                np.mean(diff2) if len(diff2) > 0 else 0,
                np.std(diff2) if len(diff2) > 0 else 0
            ])
        else:
            features.extend([0, 0, 0, 0])
        
        # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if len(spectrum) > 10:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–µ–∫—Ç—Ä –Ω–∞ —á–∞—Å—Ç–∏
            n_parts = 5
            part_size = len(spectrum) // n_parts
            
            for i in range(n_parts):
                start_idx = i * part_size
                end_idx = start_idx + part_size if i < n_parts - 1 else len(spectrum)
                part = spectrum[start_idx:end_idx]
                
                features.extend([
                    np.mean(part),
                    np.std(part),
                    np.max(part),
                    np.min(part)
                ])
        else:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –µ—Å–ª–∏ —Å–ø–µ–∫—Ç—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            features.extend([0] * (5 * 4))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features.extend([
            np.sum(spectrum > np.mean(spectrum)),  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            np.sum(spectrum < np.mean(spectrum)),  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            len(spectrum),  # –¥–ª–∏–Ω–∞ —Å–ø–µ–∫—Ç—Ä–∞
            np.argmax(spectrum),  # –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º—É–º–∞
            np.argmin(spectrum),  # –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º—É–º–∞
        ])
        
        features_list.append(features)
    
    features_array = np.array(features_list)
    print(f"   üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features_array.shape[1]}")
    
    return features_array

def add_noise(X, noise_level):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–π —à—É–º –∫ –¥–∞–Ω–Ω—ã–º"""
    if noise_level == 0:
        return X
    
    noise = np.random.normal(0, noise_level * np.std(X), X.shape)
    return X + noise

def train_extra_trees_model(X_train, y_train):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å Extra Trees"""
    
    print("üå≥ –û–ë–£–ß–ï–ù–ò–ï EXTRA TREES...")
    
    # –ú–æ–¥–µ–ª—å Extra Trees —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    model = ExtraTreesClassifier(
        n_estimators=200,
        max_depth=20,
        min_samples_split=5,
        min_samples_leaf=2,
        max_features='sqrt',
        random_state=42,
        n_jobs=-1,
        verbose=1
    )
    
    # –û–±—É—á–µ–Ω–∏–µ
    model.fit(X_train, y_train)
    
    return model

def evaluate_model_with_noise(model, X_test, y_test, species_names, noise_levels=[0, 1, 5, 10, 20]):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —à—É–º–∞"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –®–£–ú–£...")
    
    results = {}
    confusion_matrices = {}
    
    for noise_level in noise_levels:
        print(f"\n   üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {noise_level}% —à—É–º–∞...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        X_test_noisy = add_noise(X_test, noise_level / 100.0)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred = model.predict(X_test_noisy)
        
        # –¢–æ—á–Ω–æ—Å—Ç—å
        accuracy = accuracy_score(y_test, y_pred)
        results[noise_level] = accuracy
        
        # Confusion matrix
        cm = confusion_matrix(y_test, y_pred, labels=range(len(species_names)))
        confusion_matrices[noise_level] = cm
        
        print(f"     üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f} ({accuracy*100:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if noise_level == 0:
            print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô CLASSIFICATION REPORT (0% —à—É–º–∞):")
            report = classification_report(y_test, y_pred, target_names=species_names, zero_division=0)
            print(report)
    
    return results, confusion_matrices

def create_noise_analysis_visualizations(results, confusion_matrices, species_names, timestamp):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —à—É–º–∞"""
    
    print("üìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô...")
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ—á–Ω–æ—Å—Ç—å vs —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞
    plt.figure(figsize=(20, 15))
    
    # Subplot 1: –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    plt.subplot(2, 3, 1)
    noise_levels = list(results.keys())
    accuracies = list(results.values())
    
    plt.plot(noise_levels, accuracies, 'bo-', linewidth=3, markersize=10, markerfacecolor='blue')
    plt.title('Extra Trees: –¢–æ—á–Ω–æ—Å—Ç—å vs –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞\n20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤', fontsize=14, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=12)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å', fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    for noise, acc in zip(noise_levels, accuracies):
        plt.annotate(f'{acc:.3f}', (noise, acc), textcoords="offset points", 
                    xytext=(0,10), ha='center', fontsize=10, fontweight='bold')
    
    # Subplot 2: Confusion matrix –¥–ª—è 0% —à—É–º–∞
    plt.subplot(2, 3, 2)
    cm_clean = confusion_matrices[0]
    cm_normalized = cm_clean.astype('float') / cm_clean.sum(axis=1)[:, np.newaxis]
    
    sns.heatmap(cm_normalized, 
                xticklabels=species_names, 
                yticklabels=species_names,
                annot=True, 
                fmt='.2f',
                cmap='Blues',
                square=True,
                cbar_kws={'shrink': 0.8})
    
    plt.title('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è Confusion Matrix\n0% —à—É–º–∞', fontsize=12, fontweight='bold')
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=10)
    plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=10)
    plt.xticks(rotation=45, ha='right', fontsize=8)
    plt.yticks(rotation=0, fontsize=8)
    
    # Subplot 3: Confusion matrix –¥–ª—è 20% —à—É–º–∞
    plt.subplot(2, 3, 3)
    cm_noisy = confusion_matrices[20]
    cm_noisy_normalized = cm_noisy.astype('float') / cm_noisy.sum(axis=1)[:, np.newaxis]
    
    sns.heatmap(cm_noisy_normalized, 
                xticklabels=species_names, 
                yticklabels=species_names,
                annot=True, 
                fmt='.2f',
                cmap='Reds',
                square=True,
                cbar_kws={'shrink': 0.8})
    
    plt.title('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è Confusion Matrix\n20% —à—É–º–∞', fontsize=12, fontweight='bold')
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=10)
    plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=10)
    plt.xticks(rotation=45, ha='right', fontsize=8)
    plt.yticks(rotation=0, fontsize=8)
    
    # Subplot 4: –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≤–∏–¥–∞–º
    plt.subplot(2, 3, 4)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –≤–∏–¥–∞–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞
    species_degradation = {}
    for species_idx, species in enumerate(species_names):
        degradation = []
        for noise_level in noise_levels:
            cm = confusion_matrices[noise_level]
            if cm.sum() > 0:
                # –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ = –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —ç—Ç–æ–≥–æ –≤–∏–¥–∞
                correct = cm[species_idx, species_idx]
                total = cm[species_idx, :].sum()
                accuracy = correct / total if total > 0 else 0
                degradation.append(accuracy)
            else:
                degradation.append(0)
        species_degradation[species] = degradation
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –≤–∏–¥–æ–≤ –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    stability_scores = []
    for species, degradation in species_degradation.items():
        stability = np.std(degradation)
        stability_scores.append((species, stability, np.mean(degradation)))
    
    stability_scores.sort(key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    top_stable = stability_scores[:10]
    
    for species, _, _ in top_stable:
        degradation = species_degradation[species]
        plt.plot(noise_levels, degradation, 'o-', label=species, linewidth=2, markersize=6)
    
    plt.title('–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≤–∏–¥–∞–º\n(–¢–æ–ø-10 —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö)', fontsize=12, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=10)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å –≤–∏–¥–∞', fontsize=10)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=8)
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 1)
    
    # Subplot 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å Alexnet
    plt.subplot(2, 3, 5)
    
    # –î–∞–Ω–Ω—ã–µ Alexnet (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    alexnet_accuracies = [0.993, 0.972, 0.648, 0.337, 0.123]
    extra_trees_accuracies = accuracies
    
    x = np.arange(len(noise_levels))
    width = 0.35
    
    plt.bar(x - width/2, alexnet_accuracies, width, label='1D Alexnet', color='orange', alpha=0.8)
    plt.bar(x + width/2, extra_trees_accuracies, width, label='Extra Trees', color='green', alpha=0.8)
    
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: Alexnet vs Extra Trees\n–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É', fontsize=12, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (%)', fontsize=10)
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å', fontsize=10)
    plt.xticks(x, noise_levels)
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.ylim(0, 1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    for i, (alexnet_acc, et_acc) in enumerate(zip(alexnet_accuracies, extra_trees_accuracies)):
        plt.text(i - width/2, alexnet_acc + 0.02, f'{alexnet_acc:.3f}', 
                ha='center', va='bottom', fontsize=8, fontweight='bold')
        plt.text(i + width/2, et_acc + 0.02, f'{et_acc:.3f}', 
                ha='center', va='bottom', fontsize=8, fontweight='bold')
    
    # Subplot 6: Feature importance (—Ç–æ–ø-20)
    plt.subplot(2, 3, 6)
    
    # –ü–æ–ª—É—á–∞–µ–º feature importance –∏–∑ –º–æ–¥–µ–ª–∏
    feature_names = [f'feature_{i}' for i in range(len(model.feature_importances_))]
    importance_df = pd.DataFrame({
        'feature': feature_names,
        'importance': model.feature_importances_
    }).sort_values('importance', ascending=True).tail(20)
    
    plt.barh(range(len(importance_df)), importance_df['importance'], color='skyblue', alpha=0.8)
    plt.yticks(range(len(importance_df)), importance_df['feature'])
    plt.title('Feature Importance\n(–¢–æ–ø-20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)', fontsize=12, fontweight='bold')
    plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞', fontsize=10)
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    filename = f'extra_trees_20_species_analysis_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    return filename

def create_individual_confusion_matrices(confusion_matrices, species_names, timestamp):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ confusion matrices –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞"""
    
    print("üìä –°–û–ó–î–ê–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• CONFUSION MATRICES...")
    
    created_files = []
    noise_levels = list(confusion_matrices.keys())
    
    for noise_level in noise_levels:
        print(f"   üé® –°–æ–∑–¥–∞–Ω–∏–µ confusion matrix –¥–ª—è {noise_level}% —à—É–º–∞...")
        
        cm = confusion_matrices[noise_level]
        cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        
        plt.figure(figsize=(18, 16))
        
        sns.heatmap(cm_normalized, 
                   xticklabels=species_names, 
                   yticklabels=species_names,
                   annot=True, 
                   fmt='.3f',
                   cmap='Blues',
                   square=True,
                   linewidths=0.5,
                   vmin=0, vmax=1,
                   cbar_kws={'shrink': 0.8, 'label': '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'})
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        total_accuracy = np.trace(cm) / np.sum(cm)
        
        plt.title(f'EXTRA TREES: –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø CONFUSION MATRIX\n' +
                 f'–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level}% | –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {total_accuracy:.1%}\n' +
                 f'–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –≤ 1.0 (100%)',
                 fontsize=16, fontweight='bold', pad=30)
        
        plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=14)
        plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å', fontsize=14)
        
        plt.xticks(rotation=45, ha='right', fontsize=11)
        plt.yticks(rotation=0, fontsize=11)
        
        plt.tight_layout()
        
        filename = f'extra_trees_20_normalized_confusion_matrix_{noise_level}percent_{timestamp}.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        created_files.append(filename)
        print(f"     ‚úÖ {filename}")
    
    return created_files

def save_results(model, scaler, label_encoder, results, confusion_matrices, species_names, timestamp):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–æ–¥–µ–ª–∏"""
    
    print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    model_filename = f'extra_trees_20_species_model_{timestamp}.pkl'
    with open(model_filename, 'wb') as f:
        pickle.dump(model, f)
    print(f"   üì¶ –ú–æ–¥–µ–ª—å: {model_filename}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º scaler
    scaler_filename = f'extra_trees_20_species_scaler_{timestamp}.pkl'
    with open(scaler_filename, 'wb') as f:
        pickle.dump(scaler, f)
    print(f"   üì¶ Scaler: {scaler_filename}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º label encoder
    encoder_filename = f'extra_trees_20_species_label_encoder_{timestamp}.pkl'
    with open(encoder_filename, 'wb') as f:
        pickle.dump(label_encoder, f)
    print(f"   üì¶ Label Encoder: {encoder_filename}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à—É–º–∞
    results_filename = f'extra_trees_20_species_noise_results_{timestamp}.txt'
    with open(results_filename, 'w', encoding='utf-8') as f:
        f.write("EXTRA TREES: –ê–ù–ê–õ–ò–ó –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –®–£–ú–£\n")
        f.write("20 –≤–∏–¥–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤\n")
        f.write("=" * 60 + "\n\n")
        
        f.write("–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
        for noise_level, accuracy in results.items():
            f.write(f"  {noise_level}% —à—É–º–∞: {accuracy:.3f} ({accuracy*100:.1f}%)\n")
        
        f.write("\n" + "=" * 60 + "\n\n")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–∏–¥–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —à—É–º–∞
        for noise_level in sorted(results.keys()):
            f.write(f"–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ - {noise_level}% –®–£–ú–ê:\n")
            f.write("-" * 40 + "\n")
            
            cm = confusion_matrices[noise_level]
            
            # –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –≤–∏–¥–∞–º
            for i, species in enumerate(species_names):
                if cm[i, :].sum() > 0:
                    species_accuracy = cm[i, i] / cm[i, :].sum()
                    f.write(f"  {species}: {species_accuracy:.3f} ({species_accuracy*100:.1f}%)\n")
                else:
                    f.write(f"  {species}: 0.000 (0.0%)\n")
            
            f.write("\n")
    
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_filename}")
    
    return model_filename, scaler_filename, encoder_filename, results_filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üå≥" * 60)
    print("üå≥ EXTRA TREES –î–õ–Ø 20 –í–ò–î–û–í –î–ï–†–ï–í–¨–ï–í")
    print("üå≥ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –®–£–ú–£")
    print("üå≥" * 60)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    spectra_list, labels, species_counts = load_20_species_data()
    
    if len(spectra_list) == 0:
        print("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return
    
    # 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ–∫—Ç—Ä–æ–≤
    X_spectra = preprocess_spectra(spectra_list)
    
    # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    X_features = extract_enhanced_features(X_spectra)
    
    # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–æ–∫
    label_encoder = LabelEncoder()
    y = label_encoder.fit_transform(labels)
    species_names = label_encoder.classes_
    
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"   üî¢ –§–æ—Ä–º–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_features.shape}")
    print(f"   üè∑Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(species_names)}")
    print(f"   üìã –í–∏–¥—ã: {list(species_names)}")
    
    # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π
    print("\nüîß –û–ë–†–ê–ë–û–¢–ö–ê NaN –ó–ù–ê–ß–ï–ù–ò–ô...")
    imputer = SimpleImputer(strategy='mean')
    X_features_clean = imputer.fit_transform(X_features)
    
    # 6. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("‚öñÔ∏è –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í...")
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X_features_clean)
    
    # 7. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
    print("‚úÇÔ∏è –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê TRAIN/TEST...")
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.2, random_state=42, stratify=y
    )
    
    print(f"   üìä Train: {X_train.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
    print(f"   üìä Test: {X_test.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    # 8. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    global model  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    model = train_extra_trees_model(X_train, y_train)
    
    # 9. –ê–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —à—É–º—É
    results, confusion_matrices = evaluate_model_with_noise(
        model, X_test, y_test, species_names
    )
    
    # 10. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    analysis_file = create_noise_analysis_visualizations(
        results, confusion_matrices, species_names, timestamp
    )
    
    # 11. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö confusion matrices
    cm_files = create_individual_confusion_matrices(
        confusion_matrices, species_names, timestamp
    )
    
    # 12. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    model_file, scaler_file, encoder_file, results_file = save_results(
        model, scaler, label_encoder, results, confusion_matrices, species_names, timestamp
    )
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó EXTRA TREES –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"   üå≥ –ú–æ–¥–µ–ª—å: {model_file}")
    print(f"   ‚öñÔ∏è Scaler: {scaler_file}")
    print(f"   üè∑Ô∏è  Label Encoder: {encoder_file}")
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_file}")
    print(f"   üìà –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑: {analysis_file}")
    print(f"   üìä Confusion matrices:")
    for cm_file in cm_files:
        noise_level = cm_file.split('_')[6].replace('percent', '')
        print(f"     üìä {noise_level}% —à—É–º–∞: {cm_file}")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ EXTRA TREES:")
    for noise_level, accuracy in results.items():
        print(f"   üìä {noise_level}% —à—É–º–∞: {accuracy:.3f} ({accuracy*100:.1f}%)")
    
    print(f"\n‚ú® –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É results_extra_trees_20_species!")

if __name__ == "__main__":
    main() 