#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–í–Ø–ó–¨ –ú–ï–ñ–î–£ STD, –î–ò–°–ü–ï–†–°–ò–ï–ô –ò RMS
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π
"""

import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

def explain_std_variance_rms_relationship():
    """–û–±—ä—è—Å–Ω—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É std, –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π –∏ RMS"""
    
    print("=================================================================================")
    print("üîç –°–í–Ø–ó–¨ –ú–ï–ñ–î–£ STD, –î–ò–°–ü–ï–†–°–ò–ï–ô –ò RMS")
    print("=================================================================================")
    print("üìã –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π")
    print("=================================================================================")
    
    print("üìä –í–ê–®–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï STD:")
    print("="*60)
    print("‚úÖ –í–´ –ê–ë–°–û–õ–Æ–¢–ù–û –ü–†–ê–í–´!")
    print("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (std):")
    print("   std = ‚àö(Œ£(x - mean)¬≤ / n)")
    print("   –≥–¥–µ n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—á–µ—Ç–æ–≤")
    print("   –≠—Ç–æ –∫–æ—Ä–µ–Ω—å –∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏!")
    
    print("\nüìã –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–£–õ–´:")
    print("="*60)
    print("1Ô∏è‚É£ –î–ò–°–ü–ï–†–°–ò–Ø (Variance):")
    print("   œÉ¬≤ = Œ£(x - mean)¬≤ / n")
    print("   –∏–ª–∏ œÉ¬≤ = mean((x - mean)¬≤)")
    
    print("\n2Ô∏è‚É£ –°–¢–ê–ù–î–ê–†–¢–ù–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï (Std):")
    print("   œÉ = ‚àö(œÉ¬≤) = ‚àö(Œ£(x - mean)¬≤ / n)")
    print("   œÉ = ‚àö(mean((x - mean)¬≤))")
    
    print("\n3Ô∏è‚É£ RMS (Root Mean Square):")
    print("   RMS = ‚àö(mean(x¬≤))")
    print("   RMS = ‚àö(Œ£(x¬≤) / n)")
    
    print("\n" + "="*80)
    print("üìà –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("="*80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    noise_level = 0.1  # 10% —à—É–º
    n_samples = 1000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞—É—Å—Å–æ–≤ —à—É–º
    noise = np.random.normal(0, noise_level, n_samples)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
    mean_val = np.mean(noise)
    
    # –î–∏—Å–ø–µ—Ä—Å–∏—è
    variance = np.mean((noise - mean_val)**2)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–∫–æ—Ä–µ–Ω—å –∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏)
    std_val = np.sqrt(variance)
    
    # RMS
    rms_val = np.sqrt(np.mean(noise**2))
    
    print(f"üîç –¢–ï–°–¢–û–í–´–ô –®–£–ú: {noise_level*100}% (œÉ={noise_level})")
    print("-" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚Ä¢ Mean: {mean_val:.8f} ‚âà 0")
    print(f"   ‚Ä¢ Variance (œÉ¬≤): {variance:.8f} ‚âà {noise_level**2:.6f}")
    print(f"   ‚Ä¢ Std (œÉ): {std_val:.8f} ‚âà {noise_level:.3f}")
    print(f"   ‚Ä¢ RMS: {rms_val:.8f} ‚âà {noise_level:.3f}")
    
    print(f"\nüìê –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–£–õ:")
    print(f"   ‚Ä¢ std = ‚àö(variance): {std_val:.6f} = ‚àö({variance:.6f}) ‚úÖ")
    print(f"   ‚Ä¢ std = ‚àö(mean((x - mean)¬≤)): {std_val:.6f} ‚úÖ")
    print(f"   ‚Ä¢ RMS = ‚àö(mean(x¬≤)): {rms_val:.6f} ‚úÖ")
    print(f"   ‚Ä¢ –î–ª—è mean‚âà0: RMS = std ‚úÖ")
    
    print(f"\nüìä –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–ê–®–ï–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
    print(f"   ‚Ä¢ std = –∫–æ—Ä–µ–Ω—å –∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ ‚úÖ")
    print(f"   ‚Ä¢ std = ‚àö(Œ£(x - mean)¬≤ / n) ‚úÖ")
    print(f"   ‚Ä¢ std = ‚àö({variance:.6f}) = {std_val:.6f} ‚úÖ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    print(f"\nüìã –ü–û–®–ê–ì–û–í–´–ô –†–ê–°–ß–ï–¢:")
    print(f"   1. –í—ã—á–∏—Å–ª—è–µ–º mean: {mean_val:.6f}")
    print(f"   2. –í—ã—á–∏—Å–ª—è–µ–º (x - mean)¬≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞")
    print(f"   3. –ù–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–Ω–µ–µ: {variance:.6f} (–¥–∏—Å–ø–µ—Ä—Å–∏—è)")
    print(f"   4. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–µ–Ω—å: ‚àö({variance:.6f}) = {std_val:.6f} (std)")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_relationship_visualization()
    
    print("\n" + "="*80)
    print("‚úÖ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´")
    print("="*80)
    print("1. ‚úÖ –í–∞—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ std –∞–±—Å–æ–ª—é—Ç–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("2. ‚úÖ std = –∫–æ—Ä–µ–Ω—å –∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏")
    print("3. ‚úÖ std = ‚àö(Œ£(x - mean)¬≤ / n)")
    print("4. ‚úÖ –î–ª—è –≥–∞—É—Å—Å–æ–≤–∞ —à—É–º–∞ —Å mean=0: RMS = std")
    print("5. ‚úÖ –í—Å–µ —Ñ–æ—Ä–º—É–ª—ã –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    print("="*80)

def create_relationship_visualization():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–≤—è–∑–∏ –º–µ–∂–¥—É std, –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π –∏ RMS"""
    
    print("\nüìä –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò...")
    
    np.random.seed(42)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    noise_level = 0.1  # 10% —à—É–º
    n_samples = 1000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—É–º
    noise = np.random.normal(0, noise_level, n_samples)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean_val = np.mean(noise)
    variance = np.mean((noise - mean_val)**2)
    std_val = np.sqrt(variance)
    rms_val = np.sqrt(np.mean(noise**2))
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ax1.hist(noise, bins=30, alpha=0.7, color='blue', edgecolor='black', density=True)
    ax1.set_title(f'–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\nMean={mean_val:.4f}', fontsize=12, fontweight='bold')
    ax1.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax1.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax1.grid(True, alpha=0.3)
    ax1.axvline(x=mean_val, color='red', linestyle='--', linewidth=2, label=f'Mean={mean_val:.4f}')
    ax1.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: (x - mean)¬≤
    squared_diff = (noise - mean_val)**2
    ax2.hist(squared_diff, bins=30, alpha=0.7, color='green', edgecolor='black', density=True)
    ax2.set_title(f'(x - mean)¬≤\nVariance={variance:.6f}', fontsize=12, fontweight='bold')
    ax2.set_xlabel('(x - mean)¬≤')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax2.grid(True, alpha=0.3)
    ax2.axvline(x=variance, color='red', linestyle='--', linewidth=2, label=f'Mean={variance:.6f}')
    ax2.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: x¬≤
    x_squared = noise**2
    ax3.hist(x_squared, bins=30, alpha=0.7, color='purple', edgecolor='black', density=True)
    ax3.set_title(f'x¬≤\nMean(x¬≤)={np.mean(x_squared):.6f}', fontsize=12, fontweight='bold')
    ax3.set_xlabel('x¬≤')
    ax3.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax3.grid(True, alpha=0.3)
    ax3.axvline(x=np.mean(x_squared), color='red', linestyle='--', linewidth=2, label=f'Mean={np.mean(x_squared):.6f}')
    ax3.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
    formulas = ['std = ‚àö(variance)', 'std = ‚àö(mean((x-mean)¬≤))', 'RMS = ‚àö(mean(x¬≤))']
    values = [std_val, std_val, rms_val]
    colors = ['blue', 'green', 'purple']
    
    bars = ax4.bar(formulas, values, color=colors, alpha=0.7)
    ax4.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª', fontsize=12, fontweight='bold')
    ax4.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax4.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, values):
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                f'{value:.6f}', ha='center', va='bottom', fontsize=10)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã
    formula_text = f'std = ‚àö({variance:.6f}) = {std_val:.6f}\nRMS = ‚àö({np.mean(x_squared):.6f}) = {rms_val:.6f}\nstd ‚âà RMS (mean‚âà0)'
    ax4.text(0.02, 0.98, formula_text, transform=ax4.transAxes, 
            verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", 
            facecolor="white", alpha=0.8), fontsize=10)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    filename = 'std_variance_rms_relationship.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    plt.show()

if __name__ == "__main__":
    explain_std_variance_rms_relationship() 